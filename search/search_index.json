{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83d\ude80 Django Base - Template Profissional com Clean Architecture","text":"<p>O template Django mais completo e profissional para iniciar seus projetos com Clean Architecture!</p>"},{"location":"#por-que-escolher-o-django_base-como-seu-template","title":"\u2728 Por que escolher o django_base como seu template?","text":"<p>Este n\u00e3o \u00e9 apenas mais um template Django. \u00c9 uma base s\u00f3lida e profissional que implementa os melhores padr\u00f5es de desenvolvimento, seguindo rigorosamente os princ\u00edpios da Clean Architecture.</p>"},{"location":"#caracteristicas-principais","title":"\ud83c\udfaf Caracter\u00edsticas Principais","text":"<ul> <li>\u2705 93% de cobertura de testes com testes unit\u00e1rios e de integra\u00e7\u00e3o</li> <li>\u2705 Clean Architecture implementada corretamente</li> <li>\u2705 OpenAPI/Swagger documenta\u00e7\u00e3o autom\u00e1tica da API</li> <li>\u2705 Pre-commit hooks para qualidade de c\u00f3digo</li> <li>\u2705 MyPy verifica\u00e7\u00e3o de tipos est\u00e1tica</li> <li>\u2705 OAuth2 completo com django-oauth-toolkit</li> <li>\u2705 Pagina\u00e7\u00e3o e Filtragem avan\u00e7adas</li> <li>\u2705 Logging e Tratamento de Exce\u00e7\u00f5es robustos</li> <li>\u2705 Docker otimizado para dev e produ\u00e7\u00e3o</li> <li>\u2705 GitHub Actions CI/CD pipeline completo</li> <li>\u2705 Documenta\u00e7\u00e3o completa com MkDocs e MkDocstrings</li> <li>\u2705 Makefile com 20+ comandos de automa\u00e7\u00e3o</li> <li>\u2705 Configura\u00e7\u00f5es para local, staging e produ\u00e7\u00e3o</li> </ul>"},{"location":"#clean-architecture-por-que-e-importante","title":"\ud83c\udfd7\ufe0f Clean Architecture - Por que \u00e9 importante?","text":"<p>A Clean Architecture garante que seu c\u00f3digo seja:</p> <ul> <li>\ud83d\udd04 Independente de Frameworks: Troque Django sem quebrar a l\u00f3gica de neg\u00f3cio</li> <li>\ud83e\uddea Test\u00e1vel: Teste regras de neg\u00f3cio sem banco de dados ou UI</li> <li>\ud83c\udfa8 Independente de UI: Mude a interface sem afetar o sistema</li> <li>\ud83d\uddc4\ufe0f Independente de Banco: Troque PostgreSQL por MongoDB facilmente</li> <li>\ud83c\udf10 Independente de Agentes Externos: L\u00f3gica de neg\u00f3cio isolada</li> </ul>"},{"location":"#inicio-rapido","title":"\ud83d\ude80 In\u00edcio R\u00e1pido","text":""},{"location":"#1-use-este-template","title":"1. Use este template","text":"<pre><code># Clique no bot\u00e3o \"Use this template\" acima ou:\ngit clone https://github.com/luderibeiro/django_base.git meu-projeto\ncd meu-projeto\n</code></pre>"},{"location":"#2-setup-com-makefile-recomendado","title":"2. Setup com Makefile (Recomendado)","text":"<pre><code># Instalar depend\u00eancias e configurar ambiente\nmake setup\n\n# Executar testes\nmake test\n\n# Iniciar servidor de desenvolvimento\nmake run\n</code></pre>"},{"location":"#3-setup-manual","title":"3. Setup Manual","text":"<pre><code># Criar ambiente virtual\npython -m venv venv\nsource venv/bin/activate  # Linux/Mac\n# ou\nvenv\\Scripts\\activate     # Windows\n\n# Instalar depend\u00eancias\npip install -r project/requirements.txt\n\n# Configurar banco de dados\ncd project\npython manage.py migrate\n\n# Criar superusu\u00e1rio\npython manage.py createsuperuser\n\n# Executar testes\npytest\n\n# Iniciar servidor\npython manage.py runserver\n</code></pre>"},{"location":"#documentacao-completa","title":"\ud83d\udcda Documenta\u00e7\u00e3o Completa","text":""},{"location":"#arquitetura","title":"\ud83c\udfdb\ufe0f Arquitetura","text":"<ul> <li>Vis\u00e3o Geral - Entenda a estrutura das camadas</li> <li>Camada de Dom\u00ednio - Entidades e regras de neg\u00f3cio</li> <li>Camada de Aplica\u00e7\u00e3o - Casos de uso</li> <li>Camada de Infraestrutura - Reposit\u00f3rios e gateways</li> <li>Camada de Apresenta\u00e7\u00e3o - APIs e interfaces</li> </ul>"},{"location":"#desenvolvimento","title":"\ud83d\udee0\ufe0f Desenvolvimento","text":"<ul> <li>Testes Automatizados - Su\u00edte completa de testes</li> <li>Pagina\u00e7\u00e3o e Filtragem - APIs avan\u00e7adas</li> <li>OAuth2 Implementation - Autentica\u00e7\u00e3o robusta</li> <li>Logging e Tratamento de Erros - Observabilidade</li> <li>Integra\u00e7\u00e3o Frontend - Guias para React/Vue/Angular</li> </ul>"},{"location":"#setup-e-deploy","title":"\u2699\ufe0f Setup e Deploy","text":"<ul> <li>Setup Local - Ambiente de desenvolvimento</li> <li>Setup Homologa\u00e7\u00e3o - Ambiente de testes</li> <li>Setup Produ\u00e7\u00e3o - Deploy em produ\u00e7\u00e3o</li> <li>Configura\u00e7\u00e3o Docker - Containers otimizados</li> </ul>"},{"location":"#casos-de-uso-ideais","title":"\ud83c\udfaf Casos de Uso Ideais","text":"<p>Este template \u00e9 perfeito para:</p> <ul> <li>\ud83c\udfe2 APIs REST profissionais e escal\u00e1veis</li> <li>\ud83d\uded2 E-commerce com autentica\u00e7\u00e3o robusta</li> <li>\ud83d\udcca Sistemas de gest\u00e3o empresariais</li> <li>\ud83c\udf93 Plataformas educacionais com m\u00faltiplos usu\u00e1rios</li> <li>\ud83d\udcf1 Backend para mobile apps com autentica\u00e7\u00e3o OAuth2</li> <li>\ud83d\udd10 Sistemas com m\u00faltiplos perfis de usu\u00e1rio</li> </ul>"},{"location":"#contribua-e-crie-forks","title":"\ud83e\udd1d Contribua e Crie Forks","text":""},{"location":"#contribuindo","title":"Contribuindo","text":"<ul> <li>\ud83d\udcd6 Leia nosso Guia de Contribui\u00e7\u00e3o</li> <li>\ud83d\udc1b Reporte bugs ou sugira melhorias</li> <li>\ud83d\udca1 Proponha novas funcionalidades</li> <li>\ud83d\udcdd Melhore a documenta\u00e7\u00e3o</li> </ul>"},{"location":"#criando-forks-especializados","title":"Criando Forks Especializados","text":"<p>Este template \u00e9 perfeito para criar forks especializados:</p> <ul> <li>\ud83d\uded2 django-ecommerce-base - Template para e-commerce</li> <li>\ud83c\udf93 django-education-base - Template para plataformas educacionais</li> <li>\ud83c\udfe5 django-healthcare-base - Template para sistemas de sa\u00fade</li> <li>\ud83c\udfe6 django-finance-base - Template para sistemas financeiros</li> <li>\ud83d\udcca django-analytics-base - Template para dashboards e analytics</li> </ul>"},{"location":"#estatisticas-do-projeto","title":"\ud83d\udcca Estat\u00edsticas do Projeto","text":"<ul> <li>93% de cobertura de testes com testes unit\u00e1rios e de integra\u00e7\u00e3o</li> <li>Clean Architecture implementada corretamente</li> <li>OpenAPI/Swagger documenta\u00e7\u00e3o autom\u00e1tica da API</li> <li>Pre-commit hooks para qualidade de c\u00f3digo</li> <li>MyPy verifica\u00e7\u00e3o de tipos est\u00e1tica</li> <li>Docker otimizado para dev e produ\u00e7\u00e3o</li> <li>GitHub Actions CI/CD pipeline completo</li> <li>Documenta\u00e7\u00e3o completa com MkDocs</li> <li>Makefile com 20+ comandos de automa\u00e7\u00e3o</li> </ul>"},{"location":"#por-que-este-template-e-diferente","title":"\ud83c\udfc6 Por que este template \u00e9 diferente?","text":"<ol> <li>Clean Architecture Real: N\u00e3o \u00e9 apenas uma estrutura de pastas, \u00e9 uma implementa\u00e7\u00e3o real dos princ\u00edpios</li> <li>Qualidade de C\u00f3digo: Pre-commit hooks, MyPy, Black, Flake8 e Pydocstyle configurados</li> <li>Documenta\u00e7\u00e3o Autom\u00e1tica: OpenAPI/Swagger + MkDocstrings para documenta\u00e7\u00e3o sempre atualizada</li> <li>CI/CD Completo: GitHub Actions com pipeline de testes, qualidade e deploy</li> <li>93% Cobertura de Testes: Testes unit\u00e1rios e de integra\u00e7\u00e3o abrangentes</li> <li>Automa\u00e7\u00e3o Avan\u00e7ada: Makefile com 20+ comandos para desenvolvimento</li> <li>Configura\u00e7\u00f5es Completas: Local, staging e produ\u00e7\u00e3o com Docker otimizado</li> </ol>"},{"location":"#se-este-projeto-te-ajudou-considere-dar-uma-estrela","title":"\ud83c\udf1f Se este projeto te ajudou, considere dar uma estrela!**","text":""},{"location":"CHANGELOG/","title":"Changelog","text":"<p>Todas as altera\u00e7\u00f5es not\u00e1veis neste projeto ser\u00e3o documentadas neste arquivo.</p> <p>O formato \u00e9 baseado em Keep a Changelog, e este projeto adere a Semantic Versioning.</p>"},{"location":"CHANGELOG/#unreleased","title":"[Unreleased]","text":""},{"location":"CHANGELOG/#adicionado","title":"Adicionado","text":"<ul> <li>Nenhuma mudan\u00e7a ainda</li> </ul>"},{"location":"CHANGELOG/#alterado","title":"Alterado","text":"<ul> <li>Nenhuma mudan\u00e7a ainda</li> </ul>"},{"location":"CHANGELOG/#corrigido","title":"Corrigido","text":"<ul> <li>Nenhuma mudan\u00e7a ainda</li> </ul>"},{"location":"CHANGELOG/#removido","title":"Removido","text":"<ul> <li>Nenhuma mudan\u00e7a ainda</li> </ul>"},{"location":"CHANGELOG/#210-2024-12-19","title":"[2.1.0] - 2024-12-19","text":""},{"location":"CHANGELOG/#adicionado_1","title":"Adicionado","text":"<ul> <li> <p>OpenAPI/Swagger Documentation: Implementa\u00e7\u00e3o completa de documenta\u00e7\u00e3o autom\u00e1tica da API usando <code>drf-spectacular</code>, incluindo schema OpenAPI 3.0, interface Swagger UI e ReDoc para melhor experi\u00eancia de desenvolvedor.</p> </li> <li> <p>Pre-commit Hooks: Configura\u00e7\u00e3o de hooks de pre-commit para garantir qualidade de c\u00f3digo, incluindo formata\u00e7\u00e3o autom\u00e1tica (Black), linting (Flake8), verifica\u00e7\u00e3o de docstrings (pydocstyle) e verifica\u00e7\u00e3o de tipos (MyPy).</p> </li> <li> <p>MyPy Static Type Checking: Implementa\u00e7\u00e3o de verifica\u00e7\u00e3o de tipos est\u00e1tica em modo gradual, com configura\u00e7\u00e3o espec\u00edfica para diferentes m\u00f3dulos e integra\u00e7\u00e3o com Django via <code>django-stubs</code>.</p> </li> <li> <p>MkDocstrings Integration: Integra\u00e7\u00e3o do <code>mkdocstrings</code> para gerar documenta\u00e7\u00e3o autom\u00e1tica da API Python diretamente dos docstrings, criando refer\u00eancias completas para camadas de dom\u00ednio, casos de uso e reposit\u00f3rios.</p> </li> <li> <p>GitHub Actions CI/CD: Pipeline completo de CI/CD com workflows para testes, documenta\u00e7\u00e3o, qualidade de c\u00f3digo e deploy, incluindo templates para issues e pull requests.</p> </li> <li> <p>Documenta\u00e7\u00e3o Abrangente:</p> <ul> <li>Guias completos de setup (produ\u00e7\u00e3o, staging, quick-start)</li> <li>An\u00e1lise detalhada de arquitetura do projeto</li> <li>Diretrizes de seguran\u00e7a e melhores pr\u00e1ticas</li> <li>Refer\u00eancias de API e documenta\u00e7\u00e3o t\u00e9cnica</li> </ul> </li> <li> <p>Ferramentas de Qualidade: Configura\u00e7\u00e3o de <code>pydocstyle</code>, <code>pytest-cov</code>, <code>flake8</code>, <code>black</code> e <code>pip-audit</code> para garantir padr\u00f5es de c\u00f3digo e seguran\u00e7a.</p> </li> <li> <p>Assets e Branding: Logos e assets visuais do projeto em diferentes tamanhos para uso em documenta\u00e7\u00e3o e interfaces.</p> </li> </ul>"},{"location":"CHANGELOG/#melhorado","title":"Melhorado","text":"<ul> <li> <p>Docstrings Completas: Adi\u00e7\u00e3o de docstrings detalhadas em todo o projeto seguindo padr\u00f5es PEP 257, incluindo m\u00f3dulos, classes, m\u00e9todos e fun\u00e7\u00f5es.</p> </li> <li> <p>Cobertura de Testes: Aumento da cobertura de testes para 93% com testes unit\u00e1rios adicionais para middleware, URLs e casos de uso.</p> </li> <li> <p>Configura\u00e7\u00e3o de Ambiente: Melhoria significativa na configura\u00e7\u00e3o de vari\u00e1veis de ambiente com suporte a diferentes ambientes (desenvolvimento, staging, produ\u00e7\u00e3o).</p> </li> <li> <p>Makefile: Expans\u00e3o do Makefile com mais de 20 comandos de automa\u00e7\u00e3o para desenvolvimento, testes, documenta\u00e7\u00e3o e deploy.</p> </li> <li> <p>Estrutura de Documenta\u00e7\u00e3o: Reorganiza\u00e7\u00e3o completa da documenta\u00e7\u00e3o com navega\u00e7\u00e3o melhorada e se\u00e7\u00f5es espec\u00edficas para diferentes aspectos do projeto.</p> </li> </ul>"},{"location":"CHANGELOG/#corrigido_1","title":"Corrigido","text":"<ul> <li> <p>Exposi\u00e7\u00e3o de Credenciais: Corre\u00e7\u00e3o de problemas de seguran\u00e7a relacionados \u00e0 exposi\u00e7\u00e3o de credenciais em configura\u00e7\u00f5es e logs.</p> </li> <li> <p>Configura\u00e7\u00f5es de Template: Corre\u00e7\u00e3o de configura\u00e7\u00f5es de templates e paths para funcionamento correto em diferentes ambientes.</p> </li> <li> <p>Imports N\u00e3o Utilizados: Limpeza de imports desnecess\u00e1rios e otimiza\u00e7\u00e3o da estrutura de c\u00f3digo.</p> </li> </ul>"},{"location":"CHANGELOG/#refatorado","title":"Refatorado","text":"<ul> <li> <p>Configura\u00e7\u00f5es de Settings: Refatora\u00e7\u00e3o das configura\u00e7\u00f5es do Django para melhor organiza\u00e7\u00e3o e seguran\u00e7a, incluindo configura\u00e7\u00e3o condicional de banco de dados.</p> </li> <li> <p>Estrutura de Arquivos: Reorganiza\u00e7\u00e3o de arquivos est\u00e1ticos, templates e configura\u00e7\u00f5es para melhor manutenibilidade.</p> </li> </ul>"},{"location":"CHANGELOG/#200-2024-09-03","title":"[2.0.0] - 2024-09-03","text":""},{"location":"CHANGELOG/#adicionado_2","title":"Adicionado","text":"<ul> <li> <p>Testes de Integra\u00e7\u00e3o Completos: Implementa\u00e7\u00e3o de uma su\u00edte abrangente de testes de integra\u00e7\u00e3o para todas as funcionalidades da API, incluindo autentica\u00e7\u00e3o, gerenciamento de usu\u00e1rios, pagina\u00e7\u00e3o, filtragem e altera\u00e7\u00e3o de senhas. Todos os 48 testes est\u00e3o passando com 100% de cobertura das funcionalidades principais.</p> </li> <li> <p>Tratamento Robusto de Exce\u00e7\u00f5es: Melhoria significativa no tratamento de exce\u00e7\u00f5es, incluindo captura correta de <code>IntegrityError</code> para retornar 400 Bad Request em vez de 500 Internal Server Error, e tratamento adequado de erros de valida\u00e7\u00e3o e permiss\u00f5es.</p> </li> <li> <p>Autentica\u00e7\u00e3o e Autoriza\u00e7\u00e3o Aprimoradas: Implementa\u00e7\u00e3o de autentica\u00e7\u00e3o robusta com OAuth2 e suporte a testes usando <code>force_authenticate</code> para maior confiabilidade nos testes de integra\u00e7\u00e3o.</p> </li> <li> <p>Limpeza e Otimiza\u00e7\u00e3o de C\u00f3digo: Remo\u00e7\u00e3o de imports n\u00e3o utilizados, logs de debug desnecess\u00e1rios e otimiza\u00e7\u00e3o da estrutura de c\u00f3digo para melhor manutenibilidade.</p> </li> </ul>"},{"location":"CHANGELOG/#corrigido_2","title":"Corrigido","text":"<ul> <li> <p>Erro de Serializer de Altera\u00e7\u00e3o de Senha: Corrigido problema onde o serializer tentava chamar <code>to_internal_value()</code> em dados j\u00e1 validados, causando <code>AttributeError</code>.</p> </li> <li> <p>Tratamento de IntegrityError: Corrigido para capturar corretamente <code>django.db.utils.IntegrityError</code> e retornar 400 Bad Request para viola\u00e7\u00f5es de constraint de banco de dados.</p> </li> <li> <p>Imports N\u00e3o Utilizados: Removidos imports desnecess\u00e1rios (<code>filters</code>, <code>ClassVar</code>, <code>get_user_repository</code>) que estavam causando warnings de linting.</p> </li> <li> <p>Logs de Debug: Removidos logs de debug tempor\u00e1rios dos testes e middleware para produ\u00e7\u00e3o.</p> </li> </ul>"},{"location":"CHANGELOG/#melhorado_1","title":"Melhorado","text":"<ul> <li> <p>Qualidade do C\u00f3digo: Aplica\u00e7\u00e3o de \"pente fino\" em todo o projeto, garantindo que n\u00e3o h\u00e1 problemas de linting, imports n\u00e3o utilizados ou c\u00f3digo desnecess\u00e1rio.</p> </li> <li> <p>Estrutura de Testes: Reorganiza\u00e7\u00e3o e otimiza\u00e7\u00e3o dos testes para maior clareza e manutenibilidade, com foco em testes de integra\u00e7\u00e3o robustos.</p> </li> <li> <p>Documenta\u00e7\u00e3o: Atualiza\u00e7\u00e3o da documenta\u00e7\u00e3o para refletir as mudan\u00e7as da vers\u00e3o 2.0.0, incluindo README e CHANGELOG.</p> </li> </ul>"},{"location":"CHANGELOG/#200-2024-07-30","title":"[2.0.0] - 2024-07-30","text":""},{"location":"CHANGELOG/#adicionado_3","title":"Adicionado","text":"<ul> <li> <p>Atualiza\u00e7\u00e3o de Depend\u00eancias e Corre\u00e7\u00e3o de Vulnerabilidades: Todas as depend\u00eancias do projeto foram atualizadas para suas vers\u00f5es est\u00e1veis mais recentes, e as vulnerabilidades de seguran\u00e7a conhecidas no Django (5.0.14) e setuptools (66.1.1) foram corrigidas. Isso garante um ambiente de desenvolvimento e produ\u00e7\u00e3o mais seguro e est\u00e1vel.</p> </li> <li> <p>Configura\u00e7\u00e3o de Logs e Tratamento Global de Exce\u00e7\u00f5es: Implementa\u00e7\u00e3o de uma estrat\u00e9gia robusta de logging com m\u00faltiplos handlers (console, arquivo de log, arquivo de erros), formatadores padronizados e loggers espec\u00edficos. Cria\u00e7\u00e3o de um middleware customizado para tratamento global de exce\u00e7\u00f5es no Django REST Framework, que captura, registra e padroniza respostas de erro da API. Logs foram adicionados a casos de uso (<code>LoginUserUseCase</code>, <code>ListUsersUseCase</code>) e reposit\u00f3rios (<code>DjangoUserRepository</code>) para maior observabilidade.</p> <ul> <li><code>project/project/settings.py</code>: Configura\u00e7\u00e3o de <code>LOGGING</code> e integra\u00e7\u00e3o do middleware no <code>REST_FRAMEWORK</code>.</li> <li><code>project/core/middleware/custom_exception_middleware.py</code>: Novo arquivo com o handler de exce\u00e7\u00f5es customizado.</li> <li><code>project/core/domain/use_cases/user_use_cases.py</code>: Adi\u00e7\u00e3o de logs.</li> <li><code>project/core/repositories/user_repository_impl.py</code>: Adi\u00e7\u00e3o de logs e tratamento de exce\u00e7\u00f5es espec\u00edficas.</li> <li>Documenta\u00e7\u00e3o detalhada em <code>docs/development/logging-error-handling.md</code>.</li> </ul> </li> <li> <p>Otimiza\u00e7\u00e3o e Refatora\u00e7\u00e3o de Arquivos Docker: Reestrutura\u00e7\u00e3o do <code>Dockerfile</code> para um modelo multi-stage (build e execu\u00e7\u00e3o) com imagem base mais leve (<code>python:3.12-slim-bookworm</code>), combina\u00e7\u00e3o de comandos <code>RUN</code> para reduzir camadas, e otimiza\u00e7\u00e3o na instala\u00e7\u00e3o de depend\u00eancias. Introdu\u00e7\u00e3o de arquivos <code>docker-compose.dev.yml</code> e <code>docker-compose.prod.yml</code> para separar as configura\u00e7\u00f5es de ambientes de desenvolvimento e produ\u00e7\u00e3o, com <code>Dockerfile.dev</code> para desenvolvimento e <code>.dockerignore</code> para exclus\u00e3o de arquivos desnecess\u00e1rios.</p> <ul> <li><code>.dockerignore</code>: Novo arquivo para exclus\u00e3o de arquivos irrelevantes no contexto de build.</li> <li><code>Dockerfile</code>: Refatorado para multi-stage build e otimizado para produ\u00e7\u00e3o.</li> <li><code>Dockerfile.dev</code>: Novo arquivo para ambiente de desenvolvimento.</li> <li><code>docker-compose.dev.yml</code>: Novo arquivo para orquestra\u00e7\u00e3o de servi\u00e7os em desenvolvimento.</li> <li><code>docker-compose.prod.yml</code>: Novo arquivo para orquestra\u00e7\u00e3o de servi\u00e7os em produ\u00e7\u00e3o.</li> <li><code>docker-compose.yml</code>: Removido.</li> <li><code>dotenv_files/.env.prod</code>: Novo arquivo para vari\u00e1veis de ambiente de produ\u00e7\u00e3o.</li> <li><code>docs/setup/project-setup.md</code>: Documenta\u00e7\u00e3o atualizada para refletir a nova estrutura Docker.</li> </ul> </li> <li> <p>Testes Automatizados: Implementa\u00e7\u00e3o de uma su\u00edte abrangente de testes unit\u00e1rios para as camadas de Dom\u00ednio e Aplica\u00e7\u00e3o, e testes de integra\u00e7\u00e3o para a API (autentica\u00e7\u00e3o e gerenciamento de usu\u00e1rios).</p> <ul> <li><code>project/core/tests/unit/test_user_entity.py</code></li> <li><code>project/core/tests/unit/test_user_use_cases.py</code></li> <li><code>project/core/tests/unit/test_generic_use_cases.py</code></li> <li><code>project/core/tests/integration/test_auth_api.py</code></li> <li><code>project/core/tests/integration/test_user_api.py</code></li> <li>Configura\u00e7\u00e3o do Pytest (<code>pytest.ini</code>) e adi\u00e7\u00e3o de depend\u00eancias (<code>pytest</code>, <code>pytest-mock</code>, <code>pytest-django</code>).</li> <li>Documenta\u00e7\u00e3o detalhada em <code>docs/development/automated-testing.md</code>.</li> </ul> </li> <li>Pagina\u00e7\u00e3o e Filtragem: Adicionadas capacidades de pagina\u00e7\u00e3o (<code>offset</code>, <code>limit</code>) e filtragem (<code>search_query</code>) para a API de listagem de usu\u00e1rios. Isso envolveu modifica\u00e7\u00f5es nos DTOs, interface de reposit\u00f3rio, implementa\u00e7\u00e3o do reposit\u00f3rio (<code>DjangoUserRepository</code> usando <code>Q</code> objects), serializers e views do DRF, e testes de integra\u00e7\u00e3o abrangentes.<ul> <li><code>project/core/domain/use_cases/user_use_cases.py</code>: DTOs <code>ListUsersRequest</code>, <code>ListUsersResponse</code> e <code>ListUsersUseCase</code> atualizados.</li> <li><code>project/core/domain/data_access.py</code>: Interface <code>UserRepository</code> com <code>get_all_paginated_filtered</code>.</li> <li><code>project/core/repositories/user_repository_impl.py</code>: Implementa\u00e7\u00e3o de <code>get_all_paginated_filtered</code>.</li> <li><code>project/core/api/v1/serializers/user.py</code>: <code>ListUsersRequestSerializer</code> e <code>UserListResponseSerializer</code>.</li> <li><code>project/core/api/v1/views/user.py</code>: <code>UserListAPIView</code> atualizada.</li> <li><code>project/core/tests/integration/test_user_api.py</code>: Novos testes de pagina\u00e7\u00e3o e filtragem.</li> <li>Documenta\u00e7\u00e3o detalhada em <code>docs/development/pagination-filtering.md</code>.</li> </ul> </li> <li>Estrutura de Changelog: Cria\u00e7\u00e3o deste arquivo <code>CHANGELOG.md</code> para rastrear todas as altera\u00e7\u00f5es do projeto, substituindo o antigo <code>SUMMARY_OF_CHANGES.md</code>.</li> </ul>"},{"location":"CHANGELOG/#alterado_1","title":"Alterado","text":"<ul> <li>Links de Documenta\u00e7\u00e3o: Corrigidos links absolutos e relativos no <code>README.md</code> da raiz e no <code>docs/CONTRIBUTING.md</code> para garantir o funcionamento correto no GitHub Pages.</li> <li>Navega\u00e7\u00e3o do MkDocs: Atualiza\u00e7\u00e3o do <code>mkdocs.yml</code> para incluir novas entradas de documenta\u00e7\u00e3o (Testes Automatizados, Pagina\u00e7\u00e3o e Filtragem, Logs e Tratamento de Exce\u00e7\u00f5es) e a nova entrada <code>Changelog</code>.</li> </ul>"},{"location":"CHANGELOG/#refatorado_1","title":"Refatorado","text":"<ul> <li>Modelo de Usu\u00e1rio Mais Leve: O modelo <code>User</code> do Django foi refatorado para herdar de <code>AbstractBaseUser</code> e <code>PermissionsMixin</code>, removendo o campo <code>username</code> e definindo <code>USERNAME_FIELD = \"email\"</code> e <code>REQUIRED_FIELDS</code> apropriadamente. A l\u00f3gica em <code>DjangoUserRepository</code> e nos casos de uso foi adaptada para o novo modelo.</li> <li>Implementa\u00e7\u00e3o OAuth2 Completa: A <code>DjangoAuthGateway</code> foi atualizada para utilizar o <code>django-oauth-toolkit</code> para a gera\u00e7\u00e3o real de tokens de acesso e refresh, substituindo a l\u00f3gica de tokens fict\u00edcios. Configura\u00e7\u00f5es OAuth2 confirmadas em <code>settings.py</code> e <code>urls.py</code>.</li> </ul>"},{"location":"CHANGELOG/#110-projeto-base-de-arquitetura-limpa-inicial","title":"[1.1.0] - Projeto Base de Arquitetura Limpa Inicial","text":""},{"location":"CHANGELOG/#adicionado_4","title":"Adicionado","text":"<ul> <li>Estrutura da Arquitetura Limpa: O projeto foi reestruturado em camadas distintas (Dom\u00ednio, Aplica\u00e7\u00e3o, Infraestrutura, Apresenta\u00e7\u00e3o), promovendo o desacoplamento e a separa\u00e7\u00e3o de responsabilidades.<ul> <li>Dom\u00ednio: Entidades de neg\u00f3cio (<code>User</code>) e interfaces abstratas (<code>UserRepository</code>, <code>AuthGateway</code>).</li> <li>Aplica\u00e7\u00e3o: Casos de uso (use cases/interactors) para orquestrar a l\u00f3gica de neg\u00f3cio, dependendo apenas da camada de Dom\u00ednio. Foram criados casos de uso gen\u00e9ricos CRUD e casos de uso espec\u00edficos para <code>User</code> (cria\u00e7\u00e3o, login, listagem, obten\u00e7\u00e3o por ID, altera\u00e7\u00e3o de senha).</li> <li>Infraestrutura: Implementa\u00e7\u00f5es concretas das interfaces de reposit\u00f3rio e gateway usando tecnologias espec\u00edficas (ex: <code>DjangoUserRepository</code> via ORM do Django, <code>DjangoAuthGateway</code> para autentica\u00e7\u00e3o Django).</li> <li>Apresenta\u00e7\u00e3o (API): Views e serializers do Django REST Framework adaptados para interagir com os casos de uso e seus DTOs.</li> </ul> </li> <li>Inje\u00e7\u00e3o de Depend\u00eancias: M\u00f3dulo (<code>project/core/api/deps.py</code>) criado para gerenciar e injetar as depend\u00eancias concretas nos casos de uso.</li> <li>Documenta\u00e7\u00e3o Inicial: Cria\u00e7\u00e3o de um guia detalhado sobre a Arquitetura Limpa no projeto.</li> <li>Arquivos Open Source: Inclus\u00e3o de <code>CONTRIBUTING.md</code> e <code>CODE_OF_CONDUCT.md</code>.</li> <li>Configura\u00e7\u00e3o MkDocs: Setup do MkDocs e GitHub Pages para hospedar a documenta\u00e7\u00e3o do projeto.</li> </ul>"},{"location":"CHANGELOG/#alterado_2","title":"Alterado","text":"<ul> <li>Configura\u00e7\u00e3o de URLs: Rotas da API (<code>/v1/users/</code>, <code>/v1/login/</code>, etc.) foram centralizadas e atualizadas.</li> <li>Serializers e Views DRF: Adaptados para interagir com os casos de uso e seus DTOs, garantindo que a camada de apresenta\u00e7\u00e3o atue como um adaptador.</li> <li>Reestrutura\u00e7\u00e3o da Documenta\u00e7\u00e3o: O guia original foi dividido e organizado em um novo diret\u00f3rio <code>docs/</code> com subdiret\u00f3rios (<code>architecture/</code>, <code>development/</code>, <code>setup/</code>), melhorando a navegabilidade.</li> </ul>"},{"location":"CHANGELOG/#removido_1","title":"Removido","text":"<ul> <li>L\u00f3gica de neg\u00f3cio diretamente de views e serializers do DRF, movida para os casos de uso na camada de Aplica\u00e7\u00e3o.</li> </ul>"},{"location":"CODE_OF_CONDUCT/","title":"C\u00f3digo de Conduta","text":"<p>N\u00f3s, como colaboradores e mantenedores, nos comprometemos a tornar a participa\u00e7\u00e3o em nosso projeto e em nossa comunidade uma experi\u00eancia livre de ass\u00e9dio para todos, independentemente da idade, tamanho corporal, defici\u00eancia vis\u00edvel ou invis\u00edvel, etnia, caracter\u00edsticas sexuais, identidade e express\u00e3o de g\u00eanero, n\u00edvel de experi\u00eancia, educa\u00e7\u00e3o, status socioecon\u00f4mico, nacionalidade, apar\u00eancia pessoal, ra\u00e7a, religi\u00e3o ou identidade e orienta\u00e7\u00e3o sexual.</p> <p>N\u00f3s nos comprometemos a agir e interagir de maneiras que contribuam para uma comunidade aberta, acolhedora, diversa, inclusiva e saud\u00e1vel.</p>"},{"location":"CODE_OF_CONDUCT/#nossos-padroes","title":"Nossos Padr\u00f5es","text":"<p>Exemplos de comportamento que contribuem para um ambiente positivo para nossa comunidade incluem:</p> <ul> <li>Demonstrar empatia e bondade com outras pessoas.</li> <li>Ser respeitoso com diferentes opini\u00f5es, pontos de vista e experi\u00eancias.</li> <li>Dar e aceitar feedback construtivo de forma graciosa.</li> <li>Aceitar a responsabilidade e pedir desculpas \u00e0queles que s\u00e3o afetados por nossos erros, e aprender com a experi\u00eancia.</li> <li>Focar no que \u00e9 melhor n\u00e3o apenas para n\u00f3s como indiv\u00edduos, mas para a comunidade em geral.</li> </ul> <p>Exemplos de comportamento inaceit\u00e1vel incluem:</p> <ul> <li>O uso de linguagem ou imagens sexualizadas, e aten\u00e7\u00e3o ou avan\u00e7os sexuais de qualquer tipo.</li> <li>Coment\u00e1rios ofensivos ou depreciativos, e ataques pessoais ou pol\u00edticos.</li> <li>Ass\u00e9dio p\u00fablico ou privado.</li> <li>Publicar informa\u00e7\u00f5es privadas de outras pessoas, como um endere\u00e7o f\u00edsico ou eletr\u00f4nico, sem a permiss\u00e3o expl\u00edcita delas.</li> <li>Outras condutas que poderiam ser razoavelmente consideradas inadequadas em um ambiente profissional.</li> </ul>"},{"location":"CODE_OF_CONDUCT/#responsabilidades-de-aplicacao","title":"Responsabilidades de Aplica\u00e7\u00e3o","text":"<p>Os mantenedores do projeto s\u00e3o respons\u00e1veis por esclarecer e aplicar nossos padr\u00f5es de comportamento aceit\u00e1vel e tomar a\u00e7\u00f5es corretivas apropriadas e justas em resposta a qualquer comportamento que considerem inadequado, amea\u00e7ador, ofensivo ou prejudicial.</p> <p>Os mantenedores do projeto t\u00eam o direito e a responsabilidade de remover, editar ou rejeitar coment\u00e1rios, commits, c\u00f3digo, edi\u00e7\u00f5es de wiki, issues e outras contribui\u00e7\u00f5es que n\u00e3o estejam alinhadas com este C\u00f3digo de Conduta, e ir\u00e3o comunicar as raz\u00f5es para as decis\u00f5es de modera\u00e7\u00e3o quando apropriado.</p>"},{"location":"CODE_OF_CONDUCT/#escopo","title":"Escopo","text":"<p>Este C\u00f3digo de Conduta se aplica a todos os espa\u00e7os do projeto, e tamb\u00e9m se aplica quando um indiv\u00edduo est\u00e1 representando o projeto ou sua comunidade em espa\u00e7os p\u00fablicos. Exemplos de representa\u00e7\u00e3o de um projeto incluem o uso de um endere\u00e7o de e-mail oficial do projeto, postagem por meio de uma conta oficial de m\u00eddia social ou atua\u00e7\u00e3o como representante nomeado em um evento online ou offline.</p>"},{"location":"CODE_OF_CONDUCT/#processo-de-relato","title":"Processo de Relato","text":"<p>Inst\u00e2ncias de comportamento abusivo, assediador ou inaceit\u00e1vel podem ser relatadas entrando em contato com a equipe do projeto em your-email@example.com. Todas as reclama\u00e7\u00f5es ser\u00e3o revisadas e investigadas prontamente e de forma justa. Toda a equipe do projeto \u00e9 obrigada a respeitar a privacidade e a seguran\u00e7a do relator de qualquer incidente.</p>"},{"location":"CODE_OF_CONDUCT/#atribuicao","title":"Atribui\u00e7\u00e3o","text":"<p>Este C\u00f3digo de Conduta \u00e9 adaptado do Contributor Covenant, vers\u00e3o 2.1, dispon\u00edvel em https://www.contributor-covenant.org/version/2/1/code_of_conduct.html.</p>"},{"location":"CONTRIBUTING/","title":"Guia de Contribui\u00e7\u00e3o","text":"<p>Boas-vindas ao guia de contribui\u00e7\u00e3o para o <code>django_base</code>!</p> <p>Estamos muito felizes com o seu interesse em contribuir para tornar este projeto uma base ainda melhor para aplica\u00e7\u00f5es Django com Arquitetura Limpa. Sua ajuda \u00e9 valiosa!</p> <p>Por favor, reserve um momento para revisar este documento antes de abrir um Pull Request (PR) ou Issue. Isso nos ajuda a manter a comunidade coesa e eficiente, e a garantir um fluxo de trabalho tranquilo para todos.</p>"},{"location":"CONTRIBUTING/#1-codigo-de-conduta","title":"1. C\u00f3digo de Conduta","text":"<p>Por favor, leia nosso C\u00f3digo de Conduta. Esperamos que todos os colaboradores o sigam.</p>"},{"location":"CONTRIBUTING/#2-como-contribuir","title":"2. Como Contribuir","text":""},{"location":"CONTRIBUTING/#reportando-bugs","title":"Reportando Bugs","text":"<p>Se voc\u00ea encontrar um bug, por favor, siga estas etapas:</p> <ol> <li>Procure por Issues Existentes: Verifique se o bug j\u00e1 foi reportado. Se sim, adicione seus coment\u00e1rios ou rea\u00e7\u00f5es.</li> <li>Abra uma Nova Issue: Se n\u00e3o encontrou, abra uma nova issue descrevendo o bug. Inclua:<ul> <li>Um t\u00edtulo claro e conciso.</li> <li>Uma descri\u00e7\u00e3o detalhada do problema.</li> <li>Passos para reproduzir o bug.</li> <li>Comportamento esperado vs. comportamento real.</li> <li>Vers\u00e3o do Django, Python e outras depend\u00eancias relevantes.</li> <li>Quaisquer mensagens de erro ou logs.</li> </ul> </li> </ol>"},{"location":"CONTRIBUTING/#sugerindo-novas-funcionalidades-ou-melhorias","title":"Sugerindo Novas Funcionalidades ou Melhorias","text":"<p>Se voc\u00ea tiver uma ideia para uma nova funcionalidade ou melhoria, por favor, siga estas etapas:</p> <ol> <li>Procure por Issues Existentes: Verifique se a funcionalidade j\u00e1 foi discutida. Se sim, adicione seus coment\u00e1rios ou rea\u00e7\u00f5es.</li> <li>Abra uma Nova Issue: Se n\u00e3o encontrou, abra uma nova issue descrevendo a funcionalidade. Inclua:<ul> <li>Um t\u00edtulo claro e conciso.</li> <li>Uma descri\u00e7\u00e3o detalhada da funcionalidade.</li> <li>Por que ela seria \u00fatil.</li> <li>Exemplos de como ela funcionaria ou seria usada.</li> </ul> </li> </ol>"},{"location":"CONTRIBUTING/#contribuindo-com-codigo","title":"Contribuindo com C\u00f3digo","text":"<p>Estamos sempre abertos a contribui\u00e7\u00f5es de c\u00f3digo! Para isso, siga o fluxo de trabalho abaixo:</p> <ol> <li>Fa\u00e7a Fork do Reposit\u00f3rio: Clique no bot\u00e3o \"Fork\" no GitHub.</li> <li>Clone o seu Fork: <code>git clone https://github.com/SEU_USERNAME/django_base.git</code></li> <li> <p>Crie um Branch: Crie um novo branch para a sua contribui\u00e7\u00e3o. Use um nome descritivo (e.g., <code>feat/adiciona-autenticacao</code>, <code>fix/corrige-bug-de-login</code>, <code>docs/melhora-readme</code>).</p> <pre><code>git checkout -b seu-branch-descritivo\n</code></pre> </li> <li> <p>Desenvolva Suas Altera\u00e7\u00f5es: Implemente suas funcionalidades ou corre\u00e7\u00f5es.</p> <ul> <li>Estilo de C\u00f3digo: Siga o estilo de c\u00f3digo existente no projeto (geralmente PEP 8 para Python, com formata\u00e7\u00e3o por <code>black</code> e <code>isort</code>). Usaremos <code>ruff</code> para linting.</li> <li>Testes: Adicione testes unit\u00e1rios para o novo c\u00f3digo e atualize os testes de integra\u00e7\u00e3o, se necess\u00e1rio. Certifique-se de que todos os testes existentes continuem passando.</li> <li>Documenta\u00e7\u00e3o: Atualize a documenta\u00e7\u00e3o (<code>docs/</code>) relevante para suas altera\u00e7\u00f5es.</li> </ul> </li> <li>Fa\u00e7a Commit das Suas Altera\u00e7\u00f5es: Escreva mensagens de commit claras e concisas, usando o modo imperativo.<ul> <li><code>feat: Adicionar nova funcionalidade de usu\u00e1rio</code></li> <li><code>fix: Corrigir erro de valida\u00e7\u00e3o de email</code></li> <li><code>docs: Melhorar guia de contribui\u00e7\u00e3o</code></li> </ul> </li> <li>Fa\u00e7a Push para o seu Fork: <code>git push origin seu-branch-descritivo</code></li> <li>Abra um Pull Request (PR):<ul> <li>V\u00e1 para a p\u00e1gina do seu fork no GitHub e clique em \"Compare &amp; pull request\" ou use o bot\u00e3o \"New pull request\".</li> <li>Forne\u00e7a um t\u00edtulo e descri\u00e7\u00e3o claros para o seu PR, explicando as mudan\u00e7as e referenciando as issues relevantes.</li> <li>Certifique-se de que os testes automatizados (CI) passem.</li> </ul> </li> </ol>"},{"location":"CONTRIBUTING/#3-ambiente-de-desenvolvimento","title":"3. Ambiente de Desenvolvimento","text":"<p>Para configurar seu ambiente de desenvolvimento local, por favor, consulte a se\u00e7\u00e3o de Configura\u00e7\u00e3o do Projeto na documenta\u00e7\u00e3o.</p>"},{"location":"CONTRIBUTING/#4-testes","title":"4. Testes","text":"<p>Para informa\u00e7\u00f5es sobre como executar os testes do projeto, consulte a se\u00e7\u00e3o Como Testar na documenta\u00e7\u00e3o.</p>"},{"location":"architecture/application-layer/","title":"Camada de Aplica\u00e7\u00e3o (Casos de Uso)","text":"<p>Esta camada cont\u00e9m a l\u00f3gica espec\u00edfica da aplica\u00e7\u00e3o (use cases ou interatores). Ela orquestra as entidades de dom\u00ednio e utiliza as interfaces de reposit\u00f3rio e gateway para realizar suas opera\u00e7\u00f5es. Os casos de uso s\u00e3o independentes de qualquer camada externa.</p> <ul> <li><code>project/core/domain/use_cases/user_use_cases.py</code>: Este arquivo agora cont\u00e9m:<ul> <li>DTOs (Data Transfer Objects): Classes <code>CreateUserRequest</code>, <code>CreateUserResponse</code>, <code>LoginUserRequest</code>, <code>LoginUserResponse</code>, <code>ChangeUserPasswordRequest</code>, <code>ChangeUserPasswordResponse</code>, <code>ListUsersRequest</code>, <code>ListUsersResponse</code> e <code>GetUserByIdRequest</code> foram definidas para entrada e sa\u00edda dos casos de uso, garantindo que os casos de uso sejam independentes dos formatos de requisi\u00e7\u00e3o/resposta da API.</li> <li><code>CreateUserUseCase</code>: Gerencia a l\u00f3gica para criar um novo usu\u00e1rio.</li> <li><code>LoginUserUseCase</code>: Gerencia a l\u00f3gica para autenticar um usu\u00e1rio e gerar tokens.</li> <li><code>ChangeUserPasswordUseCase</code>: Gerencia a l\u00f3gica para alterar a senha de um usu\u00e1rio.</li> <li><code>ListUsersUseCase</code>: Gerencia a l\u00f3gica para listar usu\u00e1rios.</li> <li><code>GetUserByIdUseCase</code>: Gerencia a l\u00f3gica para obter um usu\u00e1rio por ID.</li> </ul> </li> </ul>"},{"location":"architecture/domain-layer/","title":"Camada de Dom\u00ednio","text":"<p>Esta \u00e9 a camada mais interna e cont\u00e9m as regras de neg\u00f3cio essenciais da aplica\u00e7\u00e3o (Entidades) e as abstra\u00e7\u00f5es para intera\u00e7\u00f5es com o mundo exterior (Interfaces de Reposit\u00f3rio e Gateways). Ela \u00e9 completamente independente de qualquer framework ou banco de dados.</p>"},{"location":"architecture/domain-layer/#entidades","title":"Entidades","text":"<ul> <li><code>project/core/domain/entities/user.py</code>: Criada a entidade <code>User</code> para representar um usu\u00e1rio de forma agn\u00f3stica a frameworks, contendo apenas os atributos e m\u00e9todos de dom\u00ednio (ex: <code>email</code>, <code>first_name</code>, <code>is_admin</code>). Esta entidade n\u00e3o herda de <code>django.db.models.Model</code>.</li> </ul>"},{"location":"architecture/domain-layer/#interfaces-de-acesso-a-dados-repositories","title":"Interfaces de Acesso a Dados (Repositories)","text":"<ul> <li><code>project/core/domain/data_access.py</code>: Criada a interface abstrata <code>UserRepository</code>, que define os m\u00e9todos que qualquer reposit\u00f3rio de usu\u00e1rio deve implementar (ex: <code>get_user_by_id</code>, <code>create_user</code>, <code>get_all_users</code>).</li> </ul>"},{"location":"architecture/domain-layer/#interfaces-de-gateways-auth-etc","title":"Interfaces de Gateways (Auth, etc.)","text":"<ul> <li><code>project/core/domain/gateways.py</code>: Criada a interface abstrata <code>AuthGateway</code>, que define m\u00e9todos para opera\u00e7\u00f5es de autentica\u00e7\u00e3o como <code>check_password</code>, <code>create_tokens</code>, e <code>set_password</code>.</li> </ul>"},{"location":"architecture/infrastructure-layer/","title":"Camada de Infraestrutura","text":"<p>Esta camada \u00e9 respons\u00e1vel pela implementa\u00e7\u00e3o das interfaces definidas na camada de Dom\u00ednio. Ela lida com os detalhes t\u00e9cnicos, como persist\u00eancia de dados (Django ORM) ou comunica\u00e7\u00e3o com servi\u00e7os externos.</p> <ul> <li><code>project/core/repositories/user_repository_impl.py</code>: Criada a implementa\u00e7\u00e3o <code>DjangoUserRepository</code> que herda de <code>UserRepository</code> e utiliza o ORM do Django para interagir com o modelo <code>User</code> do Django. Inclui a convers\u00e3o entre a entidade de dom\u00ednio <code>User</code> e o modelo Django <code>User</code>.</li> <li><code>project/core/repositories/auth_gateway_impl.py</code>: Criada a implementa\u00e7\u00e3o <code>DjangoAuthGateway</code> que herda de <code>AuthGateway</code> e utiliza o sistema de autentica\u00e7\u00e3o do Django para <code>check_password</code> e um placeholder para <code>create_tokens</code> e a implementa\u00e7\u00e3o para <code>set_password</code>.</li> </ul>"},{"location":"architecture/lighter-user-model/","title":"Refatorando o Modelo de Usu\u00e1rio do Django para uma Entidade mais Leve","text":"<p>Esta se\u00e7\u00e3o detalha o processo de refatora\u00e7\u00e3o do modelo <code>User</code> do Django para que ele seja uma entidade de persist\u00eancia mais leve, com menos acoplamento ao framework Django e mais alinhada com a camada de Dom\u00ednio da Arquitetura Limpa.</p>"},{"location":"architecture/lighter-user-model/#1-contexto-e-justificativa","title":"1. Contexto e Justificativa","text":"<p>Originalmente, o modelo <code>User</code> do Django herda de <code>AbstractUser</code>, o que traz consigo muitas funcionalidades e depend\u00eancias espec\u00edficas do framework (permiss\u00f5es, grupos, etc.). Embora conveniente, isso pode levar a um forte acoplamento da camada de Dom\u00ednio \u00e0 Infraestrutura (Django). O objetivo desta refatora\u00e7\u00e3o \u00e9 isolar a entidade de Dom\u00ednio <code>User</code> e fazer com que o modelo Django atue apenas como um adaptador de persist\u00eancia.</p>"},{"location":"architecture/lighter-user-model/#2-abordagem-da-refatoracao","title":"2. Abordagem da Refatora\u00e7\u00e3o","text":""},{"location":"architecture/lighter-user-model/#a-modelo-user-do-django-projectcoremodelsuserpy","title":"a. Modelo <code>User</code> do Django (<code>project/core/models/user.py</code>)","text":"<p>O modelo <code>User</code> foi simplificado para herdar de <code>AbstractBaseUser</code> e <code>PermissionsMixin</code>. O campo <code>username</code> foi removido, e o <code>USERNAME_FIELD</code> foi definido como <code>email</code>. Isso o torna mais flex\u00edvel e menos acoplado \u00e0s suposi\u00e7\u00f5es padr\u00e3o do <code>AbstractUser</code>.</p> <pre><code>from typing import ClassVar\nfrom django.contrib.auth.models import AbstractBaseUser, BaseUserManager, PermissionsMixin\nfrom django.db import models\n\n# ... (UserManager inalterado ou com ajustes internos para AbstractBaseUser)\n\nclass User(AbstractBaseUser, PermissionsMixin):\n    email = models.EmailField(unique=True)\n    first_name = models.CharField(max_length=30)\n    last_name = models.CharField(max_length=150)\n\n    USERNAME_FIELD = \"email\"\n    REQUIRED_FIELDS: ClassVar[list[str]] = [\"first_name\", \"last_name\"]\n\n    objects: ClassVar[UserManager] = UserManager()\n\n    def __str__(self):\n        return self.email\n</code></pre>"},{"location":"architecture/lighter-user-model/#b-entidade-de-dominio-user-projectcoredomainentitiesuserpy","title":"b. Entidade de Dom\u00ednio <code>User</code> (<code>project/core/domain/entities/user.py</code>)","text":"<p>Esta entidade j\u00e1 foi criada para ser agn\u00f3stica a frameworks e n\u00e3o exigiu altera\u00e7\u00f5es. Ela cont\u00e9m apenas os atributos e m\u00e9todos de neg\u00f3cio essenciais, sem qualquer depend\u00eancia do Django.</p>"},{"location":"architecture/lighter-user-model/#c-repositorio-de-usuario-projectcorerepositoriesuser_repository_implpy","title":"c. Reposit\u00f3rio de Usu\u00e1rio (<code>project/core/repositories/user_repository_impl.py</code>)","text":"<p>O <code>DjangoUserRepository</code> foi atualizado para lidar com as mudan\u00e7as no modelo Django <code>User</code> e para garantir que o mapeamento entre a entidade de Dom\u00ednio <code>User</code> e o modelo de persist\u00eancia do Django ocorra corretamente.</p> <p>Principais altera\u00e7\u00f5es:</p> <ul> <li>No m\u00e9todo <code>create</code>, a passagem de <code>is_active</code>, <code>is_staff</code> e <code>is_superuser</code> para <code>DjangoUser.objects.create_user</code> foi removida, pois esses campos agora s\u00e3o tratados internamente pelo <code>UserManager</code> ao herdar de <code>AbstractBaseUser</code>.</li> <li>No m\u00e9todo <code>update</code>, a atualiza\u00e7\u00e3o direta dos campos <code>is_active</code>, <code>is_staff</code> e <code>is_superuser</code> foi removida do modelo Django, pois eles s\u00e3o gerenciados pelo <code>PermissionsMixin</code>.</li> <li>No m\u00e9todo <code>_to_domain_user</code>, o acesso aos campos <code>is_active</code>, <code>is_staff</code> e <code>is_superuser</code> foi ajustado para refletir a nova estrutura do modelo Django (<code>AbstractBaseUser</code> e <code>PermissionsMixin</code>).</li> <li>No m\u00e9todo <code>get_all</code>, a filtragem de <code>is_superuser=False</code> foi alterada para <code>exclude(is_superuser=True)</code>, que \u00e9 a forma apropriada de filtrar superusu\u00e1rios com o <code>PermissionsMixin</code>.</li> </ul> <pre><code>from typing import List, Optional\nfrom core.domain.data_access import UserRepository\nfrom core.domain.entities.user import User as DomainUser\nfrom core.models.user import User as DjangoUser\n\nclass DjangoUserRepository(UserRepository):\n    # ... (outros m\u00e9todos inalterados)\n\n    def create(self, user: DomainUser) -&gt; DomainUser:\n        django_user = DjangoUser.objects.create_user(\n            email=user.email,\n            first_name=user.first_name,\n            last_name=user.last_name,\n        ) # is_active, is_staff, is_superuser s\u00e3o tratados pelo UserManager\n        return self._to_domain_user(django_user)\n\n    def update(self, user: DomainUser) -&gt; DomainUser:\n        django_user = DjangoUser.objects.get(id=user.id)\n        django_user.email = user.email\n        django_user.first_name = user.first_name\n        django_user.last_name = user.last_name\n        # is_active, is_staff, is_superuser n\u00e3o s\u00e3o mais atributos diretos aqui\n        # As permiss\u00f5es s\u00e3o gerenciadas pelo PermissionsMixin\n        django_user.save()\n        return self._to_domain_user(django_user)\n\n    # ... (delete method inalterado)\n\n    def _to_domain_user(self, django_user: DjangoUser) -&gt; DomainUser:\n        return DomainUser(\n            id=str(django_user.id),\n            email=django_user.email,\n            first_name=django_user.first_name,\n            last_name=django_user.last_name,\n            is_active=django_user.is_active, # AbstractBaseUser tem is_active por padr\u00e3o\n            is_staff=django_user.is_staff, # PermissionsMixin tem is_staff\n            is_superuser=django_user.is_superuser, # PermissionsMixin tem is_superuser\n        )\n\n    def get_all(self) -&gt; List[DomainUser]:\n        # A propriedade is_superuser \u00e9 acessada diretamente via PermissionsMixin\n        django_users = DjangoUser.objects.exclude(is_superuser=True) # Excluir superusu\u00e1rios por padr\u00e3o\n        return [self._to_domain_user(user) for user in django_users]\n</code></pre>"},{"location":"architecture/lighter-user-model/#d-impacto-em-casos-de-uso-serializers-e-views","title":"d. Impacto em Casos de Uso, Serializers e Views","text":"<p>N\u00e3o houve impacto direto nas camadas de Aplica\u00e7\u00e3o (Casos de Uso) e Apresenta\u00e7\u00e3o (Serializers e Views), pois elas j\u00e1 interagem com a entidade de Dom\u00ednio <code>User</code> e seus DTOs, e n\u00e3o diretamente com o modelo Django. Isso demonstra o sucesso do desacoplamento da Arquitetura Limpa.</p>"},{"location":"architecture/lighter-user-model/#3-passos-da-implementacao-concluidos","title":"3. Passos da Implementa\u00e7\u00e3o (Conclu\u00eddos)","text":"<ol> <li>Modelo <code>User</code> do Django refatorado: <code>project/core/models/user.py</code> foi modificado para herdar de <code>AbstractBaseUser</code> e <code>PermissionsMixin</code>, removendo o campo <code>username</code> e ajustando os campos de identifica\u00e7\u00e3o.</li> <li>Reposit\u00f3rio de Usu\u00e1rio atualizado: <code>project/core/repositories/user_repository_impl.py</code> foi ajustado para lidar com as mudan\u00e7as no modelo Django, garantindo o mapeamento correto e a intera\u00e7\u00e3o com as propriedades de permiss\u00e3o.</li> <li>Verifica\u00e7\u00e3o de Serializers e Views: Confirmado que <code>project/core/api/v1/serializers/user.py</code> e <code>project/core/api/v1/views/user.py</code> n\u00e3o precisaram de altera\u00e7\u00f5es diretas, pois j\u00e1 estavam desacoplados do modelo Django.</li> </ol>"},{"location":"architecture/overview/","title":"Vis\u00e3o Geral da Arquitetura Limpa","text":"<p>A Arquitetura Limpa organiza o software em camadas conc\u00eantricas, onde as depend\u00eancias fluem apenas para dentro. As camadas internas (Dom\u00ednio e Aplica\u00e7\u00e3o) cont\u00eam a l\u00f3gica de neg\u00f3cio principal e s\u00e3o independentes de frameworks, bancos de dados ou interfaces de usu\u00e1rio. As camadas externas (Infraestrutura e Apresenta\u00e7\u00e3o) s\u00e3o respons\u00e1veis por detalhes de implementa\u00e7\u00e3o e dependem das camadas internas.</p> <pre><code>graph TD\n    A[Frameworks &amp; Drivers] --&gt; B(Interface Adapters)\n    B --&gt; C(Application Business Rules)\n    C --&gt; D(Enterprise Business Rules)\n\n    subgraph Layers\n        direction LR\n        D -- Core Domain --&gt; C\n        C -- Application Logic --&gt; B\n        B -- Presentation/Persistence --&gt; A\n    end\n</code></pre>"},{"location":"architecture/presentation-layer/","title":"Camada de Apresenta\u00e7\u00e3o (API Django REST Framework)","text":"<p>Esta camada \u00e9 respons\u00e1vel por apresentar os dados ao usu\u00e1rio e receber entradas. Ela atua como um adaptador, traduzindo as requisi\u00e7\u00f5es HTTP para os DTOs dos casos de uso e as respostas dos casos de uso para o formato JSON da API.</p> <ul> <li> <p><code>project/core/api/deps.py</code>: Criado um simples injetor de depend\u00eancias para fornecer as inst\u00e2ncias concretas dos reposit\u00f3rios e gateways aos casos de uso. Isso garante que as views e casos de uso n\u00e3o precisem saber sobre as implementa\u00e7\u00f5es concretas.</p> <ul> <li>Fun\u00e7\u00f5es como <code>get_user_repository()</code>, <code>get_create_user_use_case()</code>, <code>get_auth_gateway()</code>, <code>get_login_user_use_case()</code>, <code>get_change_user_password_use_case()</code>, <code>get_list_users_use_case()</code> e <code>get_get_user_by_id_use_case()</code> foram adicionadas.</li> </ul> </li> <li> <p><code>project/core/api/v1/serializers/user.py</code>: Os serializadores foram adaptados para trabalhar com os DTOs dos casos de uso em vez de diretamente com os modelos do Django. Novos serializadores incluem <code>UserReadSerializer</code>, <code>UserCreateRequestSerializer</code>, <code>LoginRequestSerializer</code>, <code>LoginResponseSerializer</code>, <code>UserAlterPasswordSerializer</code> e <code>UserListResponseSerializer</code>.</p> </li> <li> <p><code>project/core/api/v1/views/user.py</code>: As views foram modificadas para:</p> <ul> <li>Injetar os casos de uso relevantes usando as fun\u00e7\u00f5es do <code>deps.py</code>.</li> <li>Converter os dados da requisi\u00e7\u00e3o HTTP para os DTOs de entrada do caso de uso.</li> <li>Chamar o m\u00e9todo <code>execute</code> do caso de uso.</li> <li>Converter os DTOs de sa\u00edda do caso de uso para as respostas HTTP JSON.</li> <li><code>UserCreateAPIView</code>: Usa <code>CreateUserUseCase</code>.</li> <li><code>UserListAPIView</code>: Usa <code>ListUsersUseCase</code>.</li> <li><code>UserAlterPasswordAPIView</code>: Usa <code>ChangeUserPasswordUseCase</code>.</li> <li><code>UserRetrieveAPIView</code>: Usa <code>GetUserByIdUseCase</code>.</li> </ul> </li> <li><code>project/core/api/v1/views/auth.py</code>: Criada a <code>LoginAPIView</code> que utiliza o <code>LoginUserUseCase</code> para autentica\u00e7\u00e3o.</li> </ul>"},{"location":"architecture/project-analysis/","title":"\ud83d\udcca An\u00e1lise Completa do Projeto Django Base","text":""},{"location":"architecture/project-analysis/#visao-geral","title":"\ud83c\udfaf Vis\u00e3o Geral","text":"<p>Este documento fornece uma an\u00e1lise detalhada da arquitetura, estrutura e funcionalidades do django_base, facilitando a compreens\u00e3o para novos desenvolvedores sem necessidade de ler muito c\u00f3digo.</p>"},{"location":"architecture/project-analysis/#estrutura-do-projeto","title":"\ud83c\udfd7\ufe0f Estrutura do Projeto","text":"<pre><code>django_base/\n\u251c\u2500\u2500 \ud83d\udcc1 project/                 # Aplica\u00e7\u00e3o Django principal\n\u2502   \u251c\u2500\u2500 \ud83d\udcc1 core/                # App principal com arquitetura limpa\n\u2502   \u2502   \u251c\u2500\u2500 \ud83d\udcc1 domain/          # \ud83c\udfaf Regras de neg\u00f3cio (Entities, Value Objects)\n\u2502   \u2502   \u251c\u2500\u2500 \ud83d\udcc1 repositories/    # \ud83d\udd04 Abstra\u00e7\u00e3o de dados (Repository Pattern)\n\u2502   \u2502   \u251c\u2500\u2500 \ud83d\udcc1 api/             # \ud83c\udf10 Endpoints REST (Serializers, ViewSets)\n\u2502   \u2502   \u251c\u2500\u2500 \ud83d\udcc1 admin/           # \u2699\ufe0f Interface administrativa\n\u2502   \u2502   \u251c\u2500\u2500 \ud83d\udcc1 models/          # \ud83d\uddc4\ufe0f Modelos Django (Infrastructure)\n\u2502   \u2502   \u251c\u2500\u2500 \ud83d\udcc1 middleware/      # \ud83d\udd27 Middlewares customizados\n\u2502   \u2502   \u2514\u2500\u2500 \ud83d\udcc1 tests/           # \ud83e\uddea Testes automatizados\n\u2502   \u251c\u2500\u2500 \ud83d\udcc1 project/             # \u2699\ufe0f Configura\u00e7\u00f5es Django\n\u2502   \u2514\u2500\u2500 \ud83d\udcc4 manage.py            # \ud83d\ude80 Entry point Django\n\u251c\u2500\u2500 \ud83d\udcc1 docs/                    # \ud83d\udcda Documenta\u00e7\u00e3o MkDocs\n\u251c\u2500\u2500 \ud83d\udcc1 scripts/                 # \ud83d\udd27 Scripts de automa\u00e7\u00e3o\n\u251c\u2500\u2500 \ud83d\udcc4 Makefile                 # \ud83e\udd16 Automa\u00e7\u00e3o de tarefas\n\u251c\u2500\u2500 \ud83d\udcc4 Dockerfile               # \ud83d\udc33 Container de produ\u00e7\u00e3o\n\u251c\u2500\u2500 \ud83d\udcc4 docker-compose.yml       # \ud83d\udc33 Orquestra\u00e7\u00e3o de containers\n\u2514\u2500\u2500 \ud83d\udcc4 mkdocs.yml               # \ud83d\udcd6 Configura\u00e7\u00e3o da documenta\u00e7\u00e3o\n</code></pre>"},{"location":"architecture/project-analysis/#arquitetura-limpa-implementada","title":"\ud83c\udfaf Arquitetura Limpa Implementada","text":""},{"location":"architecture/project-analysis/#camadas-da-arquitetura","title":"Camadas da Arquitetura","text":""},{"location":"architecture/project-analysis/#1-domain-layer-coredomain","title":"1. \ud83c\udfaf Domain Layer (<code>core/domain/</code>)","text":"<p>Responsabilidade: Regras de neg\u00f3cio puras, independentes de frameworks</p> <pre><code># Exemplo: core/domain/entities/user.py\nclass User:\n    \"\"\"Entidade de usu\u00e1rio com regras de neg\u00f3cio\"\"\"\n    def __init__(self, email: str, name: str):\n        self.email = self._validate_email(email)\n        self.name = name\n\n    def _validate_email(self, email: str) -&gt; str:\n        # Valida\u00e7\u00e3o de neg\u00f3cio, n\u00e3o t\u00e9cnica\n        if '@' not in email:\n            raise ValueError(\"Email inv\u00e1lido\")\n        return email\n</code></pre> <p>Caracter\u00edsticas:</p> <ul> <li>\u2705 Sem depend\u00eancias externas</li> <li>\u2705 Regras de neg\u00f3cio puras</li> <li>\u2705 Facilmente test\u00e1vel</li> <li>\u2705 Reutiliz\u00e1vel em outros contextos</li> </ul>"},{"location":"architecture/project-analysis/#2-repository-layer-corerepositories","title":"2. \ud83d\udd04 Repository Layer (<code>core/repositories/</code>)","text":"<p>Responsabilidade: Abstra\u00e7\u00e3o de acesso a dados</p> <pre><code># Interface abstrata\nclass UserRepositoryInterface:\n    def save(self, user: User) -&gt; User:\n        pass\n\n    def find_by_email(self, email: str) -&gt; Optional[User]:\n        pass\n\n# Implementa\u00e7\u00e3o Django\nclass DjangoUserRepository(UserRepositoryInterface):\n    def save(self, user: User) -&gt; User:\n        # Implementa\u00e7\u00e3o espec\u00edfica do Django\n        pass\n</code></pre> <p>Vantagens:</p> <ul> <li>\ud83d\udd04 Troca f\u00e1cil de banco de dados</li> <li>\ud83e\uddea Testes isolados com mocks</li> <li>\ud83c\udfaf L\u00f3gica de neg\u00f3cio independente</li> </ul>"},{"location":"architecture/project-analysis/#3-api-layer-coreapi","title":"3. \ud83c\udf10 API Layer (<code>core/api/</code>)","text":"<p>Responsabilidade: Endpoints REST e serializa\u00e7\u00e3o</p> <pre><code># core/api/serializers/user_serializer.py\nclass UserSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = UserModel\n        fields = ['id', 'email', 'name', 'created_at']\n\n# core/api/viewsets/user_viewset.py\nclass UserViewSet(viewsets.ModelViewSet):\n    serializer_class = UserSerializer\n    permission_classes = [IsAuthenticated]\n</code></pre> <p>Funcionalidades:</p> <ul> <li>\ud83d\udcca Pagina\u00e7\u00e3o autom\u00e1tica</li> <li>\ud83d\udd0d Filtragem avan\u00e7ada</li> <li>\ud83d\udd10 Autentica\u00e7\u00e3o OAuth2</li> <li>\ud83d\udcdd Documenta\u00e7\u00e3o autom\u00e1tica</li> </ul>"},{"location":"architecture/project-analysis/#4-infrastructure-layer-coremodels-project","title":"4. \u2699\ufe0f Infrastructure Layer (<code>core/models/</code>, <code>project/</code>)","text":"<p>Responsabilidade: Implementa\u00e7\u00f5es t\u00e9cnicas e configura\u00e7\u00f5es</p>"},{"location":"architecture/project-analysis/#sistema-de-testes","title":"\ud83e\uddea Sistema de Testes","text":""},{"location":"architecture/project-analysis/#estrutura-de-testes","title":"Estrutura de Testes","text":"<pre><code>core/tests/\n\u251c\u2500\u2500 \ud83d\udcc1 unit/              # Testes unit\u00e1rios (domain, repositories)\n\u251c\u2500\u2500 \ud83d\udcc1 integration/       # Testes de integra\u00e7\u00e3o (API, database)\n\u251c\u2500\u2500 \ud83d\udcc1 fixtures/          # Dados de teste reutiliz\u00e1veis\n\u2514\u2500\u2500 \ud83d\udcc4 conftest.py        # Configura\u00e7\u00f5es pytest\n</code></pre>"},{"location":"architecture/project-analysis/#cobertura-de-testes","title":"Cobertura de Testes","text":"<ul> <li>48 testes implementados</li> <li>100% cobertura das funcionalidades principais</li> <li>Testes unit\u00e1rios para regras de neg\u00f3cio</li> <li>Testes de integra\u00e7\u00e3o para APIs</li> <li>Testes de performance para endpoints cr\u00edticos</li> </ul>"},{"location":"architecture/project-analysis/#exemplo-de-teste","title":"Exemplo de Teste","text":"<pre><code># tests/unit/test_user_domain.py\ndef test_user_creation_with_valid_data():\n    \"\"\"Testa cria\u00e7\u00e3o de usu\u00e1rio com dados v\u00e1lidos\"\"\"\n    user = User(email=\"test@example.com\", name=\"Test User\")\n    assert user.email == \"test@example.com\"\n    assert user.name == \"Test User\"\n\ndef test_user_creation_with_invalid_email():\n    \"\"\"Testa valida\u00e7\u00e3o de email inv\u00e1lido\"\"\"\n    with pytest.raises(ValueError, match=\"Email inv\u00e1lido\"):\n        User(email=\"invalid-email\", name=\"Test User\")\n</code></pre>"},{"location":"architecture/project-analysis/#sistema-de-autenticacao","title":"\ud83d\udd10 Sistema de Autentica\u00e7\u00e3o","text":""},{"location":"architecture/project-analysis/#oauth2-implementation","title":"OAuth2 Implementation","text":"<ul> <li>django-oauth-toolkit para OAuth2</li> <li>M\u00faltiplos grant types suportados</li> <li>Scopes customiz\u00e1veis para diferentes permiss\u00f5es</li> <li>Token refresh autom\u00e1tico</li> </ul>"},{"location":"architecture/project-analysis/#fluxo-de-autenticacao","title":"Fluxo de Autentica\u00e7\u00e3o","text":"<pre><code>graph LR\n    A[Cliente] --&gt; B[Authorization Server]\n    B --&gt; C[Resource Server]\n    C --&gt; D[Protected Resource]\n</code></pre>"},{"location":"architecture/project-analysis/#apis-rest","title":"\ud83d\udcca APIs REST","text":""},{"location":"architecture/project-analysis/#funcionalidades-implementadas","title":"Funcionalidades Implementadas","text":""},{"location":"architecture/project-analysis/#paginacao-inteligente","title":"Pagina\u00e7\u00e3o Inteligente","text":"<pre><code># Pagina\u00e7\u00e3o autom\u00e1tica em todos os endpoints\nGET /api/users/?page=1&amp;page_size=20\n</code></pre>"},{"location":"architecture/project-analysis/#filtragem-avancada","title":"Filtragem Avan\u00e7ada","text":"<pre><code># M\u00faltiplos filtros combinados\nGET /api/users/?name__icontains=john&amp;created_at__gte=2024-01-01\n</code></pre>"},{"location":"architecture/project-analysis/#ordenacao-flexivel","title":"Ordena\u00e7\u00e3o Flex\u00edvel","text":"<pre><code># Ordena\u00e7\u00e3o por m\u00faltiplos campos\nGET /api/users/?ordering=-created_at,name\n</code></pre>"},{"location":"architecture/project-analysis/#endpoints-disponiveis","title":"Endpoints Dispon\u00edveis","text":"Endpoint M\u00e9todo Descri\u00e7\u00e3o Autentica\u00e7\u00e3o <code>/api/users/</code> GET, POST Listar/Criar usu\u00e1rios OAuth2 <code>/api/users/{id}/</code> GET, PUT, DELETE Detalhes do usu\u00e1rio OAuth2 <code>/api/auth/token/</code> POST Obter token OAuth2 Client Credentials <code>/api/auth/refresh/</code> POST Renovar token Refresh Token"},{"location":"architecture/project-analysis/#containerizacao","title":"\ud83d\udc33 Containeriza\u00e7\u00e3o","text":""},{"location":"architecture/project-analysis/#docker-multi-stage","title":"Docker Multi-stage","text":"<pre><code># Dockerfile otimizado com multi-stage build\nFROM python:3.12-slim as base\n# ... configura\u00e7\u00f5es base\n\nFROM base as development\n# ... depend\u00eancias de desenvolvimento\n\nFROM base as production\n# ... otimiza\u00e7\u00f5es para produ\u00e7\u00e3o\n</code></pre>"},{"location":"architecture/project-analysis/#docker-compose","title":"Docker Compose","text":"<ul> <li>Desenvolvimento: <code>docker-compose.dev.yml</code></li> <li>Produ\u00e7\u00e3o: <code>docker-compose.prod.yml</code></li> <li>Servi\u00e7os: Django, PostgreSQL, Redis (cache)</li> </ul>"},{"location":"architecture/project-analysis/#automacao-com-makefile","title":"\ud83d\udd27 Automa\u00e7\u00e3o com Makefile","text":""},{"location":"architecture/project-analysis/#comandos-principais","title":"Comandos Principais","text":"<pre><code>make setup          # Configura\u00e7\u00e3o completa do ambiente\nmake test           # Executa todos os testes\nmake test-coverage  # Testes com relat\u00f3rio de cobertura\nmake lint           # An\u00e1lise de qualidade do c\u00f3digo\nmake format         # Formata\u00e7\u00e3o autom\u00e1tica\nmake docker-run     # Executa com Docker\nmake docs-serve     # Serve documenta\u00e7\u00e3o localmente\n</code></pre>"},{"location":"architecture/project-analysis/#automacoes-implementadas","title":"Automa\u00e7\u00f5es Implementadas","text":"<ul> <li>\ud83c\udfa8 Formata\u00e7\u00e3o autom\u00e1tica com Black</li> <li>\ud83d\udd0d Linting com Flake8</li> <li>\ud83d\udd12 Auditoria de seguran\u00e7a com pip-audit</li> <li>\ud83e\uddea Testes autom\u00e1ticos com pytest</li> <li>\ud83d\udcca Relat\u00f3rios de cobertura com coverage.py</li> </ul>"},{"location":"architecture/project-analysis/#sistema-de-documentacao","title":"\ud83d\udcda Sistema de Documenta\u00e7\u00e3o","text":""},{"location":"architecture/project-analysis/#mkdocs-configuration","title":"MkDocs Configuration","text":"<pre><code># mkdocs.yml\nsite_name: Django Base - Clean Architecture\ntheme:\n    name: material\n    features:\n        - navigation.tabs\n        - navigation.sections\n        - toc.integrate\n</code></pre>"},{"location":"architecture/project-analysis/#estrutura-da-documentacao","title":"Estrutura da Documenta\u00e7\u00e3o","text":"<ul> <li>\ud83c\udfd7\ufe0f Arquitetura: Explica\u00e7\u00e3o detalhada das camadas</li> <li>\ud83d\udee0\ufe0f Desenvolvimento: Guias pr\u00e1ticos</li> <li>\u2699\ufe0f Setup: Configura\u00e7\u00e3o para diferentes ambientes</li> <li>\ud83e\udd1d Contribui\u00e7\u00e3o: Como contribuir com o projeto</li> </ul>"},{"location":"architecture/project-analysis/#ambientes-suportados","title":"\ud83d\ude80 Ambientes Suportados","text":""},{"location":"architecture/project-analysis/#1-desenvolvimento-local","title":"1. Desenvolvimento Local","text":"<ul> <li>SQLite como banco padr\u00e3o</li> <li>Debug habilitado</li> <li>Hot reload autom\u00e1tico</li> <li>Logs detalhados</li> </ul>"},{"location":"architecture/project-analysis/#2-homologacaostaging","title":"2. Homologa\u00e7\u00e3o/Staging","text":"<ul> <li>PostgreSQL</li> <li>Configura\u00e7\u00f5es de teste</li> <li>Dados de exemplo</li> <li>Monitoramento b\u00e1sico</li> </ul>"},{"location":"architecture/project-analysis/#3-producao","title":"3. Produ\u00e7\u00e3o","text":"<ul> <li>PostgreSQL otimizado</li> <li>Redis para cache</li> <li>Logs estruturados</li> <li>Monitoramento completo</li> <li>SSL/HTTPS obrigat\u00f3rio</li> </ul>"},{"location":"architecture/project-analysis/#qualidade-de-codigo","title":"\ud83d\udd0d Qualidade de C\u00f3digo","text":""},{"location":"architecture/project-analysis/#metricas-implementadas","title":"M\u00e9tricas Implementadas","text":"<ul> <li>Cobertura de testes: 100% das funcionalidades principais</li> <li>Complexidade ciclom\u00e1tica: M\u00e1ximo 10 por fun\u00e7\u00e3o</li> <li>Linhas por arquivo: M\u00e1ximo 500 linhas</li> <li>Documenta\u00e7\u00e3o: Docstrings obrigat\u00f3rias</li> </ul>"},{"location":"architecture/project-analysis/#ferramentas-de-qualidade","title":"Ferramentas de Qualidade","text":"<ul> <li>Black: Formata\u00e7\u00e3o consistente</li> <li>Flake8: An\u00e1lise est\u00e1tica</li> <li>pytest: Framework de testes</li> <li>pip-audit: Auditoria de seguran\u00e7a</li> </ul>"},{"location":"architecture/project-analysis/#casos-de-uso-ideais","title":"\ud83c\udfaf Casos de Uso Ideais","text":""},{"location":"architecture/project-analysis/#1-apis-rest-profissionais","title":"1. APIs REST Profissionais","text":"<ul> <li>Autentica\u00e7\u00e3o robusta</li> <li>Pagina\u00e7\u00e3o e filtragem</li> <li>Documenta\u00e7\u00e3o autom\u00e1tica</li> <li>Testes abrangentes</li> </ul>"},{"location":"architecture/project-analysis/#2-sistemas-empresariais","title":"2. Sistemas Empresariais","text":"<ul> <li>Arquitetura escal\u00e1vel</li> <li>Separa\u00e7\u00e3o de responsabilidades</li> <li>Facilidade de manuten\u00e7\u00e3o</li> <li>Padr\u00f5es de qualidade</li> </ul>"},{"location":"architecture/project-analysis/#3-projetos-educacionais","title":"3. Projetos Educacionais","text":"<ul> <li>C\u00f3digo bem documentado</li> <li>Exemplos pr\u00e1ticos</li> <li>Boas pr\u00e1ticas implementadas</li> <li>F\u00e1cil compreens\u00e3o</li> </ul>"},{"location":"architecture/project-analysis/#proximos-passos","title":"\ud83d\ude80 Pr\u00f3ximos Passos","text":"<p>Para come\u00e7ar a usar este template:</p> <ol> <li>\ud83d\udcd6 Leia o Guia de In\u00edcio R\u00e1pido</li> <li>\ud83c\udfd7\ufe0f Entenda a Arquitetura Detalhada</li> <li>\ud83e\uddea Execute os Testes Automatizados</li> <li>\ud83d\ude80 Configure para Produ\u00e7\u00e3o</li> </ol> <p>\ud83d\udca1 Dica: Este projeto foi projetado para ser um template de aprendizado. Cada decis\u00e3o arquitetural foi documentada para facilitar o entendimento e a evolu\u00e7\u00e3o do c\u00f3digo.</p>"},{"location":"architecture/url-configuration/","title":"Configura\u00e7\u00e3o de URLs","text":"<p>Os padr\u00f5es de URL foram atualizados para refletir a nova estrutura da API.</p> <ul> <li><code>project/core/api/urls/base_urls.py</code>: Simplificado para apenas incluir o <code>v1_urls.py</code>, removendo as rotas diretas de usu\u00e1rio.</li> <li><code>project/core/api/urls/v1_urls.py</code>: Este arquivo agora centraliza todas as rotas da API vers\u00e3o 1, incluindo:<ul> <li><code>path(\"users/\", user.UserCreateAPIView.as_view(), name=\"create-user\")</code></li> <li><code>path(\"users/list/\", user.UserListAPIView.as_view(), name=\"user-list\")</code></li> <li><code>path(\"users/alter_password/&lt;uuid:pk&gt;/\", user.UserAlterPasswordAPIView.as_view(), name=\"user-alter-password\")</code></li> <li><code>path(\"users/&lt;uuid:pk&gt;/\", user.UserRetrieveAPIView.as_view(), name=\"retrieve-user\")</code></li> <li><code>path(\"login/\", auth.LoginAPIView.as_view(), name=\"login\")</code></li> </ul> </li> </ul>"},{"location":"development/api-reference/","title":"\ud83d\udcda API Reference - OpenAPI Schema","text":"<p>Esta p\u00e1gina cont\u00e9m a documenta\u00e7\u00e3o completa da API REST do Django Base, gerada automaticamente a partir do c\u00f3digo.</p>"},{"location":"development/api-reference/#acesso-a-documentacao-interativa","title":"\ud83d\udd17 Acesso \u00e0 Documenta\u00e7\u00e3o Interativa","text":""},{"location":"development/api-reference/#swagger-ui","title":"Swagger UI","text":"<p>Acesse a documenta\u00e7\u00e3o interativa da API atrav\u00e9s do Swagger UI:</p> <ul> <li>URL: <code>/api/docs/</code></li> <li>Descri\u00e7\u00e3o: Interface interativa para testar endpoints da API</li> </ul>"},{"location":"development/api-reference/#redoc","title":"ReDoc","text":"<p>Documenta\u00e7\u00e3o alternativa com visual limpo:</p> <ul> <li>URL: <code>/api/redoc/</code></li> <li>Descri\u00e7\u00e3o: Documenta\u00e7\u00e3o em formato ReDoc</li> </ul>"},{"location":"development/api-reference/#schema-openapi","title":"Schema OpenAPI","text":"<p>Schema JSON da API:</p> <ul> <li>URL: <code>/api/schema/</code></li> <li>Descri\u00e7\u00e3o: Schema OpenAPI 3.0 em formato JSON</li> </ul>"},{"location":"development/api-reference/#autenticacao","title":"\ud83d\udd10 Autentica\u00e7\u00e3o","text":"<p>A API utiliza OAuth2 para autentica\u00e7\u00e3o. Para acessar os endpoints protegidos:</p> <ol> <li> <p>Obter token de acesso:</p> <pre><code>curl -X POST http://localhost:8000/o/token/ \\\n  -H \"Content-Type: application/x-www-form-urlencoded\" \\\n  -d \"grant_type=password&amp;username=seu_email&amp;password=sua_senha&amp;client_id=seu_client_id&amp;client_secret=seu_client_secret\"\n</code></pre> </li> <li> <p>Usar token nas requisi\u00e7\u00f5es:</p> <pre><code>curl -H \"Authorization: Bearer SEU_TOKEN\" \\\n  http://localhost:8000/api/v1/users/\n</code></pre> </li> </ol>"},{"location":"development/api-reference/#endpoints-principais","title":"\ud83d\udccb Endpoints Principais","text":""},{"location":"development/api-reference/#usuarios","title":"Usu\u00e1rios","text":"<ul> <li><code>GET /api/v1/users/</code> - Listar usu\u00e1rios</li> <li><code>POST /api/v1/users/</code> - Criar usu\u00e1rio</li> <li><code>GET /api/v1/users/{id}/</code> - Obter usu\u00e1rio por ID</li> <li><code>PUT /api/v1/users/{id}/password/</code> - Alterar senha</li> </ul>"},{"location":"development/api-reference/#autenticacao_1","title":"Autentica\u00e7\u00e3o","text":"<ul> <li><code>POST /api/v1/auth/login/</code> - Login de usu\u00e1rio</li> </ul>"},{"location":"development/api-reference/#exemplos-de-uso","title":"\ud83c\udfaf Exemplos de Uso","text":""},{"location":"development/api-reference/#criar-usuario","title":"Criar Usu\u00e1rio","text":"<pre><code>curl -X POST http://localhost:8000/api/v1/users/ \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer SEU_TOKEN\" \\\n  -d '{\n    \"email\": \"usuario@exemplo.com\",\n    \"first_name\": \"Jo\u00e3o\",\n    \"last_name\": \"Silva\",\n    \"password\": \"senha123\"\n  }'\n</code></pre>"},{"location":"development/api-reference/#listar-usuarios-com-paginacao","title":"Listar Usu\u00e1rios com Pagina\u00e7\u00e3o","text":"<pre><code>curl -H \"Authorization: Bearer SEU_TOKEN\" \\\n  \"http://localhost:8000/api/v1/users/?limit=10&amp;offset=0&amp;search=jo\u00e3o\"\n</code></pre>"},{"location":"development/api-reference/#login","title":"Login","text":"<pre><code>curl -X POST http://localhost:8000/api/v1/auth/login/ \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"email\": \"usuario@exemplo.com\",\n    \"password\": \"senha123\"\n  }'\n</code></pre>"},{"location":"development/api-reference/#codigos-de-status","title":"\ud83d\udcca C\u00f3digos de Status","text":"<ul> <li><code>200</code> - Sucesso</li> <li><code>201</code> - Criado com sucesso</li> <li><code>400</code> - Dados inv\u00e1lidos</li> <li><code>401</code> - N\u00e3o autenticado</li> <li><code>403</code> - Sem permiss\u00e3o</li> <li><code>404</code> - Recurso n\u00e3o encontrado</li> <li><code>500</code> - Erro interno do servidor</li> </ul>"},{"location":"development/api-reference/#configuracao","title":"\ud83d\udd27 Configura\u00e7\u00e3o","text":"<p>A documenta\u00e7\u00e3o \u00e9 gerada automaticamente usando <code>drf-spectacular</code> e est\u00e1 configurada em <code>SPECTACULAR_SETTINGS</code> no arquivo <code>settings.py</code>.</p> <p>Para regenerar o schema:</p> <pre><code>python manage.py spectacular --file schema.yml\n</code></pre>"},{"location":"development/automated-testing/","title":"Adicionando Testes Automatizados","text":"<p>Esta se\u00e7\u00e3o detalha a estrat\u00e9gia e a implementa\u00e7\u00e3o de testes automatizados para o projeto, cobrindo testes unit\u00e1rios para as camadas de Dom\u00ednio e Aplica\u00e7\u00e3o, e testes de integra\u00e7\u00e3o para a camada de Apresenta\u00e7\u00e3o (API).</p>"},{"location":"development/automated-testing/#1-contexto-e-justificativa","title":"1. Contexto e Justificativa","text":"<p>Testes automatizados s\u00e3o fundamentais para garantir a qualidade, robustez e a manutenibilidade de qualquer projeto de software, especialmente em um contexto open source. Eles permitem verificar o comportamento do sistema, detectar regress\u00f5es precocemente e documentar a funcionalidade do c\u00f3digo. Com a Arquitetura Limpa, a testabilidade \u00e9 maximizada devido ao desacoplamento das camadas.</p>"},{"location":"development/automated-testing/#2-estrutura-de-testes","title":"2. Estrutura de Testes","text":"<p>Os testes ser\u00e3o organizados no diret\u00f3rio <code>project/core/tests/</code>, com subdiret\u00f3rios para categoriz\u00e1-los:</p> <ul> <li><code>project/core/tests/unit/</code>: Para testes unit\u00e1rios que focam em componentes isolados (entidades, casos de uso).</li> <li><code>project/core/tests/integration/</code>: Para testes de integra\u00e7\u00e3o que verificam a intera\u00e7\u00e3o entre componentes (API com casos de uso e reposit\u00f3rios).</li> </ul>"},{"location":"development/automated-testing/#3-ferramentas-de-teste","title":"3. Ferramentas de Teste","text":"<p>Utilizaremos as seguintes bibliotecas para os testes:</p> <ul> <li><code>pytest</code>: Um framework de teste robusto e flex\u00edvel para Python.</li> <li><code>pytest-django</code>: Plugin para <code>pytest</code> que facilita o teste de aplica\u00e7\u00f5es Django.</li> <li><code>pytest-mock</code>: Para criar mocks e simular depend\u00eancias em testes unit\u00e1rios.</li> <li><code>rest_framework.test.APITestCase</code>: Para simular requisi\u00e7\u00f5es HTTP e testar endpoints da API.</li> </ul>"},{"location":"development/automated-testing/#4-testes-unitarios-camadas-de-dominio-e-aplicacao","title":"4. Testes Unit\u00e1rios (Camadas de Dom\u00ednio e Aplica\u00e7\u00e3o)","text":"<p>Testes unit\u00e1rios focam na l\u00f3gica de neg\u00f3cio das camadas de Dom\u00ednio e Aplica\u00e7\u00e3o. Eles s\u00e3o r\u00e1pidos, isolados e n\u00e3o dependem de banco de dados ou frameworks externos.</p>"},{"location":"development/automated-testing/#a-entidades-de-dominio-projectcoredomainentitiesuserpy","title":"a. Entidades de Dom\u00ednio (<code>project/core/domain/entities/user.py</code>)","text":"<p>Nesta subse\u00e7\u00e3o, demonstramos como testar as entidades de dom\u00ednio de forma isolada, garantindo que sua l\u00f3gica interna funcione conforme o esperado. O exemplo abaixo mostra um teste b\u00e1sico para a cria\u00e7\u00e3o de um usu\u00e1rio e a propriedade <code>is_admin</code> da entidade <code>User</code>.</p> <pre><code># project/core/tests/unit/test_user_entity.py\nfrom core.domain.entities.user import User\n\ndef test_user_creation():\n    user = User(\n        email=\"test@example.com\",\n        first_name=\"John\",\n        last_name=\"Doe\",\n        is_active=True,\n        is_staff=False,\n        is_superuser=False,\n        id=\"123\",\n    )\n    assert user.id == \"123\"\n    assert user.email == \"test@example.com\"\n    assert user.first_name == \"John\"\n    assert user.is_admin is False\n\ndef test_user_is_admin_property():\n    admin_user = User(\n        email=\"admin@example.com\",\n        first_name=\"Admin\",\n        last_name=\"User\",\n        is_superuser=True,\n    )\n    assert admin_user.is_admin is True\n\n    regular_user = User(\n        email=\"regular@example.com\",\n        first_name=\"Regular\",\n        last_name=\"User\",\n        is_superuser=False,\n    )\n    assert regular_user.is_admin is False\n</code></pre>"},{"location":"development/automated-testing/#b-casos-de-uso-projectcoredomainuse_casesuser_use_casespy-projectcoredomainuse_casesgeneric_use_casespy","title":"b. Casos de Uso (<code>project/core/domain/use_cases/user_use_cases.py</code>, <code>project/core/domain/use_cases/generic_use_cases.py</code>)","text":"<p>Os testes de casos de uso focam em verificar a l\u00f3gica de neg\u00f3cio principal, utilizando mocks para simular o comportamento dos reposit\u00f3rios e gateways, garantindo que o caso de uso reaja corretamente \u00e0s entradas e interaja adequadamente com suas depend\u00eancias.</p>"},{"location":"development/automated-testing/#exemplo-createuserusecase","title":"Exemplo: <code>CreateUserUseCase</code>","text":"<pre><code># project/core/tests/unit/test_user_use_cases.py\nfrom unittest.mock import Mock\nimport pytest\nfrom core.domain.entities.user import User as DomainUser\nfrom core.domain.use_cases.user_use_cases import CreateUserRequest, CreateUserUseCase\n\n@pytest.fixture\ndef mock_user_repository():\n    return Mock()\n\ndef test_create_user_use_case_success(mock_user_repository):\n    user_id = \"123\"\n    email = \"test@example.com\"\n    first_name = \"Test\"\n    last_name = \"User\"\n    password = \"password123\"\n\n    mock_user_repository.create.return_value = DomainUser(\n        id=user_id, email=email, first_name=first_name, last_name=last_name\n    )\n\n    use_case = CreateUserUseCase(user_repository=mock_user_repository)\n    request = CreateUserRequest(\n        email=email, first_name=first_name, last_name=last_name, password=password\n    )\n\n    response = use_case.execute(request)\n\n    mock_user_repository.create.assert_called_once()\n    assert response.id == user_id\n    assert response.email == email\n    assert response.first_name == first_name\n    assert response.last_name == last_name\n</code></pre>"},{"location":"development/automated-testing/#exemplo-createentityusecase-generico","title":"Exemplo: <code>CreateEntityUseCase</code> (Gen\u00e9rico)","text":"<pre><code># project/core/tests/unit/test_generic_use_cases.py\nfrom unittest.mock import Mock\nimport pytest\nfrom core.domain.data_access import GenericRepository\nfrom core.domain.entities.user import User as DomainUser\nfrom core.domain.use_cases.generic_use_cases import CreateEntityUseCase, GenericCreateRequest\n\n@pytest.fixture\ndef mock_generic_repository():\n    return Mock(spec=GenericRepository)\n\n@pytest.fixture\ndef sample_user():\n    return DomainUser(\n        id=\"1\",\n        email=\"test@example.com\",\n        first_name=\"Test\",\n        last_name=\"User\",\n        is_active=True,\n        is_staff=False,\n        is_superuser=False,\n    )\n\ndef test_create_entity_use_case_success(mock_generic_repository, sample_user):\n    mock_generic_repository.create.return_value = sample_user\n    use_case = CreateEntityUseCase(repository=mock_generic_repository)\n    request = GenericCreateRequest(data=sample_user)\n\n    response = use_case.execute(request)\n\n    mock_generic_repository.create.assert_called_once_with(sample_user)\n    assert response.data == sample_user\n</code></pre>"},{"location":"development/automated-testing/#5-testes-de-integracao-camada-de-apresentacao-api","title":"5. Testes de Integra\u00e7\u00e3o (Camada de Apresenta\u00e7\u00e3o - API)","text":"<p>Testes de integra\u00e7\u00e3o verificam se as diferentes camadas do projeto (API, Casos de Uso, Reposit\u00f3rios, persist\u00eancia) funcionam bem em conjunto. Eles simulam requisi\u00e7\u00f5es HTTP para os endpoints da API.</p>"},{"location":"development/automated-testing/#a-autenticacao-e-usuarios-projectcoreapiv1viewsauthpy-projectcoreapiv1viewsuserpy","title":"a. Autentica\u00e7\u00e3o e Usu\u00e1rios (<code>project/core/api/v1/views/auth.py</code>, <code>project/core/api/v1/views/user.py</code>)","text":"<p>Os testes de integra\u00e7\u00e3o verificam a funcionalidade completa da API, incluindo a intera\u00e7\u00e3o com os casos de uso e as camadas de infraestrutura (como o banco de dados e o sistema de autentica\u00e7\u00e3o). Utilizamos <code>rest_framework.test.APITestCase</code> para simular requisi\u00e7\u00f5es HTTP e verificar as respostas.</p>"},{"location":"development/automated-testing/#exemplo-login-de-usuario-sucesso","title":"Exemplo: Login de Usu\u00e1rio (Sucesso)","text":"<pre><code># project/core/tests/integration/test_auth_api.py\nfrom django.contrib.auth import get_user_model\nfrom rest_framework import status\nfrom rest_framework.test import APITestCase\n\nUser = get_user_model()\n\nclass AuthAPITest(APITestCase):\n    def setUp(self):\n        self.email = \"test@example.com\"\n        self.password = \"testpassword123\"\n        User.objects.create_user(\n            email=self.email,\n            password=self.password,\n            first_name=\"Test\",\n            last_name=\"User\",\n        )\n        self.login_url = \"/api/v1/auth/login/\"\n\n    def test_login_success(self):\n        data = {\"email\": self.email, \"password\": self.password}\n        response = self.client.post(self.login_url, data, format=\"json\")\n\n        self.assertEqual(response.status_code, status.HTTP_200_OK)\n        self.assertIn(\"id\", response.data)\n        self.assertIn(\"access_token\", response.data)\n</code></pre>"},{"location":"development/automated-testing/#exemplo-listar-usuarios-como-admin","title":"Exemplo: Listar Usu\u00e1rios (como Admin)","text":"<pre><code># project/core/tests/integration/test_user_api.py\nfrom django.contrib.auth import get_user_model\nfrom rest_framework import status\nfrom rest_framework.test import APITestCase\n\nUser = get_user_model()\n\nclass UserAPITest(APITestCase):\n    def setUp(self):\n        self.admin_email = \"admin@example.com\"\n        self.admin_password = \"adminpassword123\"\n        self.admin_user = User.objects.create_superuser(\n            email=self.admin_email,\n            password=self.admin_password,\n            first_name=\"Admin\",\n            last_name=\"User\",\n        )\n        login_data = {\"email\": self.admin_email, \"password\": self.admin_password}\n        response = self.client.post(\"/api/v1/auth/login/\", login_data, format=\"json\")\n        self.admin_access_token = response.data[\"access_token\"]\n        self.user_list_url = \"/api/v1/users/\"\n\n    def get_auth_headers(self, token):\n        return {\"HTTP_AUTHORIZATION\": f\"Bearer {token}\"}\n\n    def test_list_users_as_admin_success(self):\n        headers = self.get_auth_headers(self.admin_access_token)\n        response = self.client.get(self.user_list_url, **headers, format=\"json\")\n\n        self.assertEqual(response.status_code, status.HTTP_200_OK)\n        self.assertIsInstance(response.data[\"items\"], list)\n        # ... outras asser\u00e7\u00f5es\n</code></pre>"},{"location":"development/automated-testing/#6-passos-da-implementacao","title":"6. Passos da Implementa\u00e7\u00e3o","text":"<p>A implementa\u00e7\u00e3o dos testes automatizados seguiu os seguintes passos:</p> <ol> <li>Cria\u00e7\u00e3o de Novo Arquivo de Documenta\u00e7\u00e3o: O arquivo <code>docs/development/automated-testing.md</code> foi criado para descrever a estrat\u00e9gia de testes.</li> <li>Atualiza\u00e7\u00e3o de <code>mkdocs.yml</code>: O novo arquivo de documenta\u00e7\u00e3o foi adicionado \u00e0 navega\u00e7\u00e3o do MkDocs.</li> <li>Instala\u00e7\u00e3o de Depend\u00eancias de Teste: <code>pytest</code> e <code>pytest-mock</code> foram adicionados ao <code>project/requirements.txt</code> e instalados. <code>pytest-django</code> j\u00e1 estava presente.</li> <li>Estrutura de Diret\u00f3rios de Testes: Os diret\u00f3rios <code>project/core/tests/unit/</code> e <code>project/core/tests/integration/</code> foram criados para organizar os testes.</li> <li>Configura\u00e7\u00e3o do <code>pytest.ini</code>: Um arquivo <code>pytest.ini</code> foi criado na raiz do projeto com configura\u00e7\u00f5es b\u00e1sicas para o <code>pytest</code> (ex: <code>DJANGO_SETTINGS_MODULE</code>, <code>python_files</code>, <code>addopts</code>).</li> <li>Implementa\u00e7\u00e3o de Testes Unit\u00e1rios (Dom\u00ednio): O arquivo <code>project/core/tests/unit/test_user_entity.py</code> foi criado com testes para a entidade <code>User</code>.</li> <li>Implementa\u00e7\u00e3o de Testes Unit\u00e1rios (Aplica\u00e7\u00e3o): Os arquivos <code>project/core/tests/unit/test_user_use_cases.py</code> e <code>project/core/tests/unit/test_generic_use_cases.py</code> foram criados com testes para os casos de uso de <code>User</code> e casos de uso gen\u00e9ricos, respectivamente, utilizando mocks.</li> <li>Implementa\u00e7\u00e3o de Testes de Integra\u00e7\u00e3o (API): Os arquivos <code>project/core/tests/integration/test_auth_api.py</code> e <code>project/core/tests/integration/test_user_api.py</code> foram criados com testes de integra\u00e7\u00e3o para os endpoints da API de autentica\u00e7\u00e3o e gerenciamento de usu\u00e1rios, incluindo a obten\u00e7\u00e3o e uso de tokens de acesso.</li> </ol> <p>Com esses testes implementados, o projeto possui uma base robusta para garantir a qualidade do c\u00f3digo e a funcionalidade da aplica\u00e7\u00e3o.</p>"},{"location":"development/domain-reference/","title":"\ud83c\udfd7\ufe0f Domain Layer Reference","text":"<p>Esta p\u00e1gina cont\u00e9m a documenta\u00e7\u00e3o autom\u00e1tica da camada de dom\u00ednio, incluindo entidades e contratos.</p>"},{"location":"development/domain-reference/#entidades","title":"\ud83d\udce6 Entidades","text":""},{"location":"development/domain-reference/#user-entity","title":"User Entity","text":"<p>::: core.domain.entities.user.User options: show_source: true show_root_heading: true</p>"},{"location":"development/domain-reference/#contratos-interfaces","title":"\ud83d\udd0c Contratos (Interfaces)","text":""},{"location":"development/domain-reference/#generic-repository","title":"Generic Repository","text":"<p>::: core.domain.data_access.GenericRepository options: show_source: true show_root_heading: true</p>"},{"location":"development/domain-reference/#user-repository","title":"User Repository","text":"<p>::: core.domain.data_access.UserRepository options: show_source: true show_root_heading: true</p>"},{"location":"development/domain-reference/#auth-gateway","title":"Auth Gateway","text":"<p>::: core.domain.gateways.AuthGateway options: show_source: true show_root_heading: true</p>"},{"location":"development/domain-reference/#notas-sobre-a-arquitetura","title":"\ud83d\udcdd Notas sobre a Arquitetura","text":"<p>A camada de dom\u00ednio \u00e9 o cora\u00e7\u00e3o da aplica\u00e7\u00e3o e cont\u00e9m:</p> <ul> <li>Entidades: Objetos de neg\u00f3cio puros (sem depend\u00eancias externas)</li> <li>Contratos: Interfaces que definem as opera\u00e7\u00f5es necess\u00e1rias</li> <li>Regras de Neg\u00f3cio: L\u00f3gica central da aplica\u00e7\u00e3o</li> </ul>"},{"location":"development/domain-reference/#principios-seguidos","title":"Princ\u00edpios Seguidos","text":"<ol> <li>Independ\u00eancia de Frameworks: N\u00e3o depende do Django</li> <li>Testabilidade: Pode ser testada sem banco de dados</li> <li>Reutiliza\u00e7\u00e3o: L\u00f3gica de neg\u00f3cio pode ser reutilizada</li> <li>Invers\u00e3o de Depend\u00eancia: Depende de abstra\u00e7\u00f5es, n\u00e3o implementa\u00e7\u00f5es</li> </ol>"},{"location":"development/frontend-integration/","title":"Guia de Integra\u00e7\u00e3o Frontend","text":"<p>Este guia detalha como um aplicativo frontend pode interagir com a API refatorada, focando nos endpoints de usu\u00e1rio e autentica\u00e7\u00e3o.</p>"},{"location":"development/frontend-integration/#formato-de-dados-dtos","title":"Formato de Dados (DTOs)","text":"<p>As requisi\u00e7\u00f5es e respostas da API seguem os DTOs definidos na camada de aplica\u00e7\u00e3o. \u00c9 crucial que o frontend envie e espere dados nesses formatos.</p>"},{"location":"development/frontend-integration/#exemplo-criacao-de-usuario","title":"Exemplo: Cria\u00e7\u00e3o de Usu\u00e1rio","text":"<p>Requisi\u00e7\u00e3o (Input):</p> <ul> <li>Endpoint: <code>POST /v1/users/</code></li> <li> <p>Body (JSON): Corresponde a <code>CreateUserRequest</code></p> <pre><code>{\n    \"email\": \"novo.usuario@example.com\",\n    \"first_name\": \"Novo\",\n    \"last_name\": \"Usuario\",\n    \"password\": \"senhaSegura123\",\n    \"is_active\": true,\n    \"is_staff\": false,\n    \"is_superuser\": false\n}\n</code></pre> </li> </ul> <p>Resposta (Output):</p> <ul> <li>Status: <code>201 Created</code> (sucesso), <code>400 Bad Request</code> (erro de valida\u00e7\u00e3o/dom\u00ednio)</li> <li> <p>Body (JSON): Corresponde a <code>CreateUserResponse</code> (e <code>UserReadSerializer</code>)</p> <pre><code>{\n    \"id\": \"&lt;uuid-do-usuario&gt;\",\n    \"email\": \"novo.usuario@example.com\",\n    \"first_name\": \"Novo\",\n    \"last_name\": \"Usuario\",\n    \"is_active\": true,\n    \"is_staff\": false,\n    \"is_superuser\": false\n}\n</code></pre> </li> </ul>"},{"location":"development/frontend-integration/#exemplo-login-de-usuario","title":"Exemplo: Login de Usu\u00e1rio","text":"<p>Requisi\u00e7\u00e3o (Input):</p> <ul> <li>Endpoint: <code>POST /v1/login/</code></li> <li> <p>Body (JSON): Corresponde a <code>LoginUserRequest</code></p> <pre><code>{\n    \"email\": \"usuario.existente@example.com\",\n    \"password\": \"senhaExistente123\"\n}\n</code></pre> </li> </ul> <p>Resposta (Output):</p> <ul> <li>Status: <code>200 OK</code> (sucesso), <code>400 Bad Request</code> (credenciais inv\u00e1lidas)</li> <li> <p>Body (JSON): Corresponde a <code>LoginUserResponse</code></p> <pre><code>{\n    \"id\": \"&lt;uuid-do-usuario&gt;\",\n    \"email\": \"usuario.existente@example.com\",\n    \"access_token\": \"&lt;token-de-acesso&gt;\",\n    \"refresh_token\": \"&lt;token-de-refresh&gt;\"\n}\n</code></pre> </li> </ul>"},{"location":"development/frontend-integration/#autenticacao-no-frontend","title":"Autentica\u00e7\u00e3o no Frontend","text":"<p>Ap\u00f3s o login, o frontend receber\u00e1 <code>access_token</code> e <code>refresh_token</code>. O <code>access_token</code> deve ser inclu\u00eddo em todas as requisi\u00e7\u00f5es subsequentes a endpoints protegidos (que exigem autentica\u00e7\u00e3o, como listar usu\u00e1rios ou alterar senha) no cabe\u00e7alho <code>Authorization</code> como um <code>Bearer Token</code>.</p> <p>Exemplo de cabe\u00e7alho em uma requisi\u00e7\u00e3o fetch/axios:</p> <pre><code>headers: {\n  'Content-Type': 'application/json',\n  'Authorization': `Bearer ${accessToken}`\n}\n</code></pre>"},{"location":"development/frontend-integration/#exemplo-listar-usuarios","title":"Exemplo: Listar Usu\u00e1rios","text":"<p>Requisi\u00e7\u00e3o (Input):</p> <ul> <li>Endpoint: <code>GET /v1/users/list/</code></li> <li>Cabe\u00e7alhos: Necessita <code>Authorization: Bearer &lt;access_token&gt;</code> de um usu\u00e1rio com permiss\u00e3o (<code>IsAdminUser</code>).</li> <li>Body: N\u00e3o aplic\u00e1vel</li> </ul> <p>Resposta (Output):</p> <ul> <li>Status: <code>200 OK</code> (sucesso), <code>401 Unauthorized</code> (sem token), <code>403 Forbidden</code> (sem permiss\u00e3o)</li> <li> <p>Body (JSON): Corresponde a <code>ListUsersResponse</code></p> <pre><code>{\n    \"users\": [\n        {\n            \"id\": \"&lt;uuid-do-usuario-1&gt;\",\n            \"email\": \"user1@example.com\",\n            \"first_name\": \"User\",\n            \"last_name\": \"One\",\n            \"is_active\": true,\n            \"is_staff\": false,\n            \"is_superuser\": false\n        },\n        {\n            \"id\": \"&lt;uuid-do-usuario-2&gt;\",\n            \"email\": \"user2@example.com\",\n            \"first_name\": \"User\",\n            \"last_name\": \"Two\",\n            \"is_active\": true,\n            \"is_staff\": false,\n            \"is_superuser\": false\n        }\n    ]\n}\n</code></pre> </li> </ul>"},{"location":"development/frontend-integration/#exemplo-obter-detalhes-de-um-usuario-por-id","title":"Exemplo: Obter Detalhes de um Usu\u00e1rio por ID","text":"<p>Requisi\u00e7\u00e3o (Input):</p> <ul> <li>Endpoint: <code>GET /v1/users/:id/</code></li> <li>Cabe\u00e7alhos: Necessita <code>Authorization: Bearer &lt;access_token&gt;</code> de um usu\u00e1rio com permiss\u00e3o (<code>IsAdminUser</code>).</li> <li>Par\u00e2metros de URL: <code>:id</code> \u00e9 o ID do usu\u00e1rio (UUID).</li> <li>Body: N\u00e3o aplic\u00e1vel</li> </ul> <p>Resposta (Output):</p> <ul> <li>Status: <code>200 OK</code> (sucesso), <code>401 Unauthorized</code>, <code>403 Forbidden</code>, <code>404 Not Found</code></li> <li> <p>Body (JSON): Corresponde a <code>CreateUserResponse</code> (e <code>UserReadSerializer</code>)</p> <pre><code>{\n    \"id\": \"&lt;uuid-do-usuario&gt;\",\n    \"email\": \"usuario.solicitado@example.com\",\n    \"first_name\": \"Nome\",\n    \"last_name\": \"Sobrenome\",\n    \"is_active\": true,\n    \"is_staff\": false,\n    \"is_superuser\": false\n}\n</code></pre> </li> </ul>"},{"location":"development/frontend-integration/#exemplo-alterar-senha-de-usuario","title":"Exemplo: Alterar Senha de Usu\u00e1rio","text":"<p>Requisi\u00e7\u00e3o (Input):</p> <ul> <li>Endpoint: <code>PUT /v1/users/alter_password/:id/</code></li> <li>Cabe\u00e7alhos: Necessita <code>Authorization: Bearer &lt;access_token&gt;</code> de um usu\u00e1rio com permiss\u00e3o (<code>IsAdminUser</code>).</li> <li>Par\u00e2metros de URL: <code>:id</code> \u00e9 o ID do usu\u00e1rio (UUID).</li> <li> <p>Body (JSON): Corresponde a <code>ChangeUserPasswordRequest</code></p> <pre><code>{\n    \"old_password\": \"senhaAntiga123\",\n    \"new_password\": \"senhaNovaSegura123\"\n}\n</code></pre> </li> </ul> <p>Resposta (Output):</p> <ul> <li>Status: <code>200 OK</code> (sucesso), <code>400 Bad Request</code> (senha antiga incorreta), <code>401 Unauthorized</code>, <code>403 Forbidden</code>, <code>404 Not Found</code></li> <li> <p>Body (JSON): Corresponde a <code>ChangeUserPasswordResponse</code></p> <pre><code>{\n    \"success\": true\n}\n</code></pre> </li> </ul>"},{"location":"development/generic-crud-use-cases/","title":"Casos de Uso CRUD Gen\u00e9ricos","text":"<p>Para promover a reutiliza\u00e7\u00e3o de c\u00f3digo e manter a consist\u00eancia em opera\u00e7\u00f5es b\u00e1sicas de cria\u00e7\u00e3o, leitura, atualiza\u00e7\u00e3o e exclus\u00e3o (CRUD) para diferentes entidades, foram implementados casos de uso gen\u00e9ricos na camada de aplica\u00e7\u00e3o.</p> <p>Esta se\u00e7\u00e3o detalha a estrutura e o uso desses casos de uso gen\u00e9ricos.</p>"},{"location":"development/generic-crud-use-cases/#visao-geral","title":"Vis\u00e3o Geral","text":"<p>Os casos de uso gen\u00e9ricos permitem realizar opera\u00e7\u00f5es CRUD sem precisar reescrever a l\u00f3gica b\u00e1sica para cada nova entidade. Eles operam em cima de interfaces de reposit\u00f3rio gen\u00e9ricas e DTOs gen\u00e9ricos.</p>"},{"location":"development/generic-crud-use-cases/#componentes-chave","title":"Componentes Chave","text":""},{"location":"development/generic-crud-use-cases/#1-dtos-genericos-projectcoredomainuse_casesgeneric_use_casespy","title":"1. DTOs Gen\u00e9ricos (<code>project/core/domain/use_cases/generic_use_cases.py</code>)","text":"<p>Os DTOs gen\u00e9ricos s\u00e3o classes de dados (<code>@dataclass</code>) usadas para padronizar a entrada e sa\u00edda dos casos de uso CRUD, garantindo que a comunica\u00e7\u00e3o entre as camadas seja desacoplada do framework.</p> <ul> <li><code>GenericCreateRequest[T]</code>: Usado para requisi\u00e7\u00f5es de cria\u00e7\u00e3o, encapsulando a entidade a ser criada.</li> <li><code>GenericReadResponse[T]</code>: Usado para respostas de leitura, contendo a entidade lida.</li> <li><code>GenericListRequest</code>: Um DTO simples para requisi\u00e7\u00f5es de listagem (pode ser estendido para incluir filtros e pagina\u00e7\u00e3o).</li> <li><code>GenericListResponse[T]</code>: Usado para respostas de listagem, contendo uma lista de entidades.</li> <li><code>GenericUpdateRequest[T]</code>: Usado para requisi\u00e7\u00f5es de atualiza\u00e7\u00e3o, incluindo o ID e os dados da entidade a ser atualizada.</li> <li><code>GenericDeleteRequest</code>: Usado para requisi\u00e7\u00f5es de exclus\u00e3o, contendo o ID da entidade.</li> <li><code>GenericSuccessResponse</code>: Uma resposta simples para indicar o sucesso de uma opera\u00e7\u00e3o (ex: exclus\u00e3o).</li> </ul> <pre><code># ... (imports)\n\nT = TypeVar('T') # Representa a entidade de dom\u00ednio\n\n@dataclass\nclass GenericCreateRequest(Generic[T]):\n    data: T\n\n@dataclass\nclass GenericReadResponse(Generic[T]):\n    data: T\n\n# ... (outros DTOs gen\u00e9ricos)\n\nclass UseCase(Generic[T]):\n    pass\n</code></pre>"},{"location":"development/generic-crud-use-cases/#2-interface-genericrepositoryt-projectcoredomaindata_accesspy","title":"2. Interface <code>GenericRepository[T]</code> (<code>project/core/domain/data_access.py</code>)","text":"<p>A interface <code>GenericRepository[T]</code> define o contrato para opera\u00e7\u00f5es CRUD b\u00e1sicas que qualquer reposit\u00f3rio de entidade deve implementar. <code>T</code> \u00e9 um <code>TypeVar</code> que representa o tipo da entidade de dom\u00ednio.</p> <pre><code># ... (imports)\n\nT = TypeVar('T')\n\nclass GenericRepository(ABC, Generic[T]):\n    @abstractmethod\n    def get_by_id(self, entity_id: str) -&gt; Optional[T]:\n        pass\n\n    @abstractmethod\n    def get_all(self) -&gt; List[T]:\n        pass\n\n    @abstractmethod\n    def create(self, entity: T) -&gt; T:\n        pass\n\n    @abstractmethod\n    def update(self, entity: T) -&gt; T:\n        pass\n\n    @abstractmethod\n    def delete(self, entity_id: str) -&gt; None:\n        pass\n</code></pre>"},{"location":"development/generic-crud-use-cases/#3-casos-de-uso-genericos-projectcoredomainuse_casesgeneric_use_casespy","title":"3. Casos de Uso Gen\u00e9ricos (<code>project/core/domain/use_cases/generic_use_cases.py</code>)","text":"<p>Esses casos de uso implementam a l\u00f3gica b\u00e1sica para cada opera\u00e7\u00e3o CRUD, dependendo da <code>GenericRepository</code> para a persist\u00eancia.</p> <ul> <li> <p><code>CreateEntityUseCase[T]</code>: Recebe uma <code>GenericCreateRequest</code> e usa <code>repository.create()</code>.</p> <pre><code>class CreateEntityUseCase(UseCase[T]):\n    def __init__(self, repository: GenericRepository[T]):\n        self.repository = repository\n\n    def execute(self, request: GenericCreateRequest[T]) -&gt; GenericReadResponse[T]:\n        created_entity = self.repository.create(request.data)\n        return GenericReadResponse(data=created_entity)\n</code></pre> </li> <li> <p><code>ListEntitiesUseCase[T]</code>: Recebe uma <code>GenericListRequest</code> e usa <code>repository.get_all()</code>.</p> <pre><code>class ListEntitiesUseCase(UseCase[T]):\n    def __init__(self, repository: GenericRepository[T]):\n        self.repository = repository\n\n    def execute(self, request: GenericListRequest) -&gt; GenericListResponse[T]:\n        entities = self.repository.get_all()\n        return GenericListResponse(items=entities)\n</code></pre> </li> <li> <p><code>GetEntityByIdUseCase[T]</code>: Recebe uma <code>GenericDeleteRequest</code> (que cont\u00e9m o ID) e usa <code>repository.get_by_id()</code>.</p> <pre><code>class GetEntityByIdUseCase(UseCase[T]):\n    def __init__(self, repository: GenericRepository[T]):\n        self.repository = repository\n\n    def execute(self, request: GenericDeleteRequest) -&gt; GenericReadResponse[T]:\n        entity = self.repository.get_by_id(request.id)\n        if not entity:\n            raise ValueError(\"Entity not found\")\n        return GenericReadResponse(data=entity)\n</code></pre> </li> <li> <p><code>UpdateEntityUseCase[T]</code>: Recebe uma <code>GenericUpdateRequest</code> e usa <code>repository.update()</code>.</p> <pre><code>class UpdateEntityUseCase(UseCase[T]):\n    def __init__(self, repository: GenericRepository[T]):\n        self.repository = repository\n\n    def execute(self, request: GenericUpdateRequest[T]) -&gt; GenericReadResponse[T]:\n        existing_entity = self.repository.get_by_id(request.id)\n        if not existing_entity:\n            raise ValueError(\"Entity not found\")\n\n        updated_entity = request.data\n        updated_entity.id = request.id\n        saved_entity = self.repository.update(updated_entity)\n        return GenericReadResponse(data=saved_entity)\n</code></pre> </li> <li> <p><code>DeleteEntityUseCase[T]</code>: Recebe uma <code>GenericDeleteRequest</code> e usa <code>repository.delete()</code>.</p> <pre><code>class DeleteEntityUseCase(UseCase[T]):\n    def __init__(self, repository: GenericRepository[T]):\n        self.repository = repository\n\n    def execute(self, request: GenericDeleteRequest) -&gt; GenericSuccessResponse:\n        self.repository.delete(request.id)\n        return GenericSuccessResponse(success=True)\n</code></pre> </li> </ul>"},{"location":"development/generic-crud-use-cases/#adaptacao-de-casos-de-uso-existentes-ex-usuario","title":"Adapta\u00e7\u00e3o de Casos de Uso Existentes (Ex: Usu\u00e1rio)","text":"<p>Os casos de uso espec\u00edficos de <code>User</code> foram refatorados para utilizar os casos de uso gen\u00e9ricos, promovendo a reutiliza\u00e7\u00e3o de c\u00f3digo e mantendo a l\u00f3gica de neg\u00f3cio espec\u00edfica do usu\u00e1rio onde \u00e9 necess\u00e1rio.</p> <ul> <li> <p><code>UserRepository</code> (<code>project/core/domain/data_access.py</code>): Foi modificado para estender <code>GenericRepository[User]</code>, implementando seus m\u00e9todos (<code>get_by_id</code>, <code>get_all</code>, <code>create</code>, <code>update</code>, <code>delete</code>) e mantendo <code>get_user_by_email</code> como um m\u00e9todo espec\u00edfico de <code>User</code>.</p> </li> <li> <p><code>DjangoUserRepository</code> (<code>project/core/repositories/user_repository_impl.py</code>): A implementa\u00e7\u00e3o concreta do reposit\u00f3rio de usu\u00e1rio foi atualizada para implementar os m\u00e9todos da <code>GenericRepository</code>.</p> </li> <li> <p><code>CreateUserUseCase</code> (<code>project/core/domain/use_cases/user_use_cases.py</code>): Agora utiliza uma inst\u00e2ncia de <code>CreateEntityUseCase[DomainUser]</code> internamente para a l\u00f3gica de cria\u00e7\u00e3o base.</p> <pre><code>class CreateUserUseCase:\n    def __init__(self, user_repository: UserRepository):\n        self.user_repository = user_repository\n        self.generic_create_use_case = CreateEntityUseCase[DomainUser](repository=user_repository)\n\n    def execute(self, request: CreateUserRequest) -&gt; CreateUserResponse:\n        user_domain_to_create = DomainUser(\n            # ... atributos do usu\u00e1rio\n        )\n        generic_request = GenericCreateRequest(data=user_domain_to_create)\n        created_user_response = self.generic_create_use_case.execute(generic_request)\n        created_user = created_user_response.data\n        # ... l\u00f3gica espec\u00edfica para senha\n        return CreateUserResponse(\n            # ... resposta\n        )\n</code></pre> </li> <li> <p><code>ListUsersUseCase</code> (<code>project/core/domain/use_cases/user_use_cases.py</code>): Agora utiliza uma inst\u00e2ncia de <code>ListEntitiesUseCase[DomainUser]</code>.</p> <pre><code>class ListUsersUseCase:\n    def __init__(self, user_repository: UserRepository):\n        self.user_repository = user_repository\n        self.generic_list_use_case = ListEntitiesUseCase[DomainUser](repository=user_repository)\n\n    def execute(self, request: ListUsersRequest) -&gt; ListUsersResponse:\n        generic_request = GenericListRequest()\n        list_entities_response = self.generic_list_use_case.execute(generic_request)\n        users_domain = list_entities_response.items\n        # ... mapeamento para CreateUserResponse\n        return ListUsersResponse(users=users_response)\n</code></pre> </li> <li> <p><code>GetUserByIdUseCase</code> (<code>project/core/domain/use_cases/user_use_cases.py</code>): Agora utiliza uma inst\u00e2ncia de <code>GetEntityByIdUseCase[DomainUser]</code>.</p> <pre><code>class GetUserByIdUseCase:\n    def __init__(self, user_repository: UserRepository):\n        self.user_repository = user_repository\n        self.generic_get_by_id_use_case = GetEntityByIdUseCase[DomainUser](repository=user_repository)\n\n    def execute(self, request: GetUserByIdRequest) -&gt; CreateUserResponse:\n        generic_request = GenericDeleteRequest(id=request.user_id)\n        get_entity_response = self.generic_get_by_id_use_case.execute(generic_request)\n        user = get_entity_response.data\n        # ... mapeamento para CreateUserResponse\n        return CreateUserResponse(\n            # ... resposta\n        )\n</code></pre> </li> <li> <p><code>ChangeUserPasswordUseCase</code> (<code>project/core/domain/use_cases/user_use_cases.py</code>): Foi atualizado para usar <code>user_repository.get_by_id()</code> em vez de <code>get_user_by_id()</code>.</p> </li> </ul> <p>Com essa estrutura, a cria\u00e7\u00e3o de novas entidades e suas opera\u00e7\u00f5es CRUD b\u00e1sicas se torna muito mais r\u00e1pida e padronizada, exigindo apenas a defini\u00e7\u00e3o da entidade de dom\u00ednio, a implementa\u00e7\u00e3o do reposit\u00f3rio e a configura\u00e7\u00e3o dos serializadores e views.</p>"},{"location":"development/logging-error-handling/","title":"Configura\u00e7\u00e3o de Logs e Tratamento Global de Exce\u00e7\u00f5es","text":"<p>Esta se\u00e7\u00e3o detalha a implementa\u00e7\u00e3o de uma estrat\u00e9gia robusta de logs e um tratamento global de exce\u00e7\u00f5es para a API. Essas funcionalidades s\u00e3o cruciais para a observabilidade, depura\u00e7\u00e3o e estabilidade do projeto em produ\u00e7\u00e3o.</p>"},{"location":"development/logging-error-handling/#1-contexto-e-justificativa","title":"1. Contexto e Justificativa","text":"<p>Uma boa estrat\u00e9gia de logging permite monitorar o comportamento da aplica\u00e7\u00e3o, identificar problemas e diagnosticar erros em tempo real. O tratamento global de exce\u00e7\u00f5es garante que erros inesperados sejam capturados, registrados e apresentados ao cliente de forma consistente e segura, sem expor detalhes internos sens\u00edveis.</p>"},{"location":"development/logging-error-handling/#2-visao-geral-da-implementacao","title":"2. Vis\u00e3o Geral da Implementa\u00e7\u00e3o","text":"<p>A implementa\u00e7\u00e3o envolver\u00e1 as seguintes altera\u00e7\u00f5es:</p> <ul> <li>Configura\u00e7\u00e3o de Logs: Definir uma configura\u00e7\u00e3o avan\u00e7ada de logging no <code>settings.py</code> do Django, com diferentes n\u00edveis, handlers (console, arquivo) e formatadores.</li> <li>Middleware de Tratamento de Exce\u00e7\u00f5es: Criar um middleware personalizado para capturar e registrar exce\u00e7\u00f5es n\u00e3o tratadas na camada de apresenta\u00e7\u00e3o (API), retornando respostas de erro padronizadas.</li> <li>Integra\u00e7\u00e3o do Middleware: Adicionar o novo middleware \u00e0 configura\u00e7\u00e3o do Django.</li> <li>Uso de Logs: Exemplos de como utilizar o logger em diferentes camadas para registrar eventos e erros espec\u00edficos.</li> <li>Testes de Integra\u00e7\u00e3o: Adicionar testes para validar o comportamento do tratamento global de exce\u00e7\u00f5es na API.</li> </ul>"},{"location":"development/logging-error-handling/#3-configuracao-de-logs-projectprojectsettingspy","title":"3. Configura\u00e7\u00e3o de Logs (<code>project/project/settings.py</code>)","text":"<p>Configuramos o sistema de logging do Django para incluir m\u00faltiplos handlers (console, arquivo, arquivo de erros), formatadores detalhados e loggers espec\u00edficos para as aplica\u00e7\u00f5es <code>django</code>, <code>core</code> e <code>project</code>. Isso permite um controle granular sobre como e onde as mensagens de log s\u00e3o registradas.</p> <pre><code># project/project/settings.py\nimport os\nfrom pathlib import Path\n# ... outras configura\u00e7\u00f5es ...\n\nBASE_DIR = Path(__file__).resolve().parent.parent\n\nLOGS_DIR = BASE_DIR / \"logs\"\nLOGS_DIR.mkdir(parents=True, exist_ok=True)\n\nLOGGING = {\n    \"version\": 1,\n    \"disable_existing_loggers\": False,\n    \"formatters\": {\n        \"verbose\": {\n            \"format\": \"{levelname} {asctime} {module} {process:d} {thread:d} {message}\",\n            \"style\": \"{\",\n        },\n        \"simple\": {\n            \"format\": \"{levelname} {message}\",\n            \"style\": \"{\",\n        },\n    },\n    \"handlers\": {\n        \"console\": {\n            \"level\": \"INFO\",\n            \"class\": \"logging.StreamHandler\",\n            \"formatter\": \"simple\",\n        },\n        \"file\": {\n            \"level\": \"INFO\",\n            \"class\": \"logging.handlers.RotatingFileHandler\",\n            \"filename\": LOGS_DIR / \"app.log\",\n            \"maxBytes\": 1024 * 1024 * 5,  # 5 MB\n            \"backupCount\": 5,\n            \"formatter\": \"verbose\",\n        },\n        \"error_file\": {\n            \"level\": \"ERROR\",\n            \"class\": \"logging.handlers.RotatingFileHandler\",\n            \"filename\": LOGS_DIR / \"error.log\",\n            \"maxBytes\": 1024 * 1024 * 5,  # 5 MB\n            \"backupCount\": 5,\n            \"formatter\": \"verbose\",\n        },\n    },\n    \"loggers\": {\n        \"django\": {\n            \"handlers\": [\"console\", \"file\", \"error_file\"],\n            \"level\": \"INFO\",\n            \"propagate\": False,\n        },\n        \"core\": {\n            \"handlers\": [\"console\", \"file\", \"error_file\"],\n            \"level\": \"INFO\",\n            \"propagate\": False,\n        },\n        \"project\": {\n            \"handlers\": [\"console\", \"file\", \"error_file\"],\n            \"level\": \"INFO\",\n            \"propagate\": False,\n        },\n    },\n    \"root\": {\n        \"handlers\": [\"console\", \"file\", \"error_file\"],\n        \"level\": \"INFO\",\n    },\n}\n</code></pre>"},{"location":"development/logging-error-handling/#4-criacao-de-middleware-de-tratamento-de-excecoes-projectcoremiddlewarepy","title":"4. Cria\u00e7\u00e3o de Middleware de Tratamento de Exce\u00e7\u00f5es (<code>project/core/middleware.py</code>)","text":""},{"location":"development/logging-error-handling/#a-custom_exception_middlewarepy-novo-arquivo","title":"a. <code>custom_exception_middleware.py</code> (Novo arquivo)","text":"<p>Criamos um handler de exce\u00e7\u00f5es customizado que se integra ao Django REST Framework. Ele captura exce\u00e7\u00f5es, registra-as usando o sistema de logging, e retorna uma resposta padronizada ao cliente, incluindo detalhes do traceback em ambiente de <code>DEBUG</code>.</p> <pre><code># project/core/middleware/custom_exception_middleware.py\nimport logging\nimport traceback\n\nfrom django.conf import settings\nfrom rest_framework import status\nfrom rest_framework.response import Response\nfrom rest_framework.views import exception_handler\n\nlogger = logging.getLogger(__name__)\n\ndef custom_exception_handler(exc, context):\n    response = exception_handler(exc, context)\n\n    if response is not None:\n        if not response.data.get(\"status_code\"):\n            response.data[\"status_code\"] = response.status_code\n\n        if isinstance(exc, ValueError):\n            response.data[\"detail\"] = str(exc)\n            response.status_code = status.HTTP_400_BAD_REQUEST\n\n        if settings.DEBUG:\n            response.data[\"traceback\"] = traceback.format_exc()\n\n        if response.status_code &gt;= 500:\n            logger.exception(\"Erro de servidor interno: %s\", exc)\n        elif response.status_code &gt;= 400:\n            logger.warning(\"Erro de cliente: %s\", exc)\n\n    else:\n        logger.exception(\"Erro inesperado: %s\", exc)\n        response = Response(\n            {\"detail\": \"Ocorreu um erro inesperado.\", \"status_code\": 500},\n            status=status.HTTP_500_INTERNAL_SERVER_ERROR,\n        )\n        if settings.DEBUG:\n            response.data[\"traceback\"] = traceback.format_exc()\n\n    return response\n</code></pre>"},{"location":"development/logging-error-handling/#5-integracao-do-middleware-projectprojectsettingspy","title":"5. Integra\u00e7\u00e3o do Middleware (<code>project/project/settings.py</code>)","text":"<p>Para ativar o middleware e o handler de exce\u00e7\u00f5es customizado, fizemos as seguintes altera\u00e7\u00f5es no <code>settings.py</code>:</p> <ul> <li>Adicionamos o <code>CustomExceptionMiddleware</code> \u00e0 lista <code>MIDDLEWARE</code>.</li> <li>Configuramos o <code>REST_FRAMEWORK</code> para usar o <code>custom_exception_handler</code>.</li> </ul> <pre><code># project/project/settings.py\n# ... outras configura\u00e7\u00f5es ...\n\nMIDDLEWARE = [\n    \"django.middleware.security.SecurityMiddleware\",\n    \"django.contrib.sessions.middleware.SessionMiddleware\",\n    \"django.middleware.common.CommonMiddleware\",\n    \"django.middleware.csrf.CsrfViewMiddleware\",\n    \"django.contrib.auth.middleware.AuthenticationMiddleware\",\n    \"django.contrib.messages.middleware.MessageMiddleware\",\n    \"django.middleware.clickjacking.XFrameOptionsMiddleware\",\n    \"core.middleware.custom_exception_middleware.CustomExceptionMiddleware\", # Adicionado middleware de exce\u00e7\u00e3o customizado\n]\n\n# ... outras configura\u00e7\u00f5es ...\n\nREST_FRAMEWORK = {\n    # ... outras configura\u00e7\u00f5es do DRF ...\n    \"EXCEPTION_HANDLER\": \"core.middleware.custom_exception_middleware.custom_exception_handler\", # Handler de exce\u00e7\u00e3o customizado\n}\n\n# ... outras configura\u00e7\u00f5es ...\n</code></pre>"},{"location":"development/logging-error-handling/#6-uso-de-logs-em-casos-de-uso-e-repositorios","title":"6. Uso de Logs em Casos de Uso e Reposit\u00f3rios","text":"<p>Exemplos de como integrar o logging em diferentes camadas do projeto para registrar eventos importantes, warnings e erros.</p>"},{"location":"development/logging-error-handling/#exemplo-loginuserusecase-projectcoredomainuse_casesuser_use_casespy","title":"Exemplo: <code>LoginUserUseCase</code> (<code>project/core/domain/use_cases/user_use_cases.py</code>)","text":"<pre><code># project/core/domain/use_cases/user_use_cases.py\nimport logging\n# ... outras importa\u00e7\u00f5es ...\n\nlogger = logging.getLogger(__name__)\n\nclass LoginUserUseCase:\n    # ... __init__ ...\n\n    def execute(self, request: LoginUserRequest) -&gt; LoginUserResponse:\n        logger.info(\"Attempting to log in user with email: %s\", request.email)\n        user = self.user_repository.get_user_by_email(request.email)\n        if not user:\n            logger.warning(\"Login failed: User not found for email %s\", request.email)\n            raise ValueError(\"Invalid credentials\")\n\n        if not self.auth_gateway.check_password(user.id, request.password):\n            logger.warning(\"Login failed: Invalid password for user ID %s\", user.id)\n            raise ValueError(\"Invalid credentials\")\n\n        access_token, refresh_token = self.auth_gateway.create_tokens(user.id)\n        logger.info(\"User %s logged in successfully. User ID: %s\", request.email, user.id)\n\n        return LoginUserResponse(\n            id=user.id,\n            email=user.email,\n            access_token=access_token,\n            refresh_token=refresh_token,\n        )\n</code></pre>"},{"location":"development/logging-error-handling/#exemplo-djangouserrepository-projectcorerepositoriesuser_repository_implpy","title":"Exemplo: <code>DjangoUserRepository</code> (<code>project/core/repositories/user_repository_impl.py</code>)","text":"<pre><code># project/core/repositories/user_repository_impl.py\nimport logging\n# ... outras importa\u00e7\u00f5es ...\n\nlogger = logging.getLogger(__name__)\n\nclass DjangoUserRepository(UserRepository):\n    # ... outros m\u00e9todos ...\n\n    def get_by_id(self, user_id: str) -&gt; Optional[DomainUser]:\n        try:\n            user = DjangoUser.objects.get(id=user_id)\n            logger.debug(\"User found by ID: %s\", user_id)\n            return self._to_domain_user(user)\n        except DjangoUser.DoesNotExist:\n            logger.warning(\"User not found by ID: %s\", user_id)\n            return None\n\n    def create(self, user: DomainUser) -&gt; DomainUser:\n        logger.info(\"Attempting to create user with email: %s\", user.email)\n        django_user = DjangoUser.objects.create_user(\n            email=user.email,\n            first_name=user.first_name,\n            last_name=user.last_name,\n        )\n        logger.info(\"User created successfully with ID: %s\", django_user.id)\n        return self._to_domain_user(django_user)\n</code></pre>"},{"location":"development/logging-error-handling/#7-testes-de-integracao","title":"7. Testes de Integra\u00e7\u00e3o","text":"<p>Adicionamos testes de integra\u00e7\u00e3o para validar o comportamento do tratamento global de exce\u00e7\u00f5es, garantindo que a API retorne respostas padronizadas para diferentes tipos de erros.</p>"},{"location":"development/logging-error-handling/#exemplo-teste-de-login-com-credenciais-invalidas-projectcoretestsintegrationtest_auth_apipy","title":"Exemplo: Teste de Login com Credenciais Inv\u00e1lidas (<code>project/core/tests/integration/test_auth_api.py</code>)","text":"<p>Este teste verifica se, ao tentar logar com credenciais inv\u00e1lidas, a API retorna um <code>HTTP 400 Bad Request</code> com a mensagem de erro esperada, conforme configurado pelo <code>custom_exception_handler</code> para <code>ValueError</code>.</p> <pre><code># project/core/tests/integration/test_auth_api.py\nfrom rest_framework import status\nfrom rest_framework.test import APITestCase\n# ... outras importa\u00e7\u00f5es ...\n\nclass AuthAPITest(APITestCase):\n    # ... setUp e outros testes ...\n\n    def test_login_failure_invalid_password(self):\n        data = {\"email\": self.email, \"password\": \"wrongpassword\"}\n        response = self.client.post(self.login_url, data, format=\"json\")\n        self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)\n        self.assertIn(\"detail\", response.data)\n        self.assertEqual(response.data[\"detail\"], \"Invalid credentials\")\n\n    def test_login_failure_user_not_found(self):\n        data = {\"email\": \"nonexistent@example.com\", \"password\": self.password}\n        response = self.client.post(self.login_url, data, format=\"json\")\n        self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)\n        self.assertIn(\"detail\", response.data)\n        self.assertEqual(response.data[\"detail\"], \"Invalid credentials\")\n</code></pre>"},{"location":"development/logging-error-handling/#exemplo-simulacao-de-erro-interno-inesperado-projectcoretestsintegrationtest_user_apipy","title":"Exemplo: Simula\u00e7\u00e3o de Erro Interno Inesperado (<code>project/core/tests/integration/test_user_api.py</code>)","text":"<p>Este teste simula um erro interno (<code>RuntimeError</code>) em um endpoint da API para verificar se o tratamento global de exce\u00e7\u00f5es o captura e retorna um <code>HTTP 500 Internal Server Error</code> com uma mensagem gen\u00e9rica e o traceback em modo <code>DEBUG</code>.</p> <pre><code># project/core/tests/integration/test_user_api.py\nfrom rest_framework import status\nfrom rest_framework.test import APITestCase\nfrom django.conf import settings # Necess\u00e1rio para verificar settings.DEBUG\n# ... outras importa\u00e7\u00f5es ...\n\nclass UserAPITest(APITestCase):\n    # ... setUp e outros testes ...\n\n    def test_global_exception_handler_internal_server_error(self):\n        headers = self.get_auth_headers(self.admin_access_token)\n        response = self.client.get(\n            f\"{self.user_list_url}?raise_error=true\", **headers, format=\"json\"\n        )\n\n        self.assertEqual(response.status_code, status.HTTP_500_INTERNAL_SERVER_ERROR)\n        self.assertIn(\"detail\", response.data)\n        self.assertEqual(response.data[\"detail\"], \"Ocorreu um erro inesperado.\")\n        self.assertIn(\"status_code\", response.data)\n        self.assertEqual(response.data[\"status_code\"], 500)\n        if settings.DEBUG:\n            self.assertIn(\"traceback\", response.data)\n</code></pre>"},{"location":"development/logging-error-handling/#8-passos-da-implementacao","title":"8. Passos da Implementa\u00e7\u00e3o","text":"<ol> <li>Cria\u00e7\u00e3o do arquivo de documenta\u00e7\u00e3o: Criado <code>docs/development/logging-error-handling.md</code>.</li> <li>Atualiza\u00e7\u00e3o do <code>mkdocs.yml</code>: Adicionado o link para o novo documento na navega\u00e7\u00e3o.</li> <li>Configura\u00e7\u00e3o de Logs: Adicionada a configura\u00e7\u00e3o de <code>LOGGING</code> em <code>project/project/settings.py</code>.</li> <li>Cria\u00e7\u00e3o do Middleware: Criado <code>project/core/middleware/custom_exception_middleware.py</code> com o handler de exce\u00e7\u00f5es.</li> <li>Integra\u00e7\u00e3o do Middleware: Adicionado o <code>CustomExceptionMiddleware</code> \u00e0 lista <code>MIDDLEWARE</code> e configurado <code>REST_FRAMEWORK[\"EXCEPTION_HANDLER\"]</code> em <code>project/project/settings.py</code>.</li> <li>Uso de Logs no C\u00f3digo: Inseridas chamadas de <code>logger.info</code>, <code>logger.warning</code> e <code>logger.debug</code> em <code>project/core/domain/use_cases/user_use_cases.py</code> e <code>project/core/repositories/user_repository_impl.py</code>.</li> <li>Adi\u00e7\u00e3o de Testes de Integra\u00e7\u00e3o: Adicionado <code>test_global_exception_handler_internal_server_error</code> em <code>project/core/tests/integration/test_user_api.py</code> para validar o comportamento do tratamento de exce\u00e7\u00f5es 500.</li> <li>Atualiza\u00e7\u00e3o da Documenta\u00e7\u00e3o: Este documento foi atualizado com todos os detalhes e exemplos das etapas de implementa\u00e7\u00e3o.</li> <li>Remo\u00e7\u00e3o da L\u00f3gica Tempor\u00e1ria: A l\u00f3gica <code>raise RuntimeError</code> ser\u00e1 removida de <code>project/core/api/v1/views/user.py</code> ap\u00f3s a finaliza\u00e7\u00e3o da documenta\u00e7\u00e3o.</li> </ol>"},{"location":"development/oauth2-implementation/","title":"Implementa\u00e7\u00e3o Completa de OAuth2","text":"<p>Esta se\u00e7\u00e3o detalha a implementa\u00e7\u00e3o completa do protocolo OAuth2 para autentica\u00e7\u00e3o e autoriza\u00e7\u00e3o, utilizando a biblioteca <code>django-oauth-toolkit</code>.</p>"},{"location":"development/oauth2-implementation/#1-contexto-e-justificativa","title":"1. Contexto e Justificativa","text":"<p>Atualmente, a autentica\u00e7\u00e3o b\u00e1sica de login retorna tokens simplificados. Para um projeto-base robusto, \u00e9 essencial ter um sistema de autentica\u00e7\u00e3o e autoriza\u00e7\u00e3o baseado em padr\u00f5es da ind\u00fastria. O OAuth2, com o <code>django-oauth-toolkit</code>, oferece uma solu\u00e7\u00e3o completa para gerenciamento de tokens de acesso e refresh, permitindo uma integra\u00e7\u00e3o segura com clientes externos (frontends, aplicativos m\u00f3veis, outras APIs).</p>"},{"location":"development/oauth2-implementation/#2-abordagem-da-implementacao","title":"2. Abordagem da Implementa\u00e7\u00e3o","text":""},{"location":"development/oauth2-implementation/#a-configuracao-do-django-oauth-toolkit","title":"a. Configura\u00e7\u00e3o do <code>django-oauth-toolkit</code>","text":"<p>O <code>django-oauth-toolkit</code> j\u00e1 estava configurado no projeto. Os seguintes pontos confirmam isso:</p> <ul> <li><code>INSTALLED_APPS</code>: <code>oauth2_provider</code> j\u00e1 est\u00e1 inclu\u00eddo em <code>project/project/settings.py</code>.</li> <li>URLs: As URLs do <code>oauth2_provider</code> j\u00e1 est\u00e3o configuradas em <code>project/project/urls.py</code> com <code>path(\"o/\", include(\"oauth2_provider.urls\", namespace=\"oauth2_provider\"))</code>.</li> </ul>"},{"location":"development/oauth2-implementation/#b-authgateway-projectcoredomaingatewayspy","title":"b. <code>AuthGateway</code> (<code>project/core/domain/gateways.py</code>)","text":"<p>A interface <code>AuthGateway</code> j\u00e1 define o m\u00e9todo <code>create_tokens</code> e n\u00e3o foi alterada, pois ela j\u00e1 abstrai a necessidade de um gateway de autentica\u00e7\u00e3o.</p>"},{"location":"development/oauth2-implementation/#c-djangoauthgateway-projectcorerepositoriesauth_gateway_implpy","title":"c. <code>DjangoAuthGateway</code> (<code>project/core/repositories/auth_gateway_impl.py</code>)","text":"<p>A implementa\u00e7\u00e3o concreta do <code>create_tokens</code> no <code>DjangoAuthGateway</code> foi modificada para utilizar a API do <code>django-oauth-toolkit</code> para gerar tokens OAuth2 padr\u00e3o (access token e refresh token). Tamb\u00e9m foi adicionada uma l\u00f3gica para criar uma <code>Application</code> padr\u00e3o (<code>Default Application</code>) se ela n\u00e3o existir, o que \u00e9 \u00fatil para ambientes de desenvolvimento e teste.</p> <pre><code>import os\nfrom typing import Tuple\n\nfrom core.domain.gateways import AuthGateway\nfrom django.contrib.auth import authenticate, get_user_model\nfrom oauth2_provider.models import AccessToken, RefreshToken, Application\n\nUser = get_user_model()\n\nclass DjangoAuthGateway(AuthGateway):\n    # ... (check_password e set_password inalterados)\n\n    def create_tokens(self, user_id: str) -&gt; Tuple[str, str]:\n        try:\n            user = User.objects.get(id=user_id)\n        except User.DoesNotExist:\n            raise ValueError(\"User not found\")\n\n        try:\n            application = Application.objects.get(name=\"Default Application\")\n        except Application.DoesNotExist:\n            application = Application.objects.create(name=\"Default Application\", client_type=\"public\", authorization_grant_type=\"password\")\n\n        AccessToken.objects.filter(user=user, application=application).delete()\n        RefreshToken.objects.filter(user=user, application=application).delete()\n\n        access_token = AccessToken.objects.create(\n            user=user,\n            application=application,\n            token=\"access_token_\" + str(user_id) + \"_\" + os.urandom(30).hex(),\n            scope=\"read write\",\n            expires=AccessToken.get_expiration_delta(),\n        )\n\n        refresh_token = RefreshToken.objects.create(\n            user=user,\n            application=application,\n            token=\"refresh_token_\" + str(user_id) + \"_\" + os.urandom(30).hex(),\n            access_token=access_token,\n        )\n\n        return access_token.token, refresh_token.token\n</code></pre>"},{"location":"development/oauth2-implementation/#d-impacto-em-casos-de-uso-e-views","title":"d. Impacto em Casos de Uso e Views","text":"<p>N\u00e3o houve impacto direto no <code>LoginUserUseCase</code> nem na <code>LoginAPIView</code>. Eles continuam a interagir com a interface <code>AuthGateway</code> e seus DTOs, recebendo os tokens OAuth2 gerados pela camada de infraestrutura sem a necessidade de altera\u00e7\u00f5es em sua l\u00f3gica interna. Isso valida a efic\u00e1cia do desacoplamento da Arquitetura Limpa.</p>"},{"location":"development/oauth2-implementation/#3-passos-da-implementacao-concluidos","title":"3. Passos da Implementa\u00e7\u00e3o (Conclu\u00eddos)","text":"<ol> <li>Configura\u00e7\u00e3o de <code>django-oauth-toolkit</code> verificada: Confirmado que <code>oauth2_provider</code> est\u00e1 em <code>INSTALLED_APPS</code> e as URLs est\u00e3o configuradas.</li> <li><code>create_tokens</code> implementado: O m\u00e9todo <code>create_tokens</code> em <code>project/core/repositories/auth_gateway_impl.py</code> foi atualizado para gerar tokens OAuth2 reais.</li> <li>Verifica\u00e7\u00e3o de Impacto: Confirmado que <code>LoginUserUseCase</code> e <code>LoginAPIView</code> n\u00e3o precisaram de altera\u00e7\u00f5es diretas.</li> </ol>"},{"location":"development/pagination-filtering/","title":"Adicionando Pagina\u00e7\u00e3o e Filtragem","text":"<p>Esta se\u00e7\u00e3o descreve a implementa\u00e7\u00e3o de funcionalidades de pagina\u00e7\u00e3o e filtragem para a listagem de usu\u00e1rios na API, tornando-a mais flex\u00edvel e eficiente para lidar com grandes volumes de dados.</p>"},{"location":"development/pagination-filtering/#1-contexto-e-justificativa","title":"1. Contexto e Justificativa","text":"<p>Para APIs que retornam listas de recursos, \u00e9 crucial implementar mecanismos de pagina\u00e7\u00e3o para evitar sobrecarregar o cliente e o servidor com grandes respostas. A filtragem, por sua vez, permite que os clientes solicitem apenas os dados relevantes, melhorando a experi\u00eancia do usu\u00e1rio e a performance da aplica\u00e7\u00e3o.</p> <p>Na Arquitetura Limpa, esses controles devem ser introduzidos nas camadas de Aplica\u00e7\u00e3o (nos casos de uso, que orquestram a l\u00f3gica) e de Infraestrutura (nos reposit\u00f3rios, que interagem com o mecanismo de persist\u00eancia), e expostos na camada de Apresenta\u00e7\u00e3o (API).</p>"},{"location":"development/pagination-filtering/#2-visao-geral-da-implementacao","title":"2. Vis\u00e3o Geral da Implementa\u00e7\u00e3o","text":"<p>A implementa\u00e7\u00e3o envolver\u00e1 as seguintes altera\u00e7\u00f5es:</p> <ul> <li>Camada de Aplica\u00e7\u00e3o: Modificar o <code>ListUsersRequest</code> e <code>ListUsersResponse</code> para incluir par\u00e2metros de pagina\u00e7\u00e3o (offset, limit) e filtragem (ex: <code>search_query</code>). O <code>ListUsersUseCase</code> ser\u00e1 atualizado para utilizar esses par\u00e2metros.</li> <li>Camada de Dom\u00ednio (Interface): Atualizar a interface <code>UserRepository</code> com um novo m\u00e9todo para obter usu\u00e1rios paginados e filtrados.</li> <li>Camada de Infraestrutura: Implementar o m\u00e9todo de pagina\u00e7\u00e3o e filtragem no <code>DjangoUserRepository</code>, utilizando recursos do ORM do Django.</li> <li>Camada de Apresenta\u00e7\u00e3o (API): Adaptar a <code>UserListAPIView</code> e seus serializers para receber os par\u00e2metros de pagina\u00e7\u00e3o e filtragem via requisi\u00e7\u00e3o HTTP e formatar a resposta com metadados de pagina\u00e7\u00e3o.</li> <li>Testes de Integra\u00e7\u00e3o: Adicionar testes para validar o funcionamento da pagina\u00e7\u00e3o e filtragem na API.</li> </ul>"},{"location":"development/pagination-filtering/#3-alteracoes-na-camada-de-aplicacao-casos-de-uso","title":"3. Altera\u00e7\u00f5es na Camada de Aplica\u00e7\u00e3o (Casos de Uso)","text":""},{"location":"development/pagination-filtering/#a-listusersrequest-e-listusersresponse","title":"a. <code>ListUsersRequest</code> e <code>ListUsersResponse</code>","text":"<p>Modificamos os DTOs <code>ListUsersRequest</code> e <code>ListUsersResponse</code> para incluir os par\u00e2metros de pagina\u00e7\u00e3o (<code>offset</code>, <code>limit</code>) e filtragem (<code>search_query</code>), al\u00e9m dos metadados de pagina\u00e7\u00e3o na resposta.</p> <pre><code># project/core/domain/use_cases/user_use_cases.py\nfrom dataclasses import dataclass\nfrom typing import Optional\n\n@dataclass\nclass ListUsersRequest:\n    offset: int = 0\n    limit: int = 10\n    search_query: str | None = None\n\n@dataclass\nclass ListUsersResponse:\n    users: list[CreateUserResponse]\n    total_items: int\n    offset: int\n    limit: int\n</code></pre>"},{"location":"development/pagination-filtering/#b-listusersusecase","title":"b. <code>ListUsersUseCase</code>","text":"<p>O <code>ListUsersUseCase</code> foi modificado para aceitar os novos par\u00e2metros de <code>ListUsersRequest</code> e delegar a l\u00f3gica de pagina\u00e7\u00e3o e filtragem ao reposit\u00f3rio, retornando os metadados de pagina\u00e7\u00e3o na <code>ListUsersResponse</code>.</p> <pre><code># project/core/domain/use_cases/user_use_cases.py\nfrom core.domain.data_access import UserRepository\nfrom core.domain.entities.user import User as DomainUser\nfrom core.domain.use_cases.generic_use_cases import CreateUserResponse # Necess\u00e1rio para o ListUsersResponse\nfrom dataclasses import dataclass\nfrom typing import Optional, List # Adicionado List aqui\n\n@dataclass\nclass ListUsersRequest:\n    offset: int = 0\n    limit: int = 10\n    search_query: str | None = None\n\n@dataclass\nclass ListUsersResponse:\n    users: list[CreateUserResponse]\n    total_items: int\n    offset: int\n    limit: int\n\nclass ListUsersUseCase:\n    def __init__(self, user_repository: UserRepository):\n        self.user_repository = user_repository\n\n    def execute(self, request: ListUsersRequest) -&gt; ListUsersResponse:\n        users_domain, total_items = self.user_repository.get_all_paginated_filtered(\n            offset=request.offset, limit=request.limit, search_query=request.search_query\n        )\n\n        users_response = [\n            CreateUserResponse(\n                id=user.id,\n                email=user.email,\n                first_name=user.first_name,\n                last_name=user.last_name,\n                is_active=user.is_active,\n                is_staff=user.is_staff,\n                is_superuser=user.is_superuser,\n            )\n            for user in users_domain\n        ]\n        return ListUsersResponse(\n            users=users_response,\n            total_items=total_items,\n            offset=request.offset,\n            limit=request.limit,\n        )\n</code></pre>"},{"location":"development/pagination-filtering/#4-alteracoes-na-camada-de-dominio-interface-de-repositorio","title":"4. Altera\u00e7\u00f5es na Camada de Dom\u00ednio (Interface de Reposit\u00f3rio)","text":""},{"location":"development/pagination-filtering/#a-userrepository","title":"a. <code>UserRepository</code>","text":"<p>Adicionamos o m\u00e9todo <code>get_all_paginated_filtered</code> \u00e0 interface <code>UserRepository</code>, que permite obter usu\u00e1rios com base em par\u00e2metros de pagina\u00e7\u00e3o e filtragem, retornando uma tupla contendo a lista de usu\u00e1rios e o total de itens.</p> <pre><code># project/core/domain/data_access.py\nfrom abc import ABC, abstractmethod\nfrom typing import Generic, List, Optional, TypeVar\n\nfrom core.domain.entities.user import User\n\nT = TypeVar(\"T\")\n\n# ... GenericRepository ...\n\nclass UserRepository(GenericRepository[User]):\n    # ... outros m\u00e9todos ...\n\n    @abstractmethod\n    def get_all_paginated_filtered(\n        self, offset: int, limit: int, search_query: str | None\n    ) -&gt; tuple[List[User], int]:\n        pass\n</code></pre>"},{"location":"development/pagination-filtering/#5-alteracoes-na-camada-de-infraestrutura-implementacao-de-repositorio","title":"5. Altera\u00e7\u00f5es na Camada de Infraestrutura (Implementa\u00e7\u00e3o de Reposit\u00f3rio)","text":""},{"location":"development/pagination-filtering/#a-djangouserrepository","title":"a. <code>DjangoUserRepository</code>","text":"<p>A implementa\u00e7\u00e3o do <code>DjangoUserRepository</code> agora inclui o m\u00e9todo <code>get_all_paginated_filtered</code>, que utiliza o ORM do Django para aplicar a filtragem por email, <code>first_name</code> e <code>last_name</code> (case-insensitive) e a pagina\u00e7\u00e3o (<code>offset</code> e <code>limit</code>).</p> <pre><code># project/core/repositories/user_repository_impl.py\nfrom typing import List, Optional\nfrom django.db.models import Q\n\nfrom core.domain.data_access import UserRepository\nfrom core.domain.entities.user import User as DomainUser\nfrom core.models.user import User as DjangoUser\n\nclass DjangoUserRepository(UserRepository):\n    # ... outros m\u00e9todos ...\n\n    def get_all_paginated_filtered(\n        self, offset: int, limit: int, search_query: str | None\n    ) -&gt; tuple[List[DomainUser], int]:\n        queryset = DjangoUser.objects.exclude(is_superuser=True)\n\n        if search_query:\n            queryset = queryset.filter(\n                Q(email__icontains=search_query)\n                | Q(first_name__icontains=search_query)\n                | Q(last_name__icontains=search_query)\n            )\n\n        total_items = queryset.count()\n        django_users = queryset[offset : offset + limit]\n        return [self._to_domain_user(user) for user in django_users], total_items\n</code></pre>"},{"location":"development/pagination-filtering/#6-alteracoes-na-camada-de-apresentacao-api","title":"6. Altera\u00e7\u00f5es na Camada de Apresenta\u00e7\u00e3o (API)","text":""},{"location":"development/pagination-filtering/#a-serializers-projectcoreapiv1serializersuserpy","title":"a. Serializers (<code>project/core/api/v1/serializers/user.py</code>)","text":"<p>Criamos um <code>ListUsersRequestSerializer</code> para validar os par\u00e2metros de <code>query</code> de pagina\u00e7\u00e3o e filtragem, e atualizamos o <code>UserListResponseSerializer</code> para incluir os metadados de pagina\u00e7\u00e3o na resposta.</p> <pre><code># project/core/api/v1/serializers/user.py\nfrom rest_framework import serializers\nfrom core.domain.use_cases.user_use_cases import ListUsersRequest, ListUsersResponse\nfrom .user import UserSerializer\n\nclass UserListResponseSerializer(serializers.Serializer):\n    items = UserSerializer(many=True)\n    total_items = serializers.IntegerField()\n    offset = serializers.IntegerField()\n    limit = serializers.IntegerField()\n\n    def to_representation(self, instance: ListUsersResponse):\n        return {\n            \"items\": [UserSerializer(user).data for user in instance.users],\n            \"total_items\": instance.total_items,\n            \"offset\": instance.offset,\n            \"limit\": instance.limit,\n        }\n\nclass ListUsersRequestSerializer(serializers.Serializer):\n    offset = serializers.IntegerField(default=0, required=False, min_value=0)\n    limit = serializers.IntegerField(default=10, required=False, min_value=1)\n    search_query = serializers.CharField(required=False, allow_blank=True)\n\n    def to_internal_value(self, data):\n        return ListUsersRequest(\n            offset=data.get(\"offset\", 0),\n            limit=data.get(\"limit\", 10),\n            search_query=data.get(\"search_query\", None),\n        )\n</code></pre>"},{"location":"development/pagination-filtering/#b-views-projectcoreapiv1viewsuserpy","title":"b. Views (<code>project/core/api/v1/views/user.py</code>)","text":"<p>A <code>UserListAPIView</code> foi adaptada para utilizar o <code>ListUsersRequestSerializer</code> para validar os par\u00e2metros de pagina\u00e7\u00e3o e filtragem da requisi\u00e7\u00e3o, e passa esses par\u00e2metros para o <code>ListUsersUseCase</code>.</p> <pre><code># project/core/api/v1/views/user.py\nfrom rest_framework import generics, status\nfrom rest_framework.response import Response\nfrom rest_framework.permissions import IsAdminUser\n\nfrom core.domain.use_cases.user_use_cases import get_list_users_use_case\nfrom ..serializers.user import (\n    UserAlterPasswordSerializer,\n    UserCreateRequestSerializer,\n    UserListResponseSerializer,\n    UserReadSerializer,\n    UserSerializer,\n    ListUsersRequestSerializer,\n)\n\nclass UserListAPIView(generics.ListAPIView):\n    serializer_class = UserListResponseSerializer\n    permission_classes = (IsAdminUser,)\n\n    def list(self, request, *args, **kwargs):\n        request_serializer = ListUsersRequestSerializer(data=request.query_params)\n        request_serializer.is_valid(raise_exception=True)\n        list_users_request = request_serializer.to_internal_value(request_serializer.validated_data)\n\n        list_users_use_case = get_list_users_use_case()\n        list_users_response = list_users_use_case.execute(list_users_request)\n\n        response_serializer = UserListResponseSerializer(instance=list_users_response)\n        return Response(response_serializer.data, status=status.HTTP_200_OK)\n</code></pre>"},{"location":"development/pagination-filtering/#7-testes-de-integracao","title":"7. Testes de Integra\u00e7\u00e3o","text":"<p>Adicionamos testes de integra\u00e7\u00e3o em <code>project/core/tests/integration/test_user_api.py</code> para validar o comportamento da API com as novas funcionalidades de pagina\u00e7\u00e3o e filtragem.</p>"},{"location":"development/pagination-filtering/#exemplo-paginacao-limite","title":"Exemplo: Pagina\u00e7\u00e3o (Limite)","text":"<pre><code># project/core/tests/integration/test_user_api.py\n# ... imports e setUp ...\n\nclass UserAPITest(APITestCase):\n    # ... setUp e outros testes ...\n\n    def test_list_users_pagination_limit(self):\n        headers = self.get_auth_headers(self.admin_access_token)\n        response = self.client.get(f\"{self.user_list_url}?limit=5\", **headers, format=\"json\")\n\n        self.assertEqual(response.status_code, status.HTTP_200_OK)\n        self.assertEqual(len(response.data[\"items\"]), 5)\n        self.assertEqual(response.data[\"limit\"], 5)\n        self.assertEqual(response.data[\"offset\"], 0)\n        self.assertGreaterEqual(response.data[\"total_items\"], 15)\n</code></pre>"},{"location":"development/pagination-filtering/#exemplo-filtragem-por-email","title":"Exemplo: Filtragem por Email","text":"<pre><code># project/core/tests/integration/test_user_api.py\n# ... imports e setUp ...\n\nclass UserAPITest(APITestCase):\n    # ... setUp e outros testes ...\n\n    def test_list_users_filter_by_email(self):\n        headers = self.get_auth_headers(self.admin_access_token)\n        search_email = self.test_users[0].email\n\n        response = self.client.get(f\"{self.user_list_url}?search_query={search_email}\", **headers, format=\"json\")\n\n        self.assertEqual(response.status_code, status.HTTP_200_OK)\n        self.assertEqual(len(response.data[\"items\"]), 1)\n        self.assertEqual(response.data[\"items\"][0][\"email\"], search_email)\n</code></pre>"},{"location":"development/pagination-filtering/#8-passos-da-implementacao","title":"8. Passos da Implementa\u00e7\u00e3o","text":"<p>A implementa\u00e7\u00e3o da pagina\u00e7\u00e3o e filtragem para a listagem de usu\u00e1rios seguiu os seguintes passos:</p> <ol> <li>Cria\u00e7\u00e3o de Novo Arquivo de Documenta\u00e7\u00e3o: O arquivo <code>docs/development/pagination-filtering.md</code> foi criado para descrever a estrat\u00e9gia de pagina\u00e7\u00e3o e filtragem.</li> <li>Atualiza\u00e7\u00e3o de <code>mkdocs.yml</code>: O novo arquivo de documenta\u00e7\u00e3o foi adicionado \u00e0 navega\u00e7\u00e3o do MkDocs.</li> <li>Atualiza\u00e7\u00e3o de Casos de Uso (<code>ListUsersUseCase</code>): <code>ListUsersRequest</code> e <code>ListUsersResponse</code> foram modificados para incluir par\u00e2metros de pagina\u00e7\u00e3o (<code>offset</code>, <code>limit</code>) e filtragem (<code>search_query</code>). O <code>ListUsersUseCase</code> foi adaptado para utilizar esses par\u00e2metros e delegar a l\u00f3gica ao reposit\u00f3rio.</li> <li>Atualiza\u00e7\u00e3o da Interface de Reposit\u00f3rio (<code>UserRepository</code>): O m\u00e9todo abstrato <code>get_all_paginated_filtered</code> foi adicionado \u00e0 interface <code>UserRepository</code>.</li> <li>Atualiza\u00e7\u00e3o da Implementa\u00e7\u00e3o de Reposit\u00f3rio (<code>DjangoUserRepository</code>): O m\u00e9todo <code>get_all_paginated_filtered</code> foi implementado, utilizando o ORM do Django (com <code>Q</code> para filtragem <code>icontains</code>) para aplicar a l\u00f3gica de pagina\u00e7\u00e3o e filtragem.</li> <li>Atualiza\u00e7\u00e3o de Serializers da API: Um <code>ListUsersRequestSerializer</code> foi criado para validar os par\u00e2metros de <code>query</code> de entrada, e o <code>UserListResponseSerializer</code> foi atualizado para incluir os metadados de pagina\u00e7\u00e3o (<code>total_items</code>, <code>offset</code>, <code>limit</code>) na resposta.</li> <li>Atualiza\u00e7\u00e3o de Views da API (<code>UserListAPIView</code>): A <code>UserListAPIView</code> foi modificada para utilizar o <code>ListUsersRequestSerializer</code> para processar os par\u00e2metros da requisi\u00e7\u00e3o e passar os dados para o <code>ListUsersUseCase</code>.</li> <li>Atualiza\u00e7\u00e3o de Testes de Integra\u00e7\u00e3o: Novos testes foram adicionados em <code>project/core/tests/integration/test_user_api.py</code> para validar o funcionamento da pagina\u00e7\u00e3o e filtragem nos endpoints da API.</li> </ol> <p>Com a pagina\u00e7\u00e3o e filtragem implementadas e documentadas, a API de listagem de usu\u00e1rios torna-se mais flex\u00edvel e eficiente.</p>"},{"location":"development/repositories-reference/","title":"\ud83d\uddc4\ufe0f Repositories Reference","text":"<p>Esta p\u00e1gina cont\u00e9m a documenta\u00e7\u00e3o autom\u00e1tica das implementa\u00e7\u00f5es de reposit\u00f3rios.</p>"},{"location":"development/repositories-reference/#user-repository-implementation","title":"\ud83d\udc64 User Repository Implementation","text":""},{"location":"development/repositories-reference/#django-user-repository","title":"Django User Repository","text":"<p>::: core.repositories.user_repository_impl.DjangoUserRepository options: show_source: true show_root_heading: true</p>"},{"location":"development/repositories-reference/#auth-gateway-implementation","title":"\ud83d\udd10 Auth Gateway Implementation","text":""},{"location":"development/repositories-reference/#django-auth-gateway","title":"Django Auth Gateway","text":"<p>::: core.repositories.auth_gateway_impl.DjangoAuthGateway options: show_source: true show_root_heading: true</p>"},{"location":"development/repositories-reference/#dependency-injection","title":"\ud83d\udd27 Dependency Injection","text":""},{"location":"development/repositories-reference/#api-dependencies","title":"API Dependencies","text":"<p>::: core.api.deps options: show_source: true show_root_heading: true</p>"},{"location":"development/repositories-reference/#sobre-as-implementacoes","title":"\ud83d\udcdd Sobre as Implementa\u00e7\u00f5es","text":"<p>As implementa\u00e7\u00f5es de reposit\u00f3rios e gateways:</p> <ul> <li>Conectam a camada de dom\u00ednio com a infraestrutura</li> <li>Implementam os contratos definidos na camada de dom\u00ednio</li> <li>Utilizam Django ORM para persist\u00eancia</li> <li>Mapeiam entre modelos Django e entidades de dom\u00ednio</li> </ul>"},{"location":"development/repositories-reference/#padroes-utilizados","title":"Padr\u00f5es Utilizados","text":"<ol> <li>Repository Pattern: Abstra\u00e7\u00e3o de acesso a dados</li> <li>Gateway Pattern: Abstra\u00e7\u00e3o de servi\u00e7os externos</li> <li>Dependency Injection: Invers\u00e3o de controle</li> <li>Adapter Pattern: Adapta\u00e7\u00e3o entre camadas</li> </ol>"},{"location":"development/repositories-reference/#mapeamento-de-dados","title":"Mapeamento de Dados","text":"<p>Os reposit\u00f3rios fazem a convers\u00e3o entre:</p> <ul> <li>Modelos Django \u2194 Entidades de Dom\u00ednio</li> <li>Querysets \u2194 Listas de Entidades</li> <li>Exce\u00e7\u00f5es Django \u2194 Exce\u00e7\u00f5es de Dom\u00ednio</li> </ul>"},{"location":"development/testing/","title":"Como Testar","text":"<p>A ado\u00e7\u00e3o da Arquitetura Limpa torna o projeto altamente test\u00e1vel. A l\u00f3gica de neg\u00f3cio reside nas camadas de Dom\u00ednio e Aplica\u00e7\u00e3o, que s\u00e3o completamente independentes de frameworks e bancos de dados, permitindo testes unit\u00e1rios r\u00e1pidos e isolados.</p>"},{"location":"development/testing/#testes-unitarios-camadas-de-dominio-e-aplicacao","title":"Testes Unit\u00e1rios (Camadas de Dom\u00ednio e Aplica\u00e7\u00e3o)","text":"<p>Para testar as camadas de Dom\u00ednio e Aplica\u00e7\u00e3o, voc\u00ea pode usar um framework de teste como <code>pytest</code>. Voc\u00ea precisaria:</p> <ol> <li>Mockar as depend\u00eancias: Criar <code>mocks</code> para <code>UserRepository</code> e <code>AuthGateway</code> (que s\u00e3o interfaces). Isso permite que voc\u00ea teste os casos de uso sem precisar de um banco de dados real ou sistema de autentica\u00e7\u00e3o.</li> </ol> <pre><code># test_user_use_cases.py\nfrom unittest.mock import Mock\nfrom core.domain.entities.user import User as DomainUser\nfrom core.domain.use_cases.user_use_cases import CreateUserRequest, CreateUserUseCase, GetUserByIdRequest, GetUserByIdUseCase\n\ndef test_create_user_use_case_success():\n    # Given\n    mock_user_repository = Mock()\n    mock_user_repository.create_user.return_value = DomainUser(\n        id=\"123\", email=\"test@example.com\", first_name=\"Test\", last_name=\"User\"\n    )\n    use_case = CreateUserUseCase(user_repository=mock_user_repository)\n    request = CreateUserRequest(\n        email=\"test@example.com\", first_name=\"Test\", last_name=\"User\", password=\"password123\"\n    )\n\n    # When\n    response = use_case.execute(request)\n\n    # Then\n    mock_user_repository.create_user.assert_called_once()\n    assert response.email == \"test@example.com\"\n    assert response.id == \"123\"\n\ndef test_get_user_by_id_use_case_success():\n    # Given\n    mock_user_repository = Mock()\n    expected_user = DomainUser(\n        id=\"123\", email=\"test@example.com\", first_name=\"Test\", last_name=\"User\"\n    )\n    mock_user_repository.get_user_by_id.return_value = expected_user\n    use_case = GetUserByIdUseCase(user_repository=mock_user_repository)\n    request = GetUserByIdRequest(user_id=\"123\")\n\n    # When\n    response = use_case.execute(request)\n\n    # Then\n    mock_user_repository.get_user_by_id.assert_called_once_with(\"123\")\n    assert response.id == expected_user.id\n    assert response.email == expected_user.email\n</code></pre>"},{"location":"development/testing/#testes-de-integracao-camada-de-apresentacao-api","title":"Testes de Integra\u00e7\u00e3o (Camada de Apresenta\u00e7\u00e3o - API)","text":"<p>Para testar a integra\u00e7\u00e3o da API com as camadas inferiores, voc\u00ea pode usar <code>APITestCase</code> do Django REST Framework. Esses testes simular\u00e3o requisi\u00e7\u00f5es HTTP e verificar\u00e3o as respostas da API.</p> <pre><code># test_user_api.py\nfrom rest_framework.test import APITestCase\nfrom django.urls import reverse\nfrom django.contrib.auth import get_user_model\n\nUser = get_user_model()\n\nclass UserAPITests(APITestCase):\n    def test_create_user_success():\n        url = reverse(\"v1:create-user\")\n        data = {\n            \"email\": \"newuser@example.com\",\n            \"first_name\": \"New\",\n            \"last_name\": \"User\",\n            \"password\": \"newpassword123\",\n        }\n        response = self.client.post(url, data, format='json')\n        assert response.status_code == 201\n        assert \"id\" in response.data\n        assert response.data[\"email\"] == \"newuser@example.com\"\n        assert User.objects.filter(email=\"newuser@example.com\").exists()\n\n    def test_login_user_success():\n        # Criar um usu\u00e1rio primeiro\n        self.client.post(reverse(\"v1:create-user\"), {\n            \"email\": \"loginuser@example.com\",\n            \"first_name\": \"Login\",\n            \"last_name\": \"User\",\n            \"password\": \"loginpassword123\",\n        }, format='json')\n\n        url = reverse(\"v1:login\")\n        data = {\n            \"email\": \"loginuser@example.com\",\n            \"password\": \"loginpassword123\",\n        }\n        response = self.client.post(url, data, format='json')\n        assert response.status_code == 200\n        assert \"access_token\" in response.data\n        assert \"refresh_token\" in response.data\n\n    def test_list_users_success():\n        # Criar alguns usu\u00e1rios\n        self.client.post(reverse(\"v1:create-user\"), {\n            \"email\": \"user1@example.com\", \"first_name\": \"User\", \"last_name\": \"One\", \"password\": \"password123\"\n        }, format='json')\n        self.client.post(reverse(\"v1:create-user\"), {\n            \"email\": \"user2@example.com\", \"first_name\": \"User\", \"last_name\": \"Two\", \"password\": \"password123\"\n        }, format='json')\n\n        url = reverse(\"v1:user-list\")\n        # \u00c9 necess\u00e1rio estar autenticado para listar usu\u00e1rios (assumindo IsAdminUser ou similar)\n        # Por enquanto, se a permiss\u00e3o \u00e9 AllowAny, pode ser testado diretamente.\n        response = self.client.get(url, format='json')\n        assert response.status_code == 200\n        assert len(response.data[\"users\"]) &gt;= 2\n\n    def test_get_user_by_id_success():\n        # Criar um usu\u00e1rio\n        create_response = self.client.post(reverse(\"v1:create-user\"), {\n            \"email\": \"getuser@example.com\", \"first_name\": \"Get\", \"last_name\": \"User\", \"password\": \"getuser123\"\n        }, format='json')\n        user_id = create_response.data[\"id\"]\n\n        url = reverse(\"v1:retrieve-user\", kwargs={'pk': user_id})\n        # Este teste precisa de autentica\u00e7\u00e3o de admin. Para simplificar, vamos assumir que\n        # um admin est\u00e1 fazendo a requisi\u00e7\u00e3o. Em um cen\u00e1rio real, voc\u00ea autenticaria o admin.\n        response = self.client.get(url, format='json')\n        assert response.status_code == 200\n        assert response.data[\"id\"] == user_id\n        assert response.data[\"email\"] == \"getuser@example.com\"\n\n    def test_change_password_success():\n        # Criar um usu\u00e1rio e autenticar (ou obter o ID do usu\u00e1rio de outra forma)\n        create_response = self.client.post(reverse(\"v1:create-user\"), {\n            \"email\": \"changepass@example.com\", \"first_name\": \"Change\", \"last_name\": \"Pass\", \"password\": \"oldpassword123\"\n        }, format='json')\n        user_id = create_response.data[\"id\"]\n\n        url = reverse(\"v1:user-alter-password\", kwargs={'pk': user_id})\n        data = {\n            \"old_password\": \"oldpassword123\",\n            \"new_password\": \"newstrongpassword123\",\n        }\n        # Este teste precisa de autentica\u00e7\u00e3o de admin. Para simplificar, vamos assumir que\n        # um admin est\u00e1 fazendo a requisi\u00e7\u00e3o. Em um cen\u00e1rio real, voc\u00ea autenticaria o admin.\n        response = self.client.put(url, data, format='json') # Ou patch\n        assert response.status_code == 200\n        assert response.data[\"success\"]\n\n        # Tentar logar com a nova senha para confirmar\n        login_url = reverse(\"v1:login\")\n        login_data = {\"email\": \"changepass@example.com\", \"password\": \"newstrongpassword123\"}\n        login_response = self.client.post(login_url, login_data, format='json')\n        assert login_response.status_code == 200\n</code></pre>"},{"location":"development/testing/#comandos-curl-para-teste-manual","title":"Comandos <code>curl</code> para Teste Manual","text":"<p>Voc\u00ea pode usar <code>curl</code> para testar os endpoints da API manualmente.</p>"},{"location":"development/testing/#1-criar-usuario-register","title":"1. Criar Usu\u00e1rio (Register)","text":"<pre><code>curl -X POST http://localhost:8000/v1/users/ \\\n     -H \"Content-Type: application/json\" \\\n     -d '{ \"email\": \"user@example.com\", \"first_name\": \"John\", \"last_name\": \"Doe\", \"password\": \"mypassword123\" }'\n</code></pre>"},{"location":"development/testing/#2-login-de-usuario","title":"2. Login de Usu\u00e1rio","text":"<pre><code>curl -X POST http://localhost:8000/v1/login/ \\\n     -H \"Content-Type: application/json\" \\\n     -d '{ \"email\": \"user@example.com\", \"password\": \"mypassword123\" }'\n</code></pre> <p>(A resposta incluir\u00e1 <code>access_token</code> e <code>refresh_token</code>)</p>"},{"location":"development/testing/#3-listar-usuarios","title":"3. Listar Usu\u00e1rios","text":"<pre><code># Voc\u00ea precisar\u00e1 de um token de autentica\u00e7\u00e3o (Bearer Token) para esta requisi\u00e7\u00e3o,\n# caso a permiss\u00e3o IsAdminUser esteja ativa na view.\n# Supondo que voc\u00ea tem um token de um usu\u00e1rio admin:\n# TOKEN=\"seu_access_token_aqui\"\n\ncurl -X GET http://localhost:8000/v1/users/list/ \\\n     -H \"Content-Type: application/json\" \\\n     -H \"Authorization: Bearer $TOKEN\"\n</code></pre>"},{"location":"development/testing/#4-obter-detalhes-de-um-usuario-por-id","title":"4. Obter Detalhes de um Usu\u00e1rio por ID","text":"<pre><code># Voc\u00ea precisar\u00e1 do ID do usu\u00e1rio e de um token de autentica\u00e7\u00e3o (Bearer Token)\n# de um usu\u00e1rio admin.\n# USER_ID=\"o_id_do_usuario_aqui\"\n# TOKEN=\"seu_access_token_aqui\"\n\ncurl -X GET http://localhost:8000/v1/users/$USER_ID/ \\\n     -H \"Content-Type: application/json\" \\\n     -H \"Authorization: Bearer $TOKEN\"\n</code></pre>"},{"location":"development/testing/#5-alterar-senha-de-usuario","title":"5. Alterar Senha de Usu\u00e1rio","text":"<pre><code># Voc\u00ea precisar\u00e1 do ID do usu\u00e1rio e de um token de autentica\u00e7\u00e3o (Bearer Token)\n# de um usu\u00e1rio admin.\n# USER_ID=\"o_id_do_usuario_aqui\"\n# TOKEN=\"seu_access_token_aqui\"\n\ncurl -X PUT http://localhost:8000/v1/users/alter_password/$USER_ID/ \\\n     -H \"Content-Type: application/json\" \\\n     -H \"Authorization: Bearer $TOKEN\" \\\n     -d '{ \"old_password\": \"mypassword123\", \"new_password\": \"mynewpassword456\" }'\n</code></pre>"},{"location":"development/use-cases-reference/","title":"\ud83c\udfaf Use Cases Reference","text":"<p>Esta p\u00e1gina cont\u00e9m a documenta\u00e7\u00e3o autom\u00e1tica dos casos de uso da aplica\u00e7\u00e3o.</p>"},{"location":"development/use-cases-reference/#user-use-cases","title":"\ud83d\udc64 User Use Cases","text":""},{"location":"development/use-cases-reference/#create-user-use-case","title":"Create User Use Case","text":"<p>::: core.domain.use_cases.user_use_cases.CreateUserUseCase options: show_source: true show_root_heading: true</p>"},{"location":"development/use-cases-reference/#login-user-use-case","title":"Login User Use Case","text":"<p>::: core.domain.use_cases.user_use_cases.LoginUserUseCase options: show_source: true show_root_heading: true</p>"},{"location":"development/use-cases-reference/#change-user-password-use-case","title":"Change User Password Use Case","text":"<p>::: core.domain.use_cases.user_use_cases.ChangeUserPasswordUseCase options: show_source: true show_root_heading: true</p>"},{"location":"development/use-cases-reference/#list-users-use-case","title":"List Users Use Case","text":"<p>::: core.domain.use_cases.user_use_cases.ListUsersUseCase options: show_source: true show_root_heading: true</p>"},{"location":"development/use-cases-reference/#get-user-by-id-use-case","title":"Get User By ID Use Case","text":"<p>::: core.domain.use_cases.user_use_cases.GetUserByIdUseCase options: show_source: true show_root_heading: true</p>"},{"location":"development/use-cases-reference/#generic-use-cases","title":"\ud83d\udd27 Generic Use Cases","text":""},{"location":"development/use-cases-reference/#create-entity-use-case","title":"Create Entity Use Case","text":"<p>::: core.domain.use_cases.generic_use_cases.CreateEntityUseCase options: show_source: true show_root_heading: true</p>"},{"location":"development/use-cases-reference/#list-entities-use-case","title":"List Entities Use Case","text":"<p>::: core.domain.use_cases.generic_use_cases.ListEntitiesUseCase options: show_source: true show_root_heading: true</p>"},{"location":"development/use-cases-reference/#get-entity-by-id-use-case","title":"Get Entity By ID Use Case","text":"<p>::: core.domain.use_cases.generic_use_cases.GetEntityByIdUseCase options: show_source: true show_root_heading: true</p>"},{"location":"development/use-cases-reference/#update-entity-use-case","title":"Update Entity Use Case","text":"<p>::: core.domain.use_cases.generic_use_cases.UpdateEntityUseCase options: show_source: true show_root_heading: true</p>"},{"location":"development/use-cases-reference/#delete-entity-use-case","title":"Delete Entity Use Case","text":"<p>::: core.domain.use_cases.generic_use_cases.DeleteEntityUseCase options: show_source: true show_root_heading: true</p>"},{"location":"development/use-cases-reference/#dtos-data-transfer-objects","title":"\ud83d\udccb DTOs (Data Transfer Objects)","text":""},{"location":"development/use-cases-reference/#user-use-cases-dtos","title":"User Use Cases DTOs","text":"<p>::: core.domain.use_cases.user_use_cases.CreateUserRequest options: show_source: true show_root_heading: true</p> <p>::: core.domain.use_cases.user_use_cases.CreateUserResponse options: show_source: true show_root_heading: true</p> <p>::: core.domain.use_cases.user_use_cases.LoginUserRequest options: show_source: true show_root_heading: true</p> <p>::: core.domain.use_cases.user_use_cases.LoginUserResponse options: show_source: true show_root_heading: true</p>"},{"location":"development/use-cases-reference/#generic-use-cases-dtos","title":"Generic Use Cases DTOs","text":"<p>::: core.domain.use_cases.generic_use_cases.GenericCreateRequest options: show_source: true show_root_heading: true</p> <p>::: core.domain.use_cases.generic_use_cases.GenericReadResponse options: show_source: true show_root_heading: true</p> <p>::: core.domain.use_cases.generic_use_cases.GenericListRequest options: show_source: true show_root_heading: true</p> <p>::: core.domain.use_cases.generic_use_cases.GenericListResponse options: show_source: true show_root_heading: true</p>"},{"location":"development/use-cases-reference/#sobre-os-use-cases","title":"\ud83c\udfaf Sobre os Use Cases","text":"<p>Os casos de uso encapsulam a l\u00f3gica de aplica\u00e7\u00e3o e:</p> <ul> <li>Orquestram opera\u00e7\u00f5es entre diferentes camadas</li> <li>Implementam regras de neg\u00f3cio espec\u00edficas da aplica\u00e7\u00e3o</li> <li>Coordenam reposit\u00f3rios e gateways</li> <li>Retornam DTOs padronizados</li> </ul>"},{"location":"development/use-cases-reference/#padrao-de-execucao","title":"Padr\u00e3o de Execu\u00e7\u00e3o","text":"<p>Todos os use cases seguem o padr\u00e3o:</p> <ol> <li>Recebem um <code>Request</code> DTO</li> <li>Executam a l\u00f3gica de neg\u00f3cio</li> <li>Retornam um <code>Response</code> DTO</li> <li>Tratam exce\u00e7\u00f5es de forma consistente</li> </ol>"},{"location":"security/security-guidelines/","title":"\ud83d\udd12 Diretrizes de Seguran\u00e7a","text":""},{"location":"security/security-guidelines/#credenciais-e-dados-sensiveis","title":"\u26a0\ufe0f Credenciais e Dados Sens\u00edveis","text":""},{"location":"security/security-guidelines/#nunca-commitar","title":"\ud83d\udeab NUNCA Commitar","text":"<ul> <li>Senhas em texto plano</li> <li>Chaves de API</li> <li>Tokens de autentica\u00e7\u00e3o</li> <li>Certificados SSL</li> <li>Arquivos de configura\u00e7\u00e3o com dados sens\u00edveis</li> </ul>"},{"location":"security/security-guidelines/#boas-praticas","title":"\u2705 Boas Pr\u00e1ticas","text":""},{"location":"security/security-guidelines/#1-variaveis-de-ambiente","title":"1. Vari\u00e1veis de Ambiente","text":"<pre><code># .env (nunca commitado)\nSECRET_KEY=sua-chave-super-secreta-aqui\nDATABASE_URL=postgresql://user:pass@localhost/db\nAPI_KEY=sua-api-key-secreta\n</code></pre>"},{"location":"security/security-guidelines/#2-github-secrets","title":"2. GitHub Secrets","text":"<p>Para CI/CD, use GitHub Secrets:</p> <ul> <li><code>SECRET_KEY_FOR_CI</code></li> <li><code>DATABASE_URL_TEST</code></li> <li><code>API_KEYS</code></li> </ul>"},{"location":"security/security-guidelines/#3-configuracao-segura-do-superusuario","title":"3. Configura\u00e7\u00e3o Segura do Superusu\u00e1rio","text":"<pre><code># \u2705 Correto - Interativo\nmake createsuperuser\n\n# \u274c Incorreto - Hardcoded\n# Nunca fa\u00e7a isso em c\u00f3digo p\u00fablico\n</code></pre>"},{"location":"security/security-guidelines/#configuracoes-de-producao","title":"\ud83d\udee1\ufe0f Configura\u00e7\u00f5es de Produ\u00e7\u00e3o","text":""},{"location":"security/security-guidelines/#django-settings","title":"Django Settings","text":"<pre><code># settings/production.py\nimport os\nfrom django.core.exceptions import ImproperlyConfigured\n\ndef get_env_variable(var_name):\n    try:\n        return os.environ[var_name]\n    except KeyError:\n        error_msg = f\"Set the {var_name} environment variable\"\n        raise ImproperlyConfigured(error_msg)\n\nSECRET_KEY = get_env_variable('SECRET_KEY')\nDEBUG = False\nALLOWED_HOSTS = get_env_variable('ALLOWED_HOSTS').split(',')\n</code></pre>"},{"location":"security/security-guidelines/#banco-de-dados","title":"Banco de Dados","text":"<pre><code>DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': get_env_variable('DB_NAME'),\n        'USER': get_env_variable('DB_USER'),\n        'PASSWORD': get_env_variable('DB_PASSWORD'),\n        'HOST': get_env_variable('DB_HOST'),\n        'PORT': get_env_variable('DB_PORT'),\n    }\n}\n</code></pre>"},{"location":"security/security-guidelines/#autenticacao-e-autorizacao","title":"\ud83d\udd10 Autentica\u00e7\u00e3o e Autoriza\u00e7\u00e3o","text":""},{"location":"security/security-guidelines/#oauth2-seguro","title":"OAuth2 Seguro","text":"<pre><code># settings.py\nOAUTH2_SETTINGS = {\n    'SCOPES': {\n        'read': 'Read scope',\n        'write': 'Write scope',\n    },\n    'ACCESS_TOKEN_EXPIRE_SECONDS': 3600,\n    'REFRESH_TOKEN_EXPIRE_SECONDS': 86400,\n}\n</code></pre>"},{"location":"security/security-guidelines/#middleware-de-seguranca","title":"Middleware de Seguran\u00e7a","text":"<pre><code>MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'corsheaders.middleware.CorsMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\n# Configura\u00e7\u00f5es de seguran\u00e7a\nSECURE_BROWSER_XSS_FILTER = True\nSECURE_CONTENT_TYPE_NOSNIFF = True\nX_FRAME_OPTIONS = 'DENY'\nSECURE_HSTS_SECONDS = 31536000\nSECURE_HSTS_INCLUDE_SUBDOMAINS = True\nSECURE_HSTS_PRELOAD = True\n</code></pre>"},{"location":"security/security-guidelines/#checklist-de-seguranca","title":"\ud83d\udccb Checklist de Seguran\u00e7a","text":""},{"location":"security/security-guidelines/#antes-do-deploy","title":"Antes do Deploy","text":"<ul> <li>[ ] Todas as credenciais est\u00e3o em vari\u00e1veis de ambiente</li> <li>[ ] <code>.env</code> est\u00e1 no <code>.gitignore</code></li> <li>[ ] <code>DEBUG = False</code> em produ\u00e7\u00e3o</li> <li>[ ] <code>ALLOWED_HOSTS</code> configurado corretamente</li> <li>[ ] HTTPS habilitado</li> <li>[ ] Certificado SSL v\u00e1lido</li> <li>[ ] Backup seguro configurado</li> </ul>"},{"location":"security/security-guidelines/#monitoramento","title":"Monitoramento","text":"<ul> <li>[ ] Logs de seguran\u00e7a habilitados</li> <li>[ ] Alertas de tentativas de acesso n\u00e3o autorizado</li> <li>[ ] Auditoria de depend\u00eancias (pip-audit)</li> <li>[ ] Scans de vulnerabilidade regulares</li> </ul>"},{"location":"security/security-guidelines/#resposta-a-incidentes","title":"\ud83d\udea8 Resposta a Incidentes","text":""},{"location":"security/security-guidelines/#se-credenciais-foram-expostas","title":"Se Credenciais Foram Expostas","text":"<ol> <li>Imediatamente:</li> <li>Revogar/alterar todas as credenciais expostas</li> <li>Verificar logs de acesso</li> <li> <p>Notificar equipe de seguran\u00e7a</p> </li> <li> <p>Limpeza do Git:</p> </li> </ol> <pre><code># Remover do hist\u00f3rico (CUIDADO!)\ngit filter-branch --force --index-filter \\\n'git rm --cached --ignore-unmatch arquivo-com-credenciais' \\\n--prune-empty --tag-name-filter cat -- --all\n\n# Force push (coordenar com equipe)\ngit push origin --force --all\n</code></pre> <ol> <li>Preven\u00e7\u00e3o:</li> <li>Implementar pre-commit hooks</li> <li>Usar ferramentas como git-secrets</li> <li>Treinamento da equipe</li> </ol>"},{"location":"security/security-guidelines/#ferramentas-de-seguranca","title":"\ud83d\udd27 Ferramentas de Seguran\u00e7a","text":""},{"location":"security/security-guidelines/#pre-commit-hooks","title":"Pre-commit Hooks","text":"<pre><code># .pre-commit-config.yaml\nrepos:\n  - repo: https://github.com/Yelp/detect-secrets\n    rev: v1.4.0\n    hooks:\n      - id: detect-secrets\n        args: ['--baseline', '.secrets.baseline']\n</code></pre>"},{"location":"security/security-guidelines/#auditoria-automatica","title":"Auditoria Autom\u00e1tica","text":"<pre><code># No Makefile\nsecurity-audit:\n    pip-audit\n    bandit -r project/\n    safety check\n</code></pre>"},{"location":"security/security-guidelines/#recursos-adicionais","title":"\ud83d\udcda Recursos Adicionais","text":"<ul> <li>OWASP Top 10</li> <li>Django Security</li> <li>12 Factor App</li> <li>Mozilla Security Guidelines</li> </ul> <p>\ud83d\udee1\ufe0f Lembre-se: Seguran\u00e7a \u00e9 responsabilidade de todos. Sempre revise c\u00f3digo em busca de vulnerabilidades antes de fazer commit!</p>"},{"location":"setup/documentation-setup/","title":"Configura\u00e7\u00e3o da Documenta\u00e7\u00e3o com MkDocs e GitHub Pages","text":"<p>Este guia descreve como configurar e gerenciar a documenta\u00e7\u00e3o do projeto usando MkDocs, com o tema Material, e public\u00e1-la no GitHub Pages.</p>"},{"location":"setup/documentation-setup/#1-instalacao-do-mkdocs","title":"1. Instala\u00e7\u00e3o do MkDocs","text":"<p>Certifique-se de ter um ambiente virtual Python ativo (e.g., <code>source venv/bin/activate</code>). Em seguida, instale o MkDocs e o tema Material:</p> <pre><code>pip install mkdocs mkdocs-material\n</code></pre>"},{"location":"setup/documentation-setup/#2-estrutura-da-documentacao","title":"2. Estrutura da Documenta\u00e7\u00e3o","text":"<p>A documenta\u00e7\u00e3o est\u00e1 organizada no diret\u00f3rio <code>docs/</code>. O arquivo principal \u00e9 <code>docs/index.md</code> (que substitui o antigo <code>docs/README.md</code>). Os demais arquivos Markdown est\u00e3o distribu\u00eddos em subdiret\u00f3rios l\u00f3gicos (e.g., <code>architecture/</code>, <code>development/</code>, <code>setup/</code>).</p>"},{"location":"setup/documentation-setup/#3-configuracao-do-mkdocs-mkdocsyml","title":"3. Configura\u00e7\u00e3o do MkDocs (<code>mkdocs.yml</code>)","text":"<p>O arquivo <code>mkdocs.yml</code> na raiz do projeto configura o site da documenta\u00e7\u00e3o. Ele define o nome do site, URL do reposit\u00f3rio, tema, extens\u00f5es Markdown e a estrutura de navega\u00e7\u00e3o (<code>nav</code>).</p> <pre><code>site_name: Django Clean Architecture Base Project\nsite_url: https://your-username.github.io/django_base/ # Atualize com o seu URL\nrepo_url: https://github.com/your-username/django_base/ # Atualize com o seu reposit\u00f3rio\nedit_uri: edit/main/docs/ # Caminho para editar arquivos no GitHub\n\ntheme:\n    name: material\n    features:\n        - navigation.expand\n        - navigation.tabs\n        - navigation.sections\n        - search.highlight\n        - search.suggest\n        - toc.integrate\n        - content.tabs.link\n        - content.code.annotate\n    palette:\n        - scheme: default\n          toggle:\n              icon: material/brightness-7\n              name: Switch to dark mode\n          primary: teal\n          accent: purple\n        - scheme: slate\n          toggle:\n              icon: material/brightness-4\n              name: Switch to light mode\n          primary: teal\n          accent: lime\n\nmarkdown_extensions:\n    # ... (extens\u00f5es configuradas)\n\nnav:\n    # ... (estrutura de navega\u00e7\u00e3o)\n</code></pre> <p>Pontos importantes:</p> <ul> <li>Atualize <code>site_url</code> e <code>repo_url</code> com as informa\u00e7\u00f5es do seu pr\u00f3prio reposit\u00f3rio e URL de publica\u00e7\u00e3o no GitHub Pages.</li> <li>A se\u00e7\u00e3o <code>nav</code> define a hierarquia e os links para todos os seus arquivos Markdown.</li> </ul>"},{"location":"setup/documentation-setup/#4-visualizacao-local-da-documentacao","title":"4. Visualiza\u00e7\u00e3o Local da Documenta\u00e7\u00e3o","text":"<p>Para visualizar a documenta\u00e7\u00e3o antes de public\u00e1-la, execute o servidor de desenvolvimento do MkDocs:</p> <pre><code>mkdocs serve\n</code></pre> <p>Isso iniciar\u00e1 um servidor local, geralmente em <code>http://127.0.0.1:8000</code>. As altera\u00e7\u00f5es nos arquivos Markdown e no <code>mkdocs.yml</code> ser\u00e3o automaticamente recarregadas no navegador.</p>"},{"location":"setup/documentation-setup/#5-publicacao-no-github-pages","title":"5. Publica\u00e7\u00e3o no GitHub Pages","text":"<p>Para publicar a documenta\u00e7\u00e3o no GitHub Pages, o MkDocs usa a ferramenta <code>ghp-import</code> (que j\u00e1 foi instalada como depend\u00eancia).</p> <ol> <li> <p>Gere e Implante a Documenta\u00e7\u00e3o:</p> <pre><code>mkdocs gh-deploy\n</code></pre> <p>Este comando far\u00e1 o seguinte:</p> <ul> <li>Construir\u00e1 o site est\u00e1tico da documenta\u00e7\u00e3o no diret\u00f3rio <code>site/</code>.</li> <li>Criar\u00e1 um branch <code>gh-pages</code> no seu reposit\u00f3rio Git (ou atualizar\u00e1 um existente).</li> <li>Far\u00e1 o push do conte\u00fado do diret\u00f3rio <code>site/</code> para o branch <code>gh-pages</code>.</li> </ul> </li> <li> <p>Configurar GitHub Pages no Reposit\u00f3rio:</p> <p>No seu reposit\u00f3rio GitHub, v\u00e1 em <code>Settings</code> &gt; <code>Pages</code>:</p> <ul> <li>Em <code>Build and deployment</code>, selecione <code>Deploy from a branch</code>.</li> <li>Em <code>Branch</code>, selecione <code>gh-pages</code> e a pasta <code>/ (root)</code>. Salve as altera\u00e7\u00f5es.</li> </ul> <p>Sua documenta\u00e7\u00e3o estar\u00e1 dispon\u00edvel no URL <code>https://your-username.github.io/your-repository-name/</code> (ou <code>https://your-organization.github.io/your-repository-name/</code>). Pode levar alguns minutos para o GitHub Pages construir e publicar o site pela primeira vez.</p> </li> </ol>"},{"location":"setup/documentation-setup/#6-automatizando-a-publicacao-com-github-actions-recomendado","title":"6. Automatizando a Publica\u00e7\u00e3o com GitHub Actions (Recomendado)","text":"<p>Para um fluxo de trabalho de open source eficiente, \u00e9 altamente recomend\u00e1vel automatizar a publica\u00e7\u00e3o da documenta\u00e7\u00e3o sempre que houver um push para o branch <code>main</code> (ou o branch principal que cont\u00e9m seus arquivos de documenta\u00e7\u00e3o).</p> <p>Voc\u00ea pode configurar um GitHub Action para isso. Um exemplo de workflow (<code>.github/workflows/deploy-docs.yml</code>):</p> <pre><code>name: Deploy Docs\n\non:\n    push:\n        branches:\n            - main\n\njobs:\n    deploy:\n        runs-on: ubuntu-latest\n        steps:\n            - uses: actions/checkout@v3\n            - uses: actions/setup-python@v4\n              with:\n                  python-version: 3.11 # Use a vers\u00e3o do seu projeto\n            - run: pip install mkdocs mkdocs-material\n            - run: mkdocs gh-deploy --force\n</code></pre> <p>Este workflow garantir\u00e1 que sua documenta\u00e7\u00e3o esteja sempre atualizada no GitHub Pages ap\u00f3s cada push para o <code>main</code>.</p>"},{"location":"setup/production-complete-guide/","title":"\ud83d\ude80 Guia Completo de Deploy em Produ\u00e7\u00e3o","text":"<p>Este guia abrangente cobre todos os aspectos do deploy do Django Base em produ\u00e7\u00e3o, desde a configura\u00e7\u00e3o inicial at\u00e9 monitoramento e manuten\u00e7\u00e3o.</p>"},{"location":"setup/production-complete-guide/#pre-requisitos-de-producao","title":"\ud83d\udccb Pr\u00e9-requisitos de Produ\u00e7\u00e3o","text":""},{"location":"setup/production-complete-guide/#servidor","title":"Servidor","text":"<ul> <li>Ubuntu 20.04+ / CentOS 8+ (recomendado)</li> <li>4GB RAM m\u00ednimo (8GB+ recomendado)</li> <li>20GB+ de armazenamento SSD</li> <li>Acesso root ou sudo</li> </ul>"},{"location":"setup/production-complete-guide/#dominio-e-ssl","title":"Dom\u00ednio e SSL","text":"<ul> <li>Dom\u00ednio pr\u00f3prio configurado</li> <li>Certificado SSL (Let's Encrypt gratuito)</li> </ul>"},{"location":"setup/production-complete-guide/#servicos-externos","title":"Servi\u00e7os Externos","text":"<ul> <li>PostgreSQL 13+ (banco de dados)</li> <li>Redis 6+ (cache e sess\u00f5es)</li> <li>SMTP (envio de emails)</li> </ul>"},{"location":"setup/production-complete-guide/#arquitetura-de-producao","title":"\ud83c\udfd7\ufe0f Arquitetura de Produ\u00e7\u00e3o","text":"<pre><code>graph TB\n    A[Load Balancer/Nginx] --&gt; B[Gunicorn]\n    B --&gt; C[Django Application]\n    C --&gt; D[PostgreSQL]\n    C --&gt; E[Redis Cache]\n    C --&gt; F[Static Files/CDN]\n    G[Celery Workers] --&gt; E\n    H[Monitoring] --&gt; C\n</code></pre>"},{"location":"setup/production-complete-guide/#deploy-com-docker-recomendado","title":"\ud83d\udc33 Deploy com Docker (Recomendado)","text":""},{"location":"setup/production-complete-guide/#1-preparacao-do-servidor","title":"1. Prepara\u00e7\u00e3o do Servidor","text":"<pre><code># Atualizar sistema\nsudo apt update &amp;&amp; sudo apt upgrade -y\n\n# Instalar Docker\ncurl -fsSL https://get.docker.com -o get-docker.sh\nsudo sh get-docker.sh\nsudo usermod -aG docker $USER\n\n# Instalar Docker Compose\nsudo curl -L \"https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose\nsudo chmod +x /usr/local/bin/docker-compose\n\n# Reiniciar sess\u00e3o para aplicar mudan\u00e7as\nexit\n</code></pre>"},{"location":"setup/production-complete-guide/#2-configuracao-do-projeto","title":"2. Configura\u00e7\u00e3o do Projeto","text":"<pre><code># Clone do projeto\ngit clone https://github.com/seu-usuario/seu-projeto.git\ncd seu-projeto\n\n# Criar arquivo de produ\u00e7\u00e3o\ncp dotenv_files/.env-example .env.prod\n</code></pre>"},{"location":"setup/production-complete-guide/#3-configurar-variaveis-de-ambiente","title":"3. Configurar Vari\u00e1veis de Ambiente","text":"<pre><code># .env.prod\nDEBUG=False\nSECRET_KEY=sua-chave-secreta-super-segura-aqui\nALLOWED_HOSTS=seudominio.com,www.seudominio.com\nDATABASE_URL=postgresql://usuario:senha@db:5432/nome_db\nREDIS_URL=redis://redis:6379/0\nEMAIL_HOST=smtp.gmail.com\nEMAIL_PORT=587\nEMAIL_HOST_USER=seu-email@gmail.com\nEMAIL_HOST_PASSWORD=sua-senha-app\nEMAIL_USE_TLS=True\n</code></pre>"},{"location":"setup/production-complete-guide/#4-deploy-com-docker-compose","title":"4. Deploy com Docker Compose","text":"<pre><code># Iniciar servi\u00e7os de produ\u00e7\u00e3o\nmake docker-prod\n\n# Ou manualmente:\ndocker-compose -f docker-compose.prod.yml up -d --build\n</code></pre>"},{"location":"setup/production-complete-guide/#5-configuracoes-pos-deploy","title":"5. Configura\u00e7\u00f5es P\u00f3s-Deploy","text":"<pre><code># Executar migra\u00e7\u00f5es\ndocker-compose -f docker-compose.prod.yml exec web python manage.py migrate\n\n# Criar superusu\u00e1rio\ndocker-compose -f docker-compose.prod.yml exec web python manage.py createsuperuser\n\n# Coletar arquivos est\u00e1ticos\ndocker-compose -f docker-compose.prod.yml exec web python manage.py collectstatic --noinput\n</code></pre>"},{"location":"setup/production-complete-guide/#deploy-manual-alternativo","title":"\u2699\ufe0f Deploy Manual (Alternativo)","text":""},{"location":"setup/production-complete-guide/#1-preparacao-do-sistema","title":"1. Prepara\u00e7\u00e3o do Sistema","text":"<pre><code># Instalar depend\u00eancias do sistema\nsudo apt update\nsudo apt install -y python3.12 python3.12-venv python3-pip nginx postgresql postgresql-contrib redis-server\n\n# Criar usu\u00e1rio para aplica\u00e7\u00e3o\nsudo adduser django\nsudo usermod -aG sudo django\n</code></pre>"},{"location":"setup/production-complete-guide/#2-configuracao-do-postgresql","title":"2. Configura\u00e7\u00e3o do PostgreSQL","text":"<pre><code># Conectar ao PostgreSQL\nsudo -u postgres psql\n\n-- Criar banco e usu\u00e1rio\nCREATE DATABASE django_prod;\nCREATE USER django_user WITH PASSWORD 'senha_super_segura';\nALTER ROLE django_user SET client_encoding TO 'utf8';\nALTER ROLE django_user SET default_transaction_isolation TO 'read committed';\nALTER ROLE django_user SET timezone TO 'UTC';\nGRANT ALL PRIVILEGES ON DATABASE django_prod TO django_user;\n\\q\n</code></pre>"},{"location":"setup/production-complete-guide/#3-configuracao-da-aplicacao","title":"3. Configura\u00e7\u00e3o da Aplica\u00e7\u00e3o","text":"<pre><code># Mudar para usu\u00e1rio django\nsudo su - django\n\n# Clone e configura\u00e7\u00e3o\ngit clone https://github.com/seu-usuario/seu-projeto.git\ncd seu-projeto\n\n# Ambiente virtual\npython3.12 -m venv venv\nsource venv/bin/activate\n\n# Instalar depend\u00eancias\npip install -r project/requirements.txt\npip install gunicorn psycopg2-binary\n\n# Configurar ambiente\ncp dotenv_files/.env-example .env\n# Editar .env com configura\u00e7\u00f5es de produ\u00e7\u00e3o\n</code></pre>"},{"location":"setup/production-complete-guide/#4-configuracao-do-gunicorn","title":"4. Configura\u00e7\u00e3o do Gunicorn","text":"<pre><code># Criar arquivo de configura\u00e7\u00e3o\ncat &gt; gunicorn.conf.py &lt;&lt; EOF\nbind = \"127.0.0.1:8000\"\nworkers = 3\nworker_class = \"sync\"\nworker_connections = 1000\nmax_requests = 1000\nmax_requests_jitter = 100\ntimeout = 30\nkeepalive = 5\npreload_app = True\nEOF\n</code></pre>"},{"location":"setup/production-complete-guide/#5-configuracao-do-systemd","title":"5. Configura\u00e7\u00e3o do Systemd","text":"<pre><code># Criar service file\nsudo tee /etc/systemd/system/django.service &lt;&lt; EOF\n[Unit]\nDescription=Django Gunicorn daemon\nAfter=network.target\n\n[Service]\nUser=django\nGroup=www-data\nWorkingDirectory=/home/django/seu-projeto/project\nExecStart=/home/django/seu-projeto/venv/bin/gunicorn --config /home/django/seu-projeto/gunicorn.conf.py project.wsgi:application\nExecReload=/bin/kill -s HUP \\$MAINPID\nRestart=always\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\n# Habilitar e iniciar servi\u00e7o\nsudo systemctl daemon-reload\nsudo systemctl enable django\nsudo systemctl start django\n</code></pre>"},{"location":"setup/production-complete-guide/#6-configuracao-do-nginx","title":"6. Configura\u00e7\u00e3o do Nginx","text":"<pre><code># Criar configura\u00e7\u00e3o do site\nsudo tee /etc/nginx/sites-available/django &lt;&lt; EOF\nserver {\n    listen 80;\n    server_name seudominio.com www.seudominio.com;\n\n    location = /favicon.ico { access_log off; log_not_found off; }\n\n    location /static/ {\n        root /home/django/seu-projeto/project;\n        expires 30d;\n        add_header Cache-Control \"public, immutable\";\n    }\n\n    location /media/ {\n        root /home/django/seu-projeto/project;\n        expires 30d;\n        add_header Cache-Control \"public, immutable\";\n    }\n\n    location / {\n        include proxy_params;\n        proxy_pass http://127.0.0.1:8000;\n        proxy_set_header Host \\$host;\n        proxy_set_header X-Real-IP \\$remote_addr;\n        proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto \\$scheme;\n    }\n}\nEOF\n\n# Habilitar site\nsudo ln -s /etc/nginx/sites-available/django /etc/nginx/sites-enabled/\nsudo nginx -t\nsudo systemctl restart nginx\n</code></pre>"},{"location":"setup/production-complete-guide/#configuracao-ssl-com-lets-encrypt","title":"\ud83d\udd12 Configura\u00e7\u00e3o SSL com Let's Encrypt","text":"<pre><code># Instalar Certbot\nsudo apt install certbot python3-certbot-nginx\n\n# Obter certificado SSL\nsudo certbot --nginx -d seudominio.com -d www.seudominio.com\n\n# Testar renova\u00e7\u00e3o autom\u00e1tica\nsudo certbot renew --dry-run\n</code></pre>"},{"location":"setup/production-complete-guide/#monitoramento-e-logs","title":"\ud83d\udcca Monitoramento e Logs","text":""},{"location":"setup/production-complete-guide/#1-configuracao-de-logs","title":"1. Configura\u00e7\u00e3o de Logs","text":"<pre><code># project/settings/production.py\nLOGGING = {\n    'version': 1,\n    'disable_existing_loggers': False,\n    'formatters': {\n        'verbose': {\n            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',\n            'style': '{',\n        },\n    },\n    'handlers': {\n        'file': {\n            'level': 'INFO',\n            'class': 'logging.handlers.RotatingFileHandler',\n            'filename': '/var/log/django/django.log',\n            'maxBytes': 1024*1024*10,  # 10MB\n            'backupCount': 5,\n            'formatter': 'verbose',\n        },\n    },\n    'root': {\n        'handlers': ['file'],\n        'level': 'INFO',\n    },\n}\n</code></pre>"},{"location":"setup/production-complete-guide/#2-monitoramento-com-prometheus-opcional","title":"2. Monitoramento com Prometheus (Opcional)","text":"<pre><code># docker-compose.monitoring.yml\nversion: '3.8'\nservices:\n  prometheus:\n    image: prom/prometheus\n    ports:\n      - \"9090:9090\"\n    volumes:\n      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml\n\n  grafana:\n    image: grafana/grafana\n    ports:\n      - \"3000:3000\"\n    environment:\n      - GF_SECURITY_ADMIN_PASSWORD=admin\n</code></pre>"},{"location":"setup/production-complete-guide/#manutencao-e-backup","title":"\ud83d\udd27 Manuten\u00e7\u00e3o e Backup","text":""},{"location":"setup/production-complete-guide/#1-backup-automatizado","title":"1. Backup Automatizado","text":"<pre><code># Script de backup\ncat &gt; backup.sh &lt;&lt; 'EOF'\n#!/bin/bash\nDATE=$(date +%Y%m%d_%H%M%S)\nBACKUP_DIR=\"/home/django/backups\"\n\n# Criar diret\u00f3rio se n\u00e3o existir\nmkdir -p $BACKUP_DIR\n\n# Backup do banco de dados\npg_dump -h localhost -U django_user django_prod &gt; $BACKUP_DIR/db_backup_$DATE.sql\n\n# Backup dos arquivos de media\ntar -czf $BACKUP_DIR/media_backup_$DATE.tar.gz /home/django/seu-projeto/project/media/\n\n# Manter apenas os \u00faltimos 7 backups\nfind $BACKUP_DIR -name \"*.sql\" -mtime +7 -delete\nfind $BACKUP_DIR -name \"*.tar.gz\" -mtime +7 -delete\n\necho \"Backup conclu\u00eddo: $DATE\"\nEOF\n\nchmod +x backup.sh\n\n# Adicionar ao crontab para execu\u00e7\u00e3o di\u00e1ria\necho \"0 2 * * * /home/django/backup.sh\" | crontab -\n</code></pre>"},{"location":"setup/production-complete-guide/#2-atualizacoes-de-seguranca","title":"2. Atualiza\u00e7\u00f5es de Seguran\u00e7a","text":"<pre><code># Script de atualiza\u00e7\u00e3o\ncat &gt; update.sh &lt;&lt; 'EOF'\n#!/bin/bash\ncd /home/django/seu-projeto\n\n# Backup antes da atualiza\u00e7\u00e3o\n./backup.sh\n\n# Atualizar c\u00f3digo\ngit pull origin main\n\n# Atualizar depend\u00eancias\nsource venv/bin/activate\npip install -r project/requirements.txt\n\n# Executar migra\u00e7\u00f5es\ncd project\npython manage.py migrate\n\n# Coletar arquivos est\u00e1ticos\npython manage.py collectstatic --noinput\n\n# Reiniciar servi\u00e7os\nsudo systemctl restart django\nsudo systemctl reload nginx\n\necho \"Atualiza\u00e7\u00e3o conclu\u00edda\"\nEOF\n\nchmod +x update.sh\n</code></pre>"},{"location":"setup/production-complete-guide/#troubleshooting","title":"\ud83d\udea8 Troubleshooting","text":""},{"location":"setup/production-complete-guide/#problemas-comuns","title":"Problemas Comuns","text":""},{"location":"setup/production-complete-guide/#1-erro-502-bad-gateway","title":"1. Erro 502 Bad Gateway","text":"<pre><code># Verificar status do Gunicorn\nsudo systemctl status django\n\n# Verificar logs\nsudo journalctl -u django -f\n\n# Verificar configura\u00e7\u00e3o do Nginx\nsudo nginx -t\n</code></pre>"},{"location":"setup/production-complete-guide/#2-problemas-de-permissao","title":"2. Problemas de Permiss\u00e3o","text":"<pre><code># Ajustar permiss\u00f5es dos arquivos est\u00e1ticos\nsudo chown -R django:www-data /home/django/seu-projeto/project/static/\nsudo chmod -R 755 /home/django/seu-projeto/project/static/\n</code></pre>"},{"location":"setup/production-complete-guide/#3-problemas-de-banco-de-dados","title":"3. Problemas de Banco de Dados","text":"<pre><code># Verificar conex\u00e3o\nsudo -u postgres psql -c \"SELECT version();\"\n\n# Verificar logs do PostgreSQL\nsudo tail -f /var/log/postgresql/postgresql-13-main.log\n</code></pre>"},{"location":"setup/production-complete-guide/#otimizacoes-de-performance","title":"\ud83d\udcc8 Otimiza\u00e7\u00f5es de Performance","text":""},{"location":"setup/production-complete-guide/#1-cache-com-redis","title":"1. Cache com Redis","text":"<pre><code># settings/production.py\nCACHES = {\n    'default': {\n        'BACKEND': 'django_redis.cache.RedisCache',\n        'LOCATION': 'redis://127.0.0.1:6379/1',\n        'OPTIONS': {\n            'CLIENT_CLASS': 'django_redis.client.DefaultClient',\n        }\n    }\n}\n\nSESSION_ENGINE = 'django.contrib.sessions.backends.cache'\nSESSION_CACHE_ALIAS = 'default'\n</code></pre>"},{"location":"setup/production-complete-guide/#2-configuracao-de-cdn","title":"2. Configura\u00e7\u00e3o de CDN","text":"<pre><code># Para arquivos est\u00e1ticos em CDN\nSTATIC_URL = 'https://cdn.seudominio.com/static/'\nMEDIA_URL = 'https://cdn.seudominio.com/media/'\n</code></pre>"},{"location":"setup/production-complete-guide/#3-otimizacao-do-banco","title":"3. Otimiza\u00e7\u00e3o do Banco","text":"<pre><code>-- \u00cdndices importantes\nCREATE INDEX CONCURRENTLY idx_user_email ON auth_user(email);\nCREATE INDEX CONCURRENTLY idx_created_at ON core_model(created_at);\n</code></pre>"},{"location":"setup/production-complete-guide/#checklist-final","title":"\u2705 Checklist Final","text":"<ul> <li>[ ] Servidor configurado e atualizado</li> <li>[ ] PostgreSQL instalado e configurado</li> <li>[ ] Redis instalado e funcionando</li> <li>[ ] Aplica\u00e7\u00e3o deployada e rodando</li> <li>[ ] Nginx configurado com SSL</li> <li>[ ] Backups automatizados configurados</li> <li>[ ] Monitoramento implementado</li> <li>[ ] Logs configurados</li> <li>[ ] Testes de carga realizados</li> <li>[ ] Documenta\u00e7\u00e3o atualizada</li> </ul> <p>\ud83c\udf89 Parab\u00e9ns! Sua aplica\u00e7\u00e3o Django Base est\u00e1 rodando em produ\u00e7\u00e3o com todas as melhores pr\u00e1ticas implementadas.</p> <p>Para suporte, consulte nossa documenta\u00e7\u00e3o completa ou abra uma issue.</p>"},{"location":"setup/production-setup/","title":"Setup de Produ\u00e7\u00e3o","text":"<p>Este guia detalha como configurar o ambiente de produ\u00e7\u00e3o para o Django Base de forma segura e escal\u00e1vel.</p>"},{"location":"setup/production-setup/#pre-requisitos","title":"\ud83d\udccb Pr\u00e9-requisitos","text":"<ul> <li>Servidor Ubuntu 20.04+ ou CentOS 8+</li> <li>Python 3.12+</li> <li>PostgreSQL 13+</li> <li>Redis 6+</li> <li>Nginx</li> <li>Certificado SSL v\u00e1lido</li> <li>Dom\u00ednio configurado</li> </ul>"},{"location":"setup/production-setup/#configuracao-rapida-com-makefile","title":"\ud83d\ude80 Configura\u00e7\u00e3o R\u00e1pida com Makefile","text":"<pre><code># Clone o reposit\u00f3rio\ngit clone https://github.com/luderibeiro/django_base.git\ncd django_base\n\n# Configure o ambiente de produ\u00e7\u00e3o\nmake prod-setup\n</code></pre>"},{"location":"setup/production-setup/#configuracao-manual","title":"\u2699\ufe0f Configura\u00e7\u00e3o Manual","text":""},{"location":"setup/production-setup/#1-preparar-o-servidor","title":"1. Preparar o Servidor","text":"<pre><code># Atualizar sistema\nsudo apt update &amp;&amp; sudo apt upgrade -y\n\n# Instalar depend\u00eancias\nsudo apt install -y python3.12 python3.12-venv python3.12-dev \\\n    postgresql postgresql-contrib redis-server nginx \\\n    git curl wget build-essential libpq-dev\n\n# Criar usu\u00e1rio para a aplica\u00e7\u00e3o\nsudo adduser --system --group --shell /bin/bash django\nsudo mkdir -p /opt/django_base\nsudo chown django:django /opt/django_base\n</code></pre>"},{"location":"setup/production-setup/#2-configurar-postgresql","title":"2. Configurar PostgreSQL","text":"<pre><code># Conectar ao PostgreSQL\nsudo -u postgres psql\n\n# Criar banco de dados e usu\u00e1rio\nCREATE DATABASE django_base_prod;\nCREATE USER django_user WITH PASSWORD 'senha-super-segura-e-complexa';\nGRANT ALL PRIVILEGES ON DATABASE django_base_prod TO django_user;\nALTER USER django_user CREATEDB;\n\\q\n\n# Configurar PostgreSQL para produ\u00e7\u00e3o\nsudo nano /etc/postgresql/15/main/postgresql.conf\n</code></pre> <p>Configura\u00e7\u00f5es importantes no <code>postgresql.conf</code>:</p> <pre><code># Configura\u00e7\u00f5es de performance\nshared_buffers = 256MB\neffective_cache_size = 1GB\nmaintenance_work_mem = 64MB\ncheckpoint_completion_target = 0.9\nwal_buffers = 16MB\ndefault_statistics_target = 100\n\n# Configura\u00e7\u00f5es de conex\u00e3o\nmax_connections = 100\nlisten_addresses = 'localhost'\n\n# Logging\nlog_destination = 'stderr'\nlogging_collector = on\nlog_directory = '/var/log/postgresql'\nlog_filename = 'postgresql-%Y-%m-%d_%H%M%S.log'\nlog_rotation_age = 1d\nlog_rotation_size = 100MB\nlog_min_duration_statement = 1000\nlog_line_prefix = '%t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h '\n</code></pre> <pre><code># Reiniciar PostgreSQL\nsudo systemctl restart postgresql\nsudo systemctl enable postgresql\n</code></pre>"},{"location":"setup/production-setup/#3-configurar-redis","title":"3. Configurar Redis","text":"<pre><code># Configurar Redis\nsudo nano /etc/redis/redis.conf\n</code></pre> <p>Configura\u00e7\u00f5es importantes:</p> <pre><code># Configura\u00e7\u00f5es de seguran\u00e7a\nbind 127.0.0.1\nprotected-mode yes\nrequirepass senha-redis-super-segura\n\n# Configura\u00e7\u00f5es de performance\nmaxmemory 256mb\nmaxmemory-policy allkeys-lru\n\n# Persist\u00eancia\nsave 900 1\nsave 300 10\nsave 60 10000\n</code></pre> <pre><code># Reiniciar Redis\nsudo systemctl restart redis-server\nsudo systemctl enable redis-server\n</code></pre>"},{"location":"setup/production-setup/#4-deploy-da-aplicacao","title":"4. Deploy da Aplica\u00e7\u00e3o","text":"<pre><code># Clonar reposit\u00f3rio\nsudo -u django git clone https://github.com/luderibeiro/django_base.git /opt/django_base\ncd /opt/django_base\n\n# Criar ambiente virtual\nsudo -u django python3.12 -m venv venv\nsudo -u django ./venv/bin/pip install --upgrade pip\nsudo -u django ./venv/bin/pip install -r project/requirements.txt\nsudo -u django ./venv/bin/pip install gunicorn psycopg2-binary\n</code></pre>"},{"location":"setup/production-setup/#5-configurar-variaveis-de-ambiente","title":"5. Configurar Vari\u00e1veis de Ambiente","text":"<pre><code># Criar arquivo de ambiente\nsudo -u django nano /opt/django_base/.env\n</code></pre> <p>Conte\u00fado do <code>.env</code>:</p> <pre><code># Configura\u00e7\u00f5es Django\nDEBUG=False\nSECRET_KEY=sua-chave-secreta-super-segura-e-complexa-aqui\nALLOWED_HOSTS=seudominio.com,www.seudominio.com\n\n# Banco de dados\nDB_ENGINE=django.db.backends.postgresql\nPOSTGRES_DB=django_base_prod\nPOSTGRES_USER=django_user\nPOSTGRES_PASSWORD=senha-super-segura-e-complexa\nPOSTGRES_HOST=localhost\nPOSTGRES_PORT=5432\n\n# Redis\nREDIS_URL=redis://:senha-redis-super-segura@localhost:6379/0\n\n# Email\nEMAIL_HOST=smtp.gmail.com\nEMAIL_PORT=587\nEMAIL_USE_TLS=True\nEMAIL_HOST_USER=seu-email@gmail.com\nEMAIL_HOST_PASSWORD=sua-senha-de-app\n\n# Logging\nLOG_LEVEL=WARNING\nLOG_FILE=/var/log/django_base/production.log\n\n# Seguran\u00e7a\nSECURE_SSL_REDIRECT=True\nSECURE_HSTS_SECONDS=31536000\nSECURE_HSTS_INCLUDE_SUBDOMAINS=True\nSECURE_HSTS_PRELOAD=True\nSECURE_CONTENT_TYPE_NOSNIFF=True\nSECURE_BROWSER_XSS_FILTER=True\nX_FRAME_OPTIONS=DENY\n</code></pre>"},{"location":"setup/production-setup/#6-configurar-settings-para-producao","title":"6. Configurar Settings para Produ\u00e7\u00e3o","text":"<p>Crie o arquivo <code>project/project/settings_production.py</code>:</p> <pre><code>import os\nfrom .settings import *\n\n# Configura\u00e7\u00f5es espec\u00edficas para produ\u00e7\u00e3o\nDEBUG = False\nALLOWED_HOSTS = os.environ.get('ALLOWED_HOSTS', '').split(',')\n\n# Banco de dados PostgreSQL\nDATABASES = {\n    'default': {\n        'ENGINE': os.environ.get('DB_ENGINE', 'django.db.backends.postgresql'),\n        'NAME': os.environ.get('POSTGRES_DB', 'django_base_prod'),\n        'USER': os.environ.get('POSTGRES_USER', 'django_user'),\n        'PASSWORD': os.environ.get('POSTGRES_PASSWORD', ''),\n        'HOST': os.environ.get('POSTGRES_HOST', 'localhost'),\n        'PORT': os.environ.get('POSTGRES_PORT', '5432'),\n        'OPTIONS': {\n            'sslmode': 'require',\n        },\n    }\n}\n\n# Cache com Redis\nCACHES = {\n    'default': {\n        'BACKEND': 'django_redis.cache.RedisCache',\n        'LOCATION': os.environ.get('REDIS_URL', 'redis://localhost:6379/0'),\n        'OPTIONS': {\n            'CLIENT_CLASS': 'django_redis.client.DefaultClient',\n        }\n    }\n}\n\n# Sess\u00f5es com Redis\nSESSION_ENGINE = 'django.contrib.sessions.backends.cache'\nSESSION_CACHE_ALIAS = 'default'\n\n# Logging para produ\u00e7\u00e3o\nLOGGING = {\n    'version': 1,\n    'disable_existing_loggers': False,\n    'formatters': {\n        'verbose': {\n            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',\n            'style': '{',\n        },\n        'simple': {\n            'format': '{levelname} {message}',\n            'style': '{',\n        },\n    },\n    'handlers': {\n        'file': {\n            'level': 'WARNING',\n            'class': 'logging.handlers.RotatingFileHandler',\n            'filename': os.environ.get('LOG_FILE', '/var/log/django_base/production.log'),\n            'maxBytes': 15728640,  # 15MB\n            'backupCount': 10,\n            'formatter': 'verbose',\n        },\n        'console': {\n            'level': 'ERROR',\n            'class': 'logging.StreamHandler',\n            'formatter': 'simple',\n        },\n    },\n    'root': {\n        'handlers': ['file', 'console'],\n        'level': 'WARNING',\n    },\n    'loggers': {\n        'django': {\n            'handlers': ['file', 'console'],\n            'level': 'WARNING',\n            'propagate': False,\n        },\n    },\n}\n\n# Configura\u00e7\u00f5es de seguran\u00e7a\nSECURE_SSL_REDIRECT = os.environ.get('SECURE_SSL_REDIRECT', 'True').lower() == 'true'\nSECURE_HSTS_SECONDS = int(os.environ.get('SECURE_HSTS_SECONDS', 31536000))\nSECURE_HSTS_INCLUDE_SUBDOMAINS = os.environ.get('SECURE_HSTS_INCLUDE_SUBDOMAINS', 'True').lower() == 'true'\nSECURE_HSTS_PRELOAD = os.environ.get('SECURE_HSTS_PRELOAD', 'True').lower() == 'true'\nSECURE_CONTENT_TYPE_NOSNIFF = True\nSECURE_BROWSER_XSS_FILTER = True\nX_FRAME_OPTIONS = 'DENY'\nSECURE_REFERRER_POLICY = 'strict-origin-when-cross-origin'\n\n# Email\nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\nEMAIL_HOST = os.environ.get('EMAIL_HOST')\nEMAIL_PORT = int(os.environ.get('EMAIL_PORT', 587))\nEMAIL_USE_TLS = os.environ.get('EMAIL_USE_TLS', 'True').lower() == 'true'\nEMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER')\nEMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD')\n\n# Arquivos est\u00e1ticos e m\u00eddia\nSTATIC_ROOT = '/opt/django_base/staticfiles'\nMEDIA_ROOT = '/opt/django_base/media'\n\n# Configura\u00e7\u00f5es de performance\nCONN_MAX_AGE = 60\n</code></pre>"},{"location":"setup/production-setup/#7-executar-configuracoes-iniciais","title":"7. Executar Configura\u00e7\u00f5es Iniciais","text":"<pre><code># Ativar ambiente virtual\nsudo -u django bash -c \"cd /opt/django_base &amp;&amp; source venv/bin/activate &amp;&amp; export DJANGO_SETTINGS_MODULE=project.settings_production &amp;&amp; cd project &amp;&amp; python manage.py migrate\"\n\n# Criar superusu\u00e1rio\nsudo -u django bash -c \"cd /opt/django_base &amp;&amp; source venv/bin/activate &amp;&amp; export DJANGO_SETTINGS_MODULE=project.settings_production &amp;&amp; cd project &amp;&amp; python manage.py createsuperuser\"\n\n# Coletar arquivos est\u00e1ticos\nsudo -u django bash -c \"cd /opt/django_base &amp;&amp; source venv/bin/activate &amp;&amp; export DJANGO_SETTINGS_MODULE=project.settings_production &amp;&amp; cd project &amp;&amp; python manage.py collectstatic --noinput\"\n</code></pre>"},{"location":"setup/production-setup/#8-configurar-gunicorn","title":"8. Configurar Gunicorn","text":"<p>Crie o arquivo <code>/opt/django_base/gunicorn.conf.py</code>:</p> <pre><code># Gunicorn configuration file\nimport multiprocessing\n\nbind = \"127.0.0.1:8000\"\nworkers = multiprocessing.cpu_count() * 2 + 1\nworker_class = \"sync\"\nworker_connections = 1000\ntimeout = 30\nkeepalive = 2\nmax_requests = 1000\nmax_requests_jitter = 100\npreload_app = True\naccesslog = \"/var/log/django_base/gunicorn_access.log\"\nerrorlog = \"/var/log/django_base/gunicorn_error.log\"\nloglevel = \"warning\"\naccess_log_format = '%(h)s %(l)s %(u)s %(t)s \"%(r)s\" %(s)s %(b)s \"%(f)s\" \"%(a)s\" %(D)s'\n</code></pre>"},{"location":"setup/production-setup/#9-configurar-systemd-service","title":"9. Configurar Systemd Service","text":"<p>Crie o arquivo <code>/etc/systemd/system/django-base.service</code>:</p> <pre><code>[Unit]\nDescription=Django Base Production\nAfter=network.target postgresql.service redis.service\n\n[Service]\nType=notify\nUser=django\nGroup=django\nWorkingDirectory=/opt/django_base\nEnvironment=DJANGO_SETTINGS_MODULE=project.settings_production\nExecStart=/opt/django_base/venv/bin/gunicorn --config gunicorn.conf.py project.wsgi:application\nExecReload=/bin/kill -s HUP $MAINPID\nRestart=always\nRestartSec=3\nKillMode=mixed\nTimeoutStopSec=30\n\n[Install]\nWantedBy=multi-user.target\n</code></pre> <pre><code># Ativar servi\u00e7o\nsudo systemctl daemon-reload\nsudo systemctl enable django-base\nsudo systemctl start django-base\n</code></pre>"},{"location":"setup/production-setup/#10-configurar-nginx","title":"10. Configurar Nginx","text":"<p>Crie o arquivo <code>/etc/nginx/sites-available/django_base</code>:</p> <pre><code># Rate limiting\nlimit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;\nlimit_req_zone $binary_remote_addr zone=login:10m rate=5r/m;\n\n# Upstream\nupstream django_base {\n    server 127.0.0.1:8000;\n}\n\n# Redirect HTTP to HTTPS\nserver {\n    listen 80;\n    server_name seudominio.com www.seudominio.com;\n    return 301 https://$server_name$request_uri;\n}\n\n# HTTPS server\nserver {\n    listen 443 ssl http2;\n    server_name seudominio.com www.seudominio.com;\n\n    # SSL configuration\n    ssl_certificate /etc/ssl/certs/seudominio.com.crt;\n    ssl_certificate_key /etc/ssl/private/seudominio.com.key;\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;\n    ssl_prefer_server_ciphers off;\n    ssl_session_cache shared:SSL:10m;\n    ssl_session_timeout 10m;\n\n    # Security headers\n    add_header Strict-Transport-Security \"max-age=31536000; includeSubDomains; preload\" always;\n    add_header X-Content-Type-Options nosniff always;\n    add_header X-Frame-Options DENY always;\n    add_header X-XSS-Protection \"1; mode=block\" always;\n    add_header Referrer-Policy \"strict-origin-when-cross-origin\" always;\n\n    # Gzip compression\n    gzip on;\n    gzip_vary on;\n    gzip_min_length 1024;\n    gzip_proxied any;\n    gzip_comp_level 6;\n    gzip_types\n        text/plain\n        text/css\n        text/xml\n        text/javascript\n        application/json\n        application/javascript\n        application/xml+rss\n        application/atom+xml\n        image/svg+xml;\n\n    # Static files\n    location /static/ {\n        alias /opt/django_base/staticfiles/;\n        expires 1y;\n        add_header Cache-Control \"public, immutable\";\n        access_log off;\n    }\n\n    # Media files\n    location /media/ {\n        alias /opt/django_base/media/;\n        expires 1y;\n        add_header Cache-Control \"public, immutable\";\n        access_log off;\n    }\n\n    # API endpoints with rate limiting\n    location /api/ {\n        limit_req zone=api burst=20 nodelay;\n        proxy_pass http://django_base;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_redirect off;\n    }\n\n    # Login endpoint with stricter rate limiting\n    location /api/v1/auth/login/ {\n        limit_req zone=login burst=5 nodelay;\n        proxy_pass http://django_base;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_redirect off;\n    }\n\n    # Main application\n    location / {\n        proxy_pass http://django_base;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_redirect off;\n    }\n}\n</code></pre> <pre><code># Ativar site\nsudo ln -s /etc/nginx/sites-available/django_base /etc/nginx/sites-enabled/\nsudo nginx -t\nsudo systemctl reload nginx\n</code></pre>"},{"location":"setup/production-setup/#11-configurar-ssl-com-lets-encrypt","title":"11. Configurar SSL com Let's Encrypt","text":"<pre><code># Instalar Certbot\nsudo apt install -y certbot python3-certbot-nginx\n\n# Obter certificado\nsudo certbot --nginx -d seudominio.com -d www.seudominio.com\n\n# Configurar renova\u00e7\u00e3o autom\u00e1tica\nsudo crontab -e\n</code></pre> <p>Adicionar ao crontab:</p> <pre><code># Renovar certificados automaticamente\n0 12 * * * /usr/bin/certbot renew --quiet\n</code></pre>"},{"location":"setup/production-setup/#configuracao-com-docker","title":"\ud83d\udc33 Configura\u00e7\u00e3o com Docker","text":""},{"location":"setup/production-setup/#1-docker-compose-para-producao","title":"1. Docker Compose para Produ\u00e7\u00e3o","text":"<p>Crie o arquivo <code>docker-compose.prod.yml</code>:</p> <pre><code>version: '3.8'\n\nservices:\n  db:\n    image: postgres:15\n    environment:\n      POSTGRES_DB: django_base_prod\n      POSTGRES_USER: django_user\n      POSTGRES_PASSWORD: senha-super-segura-e-complexa\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n    restart: unless-stopped\n    networks:\n      - django_network\n\n  redis:\n    image: redis:7-alpine\n    command: redis-server --requirepass senha-redis-super-segura\n    volumes:\n      - redis_data:/data\n    restart: unless-stopped\n    networks:\n      - django_network\n\n  web:\n    build: .\n    command: gunicorn project.wsgi:application --config gunicorn.conf.py\n    environment:\n      - DJANGO_SETTINGS_MODULE=project.settings_production\n      - DEBUG=False\n      - SECRET_KEY=sua-chave-secreta-super-segura-e-complexa\n      - ALLOWED_HOSTS=seudominio.com,www.seudominio.com\n      - POSTGRES_DB=django_base_prod\n      - POSTGRES_USER=django_user\n      - POSTGRES_PASSWORD=senha-super-segura-e-complexa\n      - POSTGRES_HOST=db\n      - REDIS_URL=redis://:senha-redis-super-segura@redis:6379/0\n    volumes:\n      - static_volume:/app/staticfiles\n      - media_volume:/app/media\n    depends_on:\n      - db\n      - redis\n    restart: unless-stopped\n    networks:\n      - django_network\n\n  nginx:\n    image: nginx:alpine\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n    volumes:\n      - ./nginx/production.conf:/etc/nginx/conf.d/default.conf\n      - static_volume:/app/staticfiles\n      - media_volume:/app/media\n      - ./ssl:/etc/nginx/ssl\n    depends_on:\n      - web\n    restart: unless-stopped\n    networks:\n      - django_network\n\nvolumes:\n  postgres_data:\n  redis_data:\n  static_volume:\n  media_volume:\n\nnetworks:\n  django_network:\n    driver: bridge\n</code></pre>"},{"location":"setup/production-setup/#2-executar-com-docker","title":"2. Executar com Docker","text":"<pre><code># Construir e executar\ndocker-compose -f docker-compose.prod.yml up --build -d\n\n# Executar migra\u00e7\u00f5es\ndocker-compose -f docker-compose.prod.yml exec web python manage.py migrate\n\n# Criar superusu\u00e1rio\ndocker-compose -f docker-compose.prod.yml exec web python manage.py createsuperuser\n\n# Coletar arquivos est\u00e1ticos\ndocker-compose -f docker-compose.prod.yml exec web python manage.py collectstatic --noinput\n</code></pre>"},{"location":"setup/production-setup/#seguranca","title":"\ud83d\udd12 Seguran\u00e7a","text":""},{"location":"setup/production-setup/#1-firewall","title":"1. Firewall","text":"<pre><code># Configurar UFW\nsudo ufw default deny incoming\nsudo ufw default allow outgoing\nsudo ufw allow ssh\nsudo ufw allow 80/tcp\nsudo ufw allow 443/tcp\nsudo ufw enable\n</code></pre>"},{"location":"setup/production-setup/#2-fail2ban","title":"2. Fail2Ban","text":"<pre><code># Instalar Fail2Ban\nsudo apt install -y fail2ban\n\n# Configurar\nsudo nano /etc/fail2ban/jail.local\n</code></pre> <pre><code>[DEFAULT]\nbantime = 3600\nfindtime = 600\nmaxretry = 3\n\n[sshd]\nenabled = true\nport = ssh\nlogpath = /var/log/auth.log\n\n[nginx-http-auth]\nenabled = true\nfilter = nginx-http-auth\nport = http,https\nlogpath = /var/log/nginx/error.log\n\n[nginx-limit-req]\nenabled = true\nfilter = nginx-limit-req\nport = http,https\nlogpath = /var/log/nginx/error.log\nmaxretry = 10\n</code></pre>"},{"location":"setup/production-setup/#3-backup-automatico","title":"3. Backup Autom\u00e1tico","text":"<p>Crie o script <code>/usr/local/bin/backup_django_base_prod.sh</code>:</p> <pre><code>#!/bin/bash\nBACKUP_DIR=\"/var/backups/django_base_prod\"\nDATE=$(date +%Y%m%d_%H%M%S)\nRETENTION_DAYS=30\n\n# Criar diret\u00f3rio de backup\nmkdir -p $BACKUP_DIR\n\n# Backup do banco de dados\npg_dump -h localhost -U django_user django_base_prod &gt; $BACKUP_DIR/db_$DATE.sql\n\n# Backup dos arquivos de m\u00eddia\ntar -czf $BACKUP_DIR/media_$DATE.tar.gz /opt/django_base/media/\n\n# Backup dos arquivos est\u00e1ticos\ntar -czf $BACKUP_DIR/static_$DATE.tar.gz /opt/django_base/staticfiles/\n\n# Backup das configura\u00e7\u00f5es\ntar -czf $BACKUP_DIR/config_$DATE.tar.gz /opt/django_base/.env /opt/django_base/gunicorn.conf.py\n\n# Upload para S3 (opcional)\n# aws s3 cp $BACKUP_DIR/db_$DATE.sql s3://seu-bucket/backups/\n# aws s3 cp $BACKUP_DIR/media_$DATE.tar.gz s3://seu-bucket/backups/\n# aws s3 cp $BACKUP_DIR/static_$DATE.tar.gz s3://seu-bucket/backups/\n# aws s3 cp $BACKUP_DIR/config_$DATE.tar.gz s3://seu-bucket/backups/\n\n# Manter apenas os \u00faltimos backups\nfind $BACKUP_DIR -name \"*.sql\" -mtime +$RETENTION_DAYS -delete\nfind $BACKUP_DIR -name \"*.tar.gz\" -mtime +$RETENTION_DAYS -delete\n\necho \"Backup conclu\u00eddo: $DATE\"\n</code></pre> <pre><code># Tornar execut\u00e1vel\nsudo chmod +x /usr/local/bin/backup_django_base_prod.sh\n\n# Agendar no crontab\nsudo crontab -e\n</code></pre> <pre><code># Executar backup diariamente \u00e0s 3:00\n0 3 * * * /usr/local/bin/backup_django_base_prod.sh\n</code></pre>"},{"location":"setup/production-setup/#monitoramento","title":"\ud83d\udcca Monitoramento","text":""},{"location":"setup/production-setup/#1-health-check","title":"1. Health Check","text":"<p>Crie o endpoint em <code>project/core/views/health.py</code>:</p> <pre><code>from django.http import JsonResponse\nfrom django.db import connection\nfrom django.core.cache import cache\nimport redis\nimport psutil\nimport os\n\ndef health_check(request):\n    \"\"\"Endpoint para verificar a sa\u00fade da aplica\u00e7\u00e3o\"\"\"\n    try:\n        # Verificar banco de dados\n        with connection.cursor() as cursor:\n            cursor.execute(\"SELECT 1\")\n\n        # Verificar cache\n        cache.set('health_check', 'ok', 10)\n        cache.get('health_check')\n\n        # Verificar Redis\n        r = redis.Redis.from_url(settings.CACHES['default']['LOCATION'])\n        r.ping()\n\n        # Verificar espa\u00e7o em disco\n        disk_usage = psutil.disk_usage('/')\n        disk_free_percent = (disk_usage.free / disk_usage.total) * 100\n\n        # Verificar mem\u00f3ria\n        memory = psutil.virtual_memory()\n        memory_available_percent = memory.available / memory.total * 100\n\n        return JsonResponse({\n            'status': 'healthy',\n            'database': 'ok',\n            'cache': 'ok',\n            'redis': 'ok',\n            'disk_free_percent': round(disk_free_percent, 2),\n            'memory_available_percent': round(memory_available_percent, 2),\n            'uptime': os.popen('uptime -p').read().strip()\n        })\n    except Exception as e:\n        return JsonResponse({\n            'status': 'unhealthy',\n            'error': str(e)\n        }, status=500)\n</code></pre>"},{"location":"setup/production-setup/#2-logs-de-monitoramento","title":"2. Logs de Monitoramento","text":"<pre><code># Monitorar logs em tempo real\nsudo tail -f /var/log/django_base/production.log\n\n# Filtrar erros\nsudo grep \"ERROR\" /var/log/django_base/production.log\n\n# Estat\u00edsticas de acesso\nsudo awk '{print $1}' /var/log/nginx/access.log | sort | uniq -c | sort -nr\n\n# Monitorar performance\nsudo htop\nsudo iotop\nsudo nethogs\n</code></pre>"},{"location":"setup/production-setup/#3-alertas-automaticos","title":"3. Alertas Autom\u00e1ticos","text":"<p>Crie o script <code>/usr/local/bin/monitor_django_base.sh</code>:</p> <pre><code>#!/bin/bash\nLOG_FILE=\"/var/log/django_base/monitor.log\"\nALERT_EMAIL=\"admin@seudominio.com\"\n\n# Verificar se a aplica\u00e7\u00e3o est\u00e1 respondendo\nif ! curl -f -s http://localhost:8000/health/ &gt; /dev/null; then\n    echo \"$(date): Aplica\u00e7\u00e3o n\u00e3o est\u00e1 respondendo\" &gt;&gt; $LOG_FILE\n    echo \"Aplica\u00e7\u00e3o Django Base n\u00e3o est\u00e1 respondendo em $(date)\" | mail -s \"ALERTA: Django Base Down\" $ALERT_EMAIL\nfi\n\n# Verificar espa\u00e7o em disco\nDISK_USAGE=$(df / | awk 'NR==2 {print $5}' | sed 's/%//')\nif [ $DISK_USAGE -gt 80 ]; then\n    echo \"$(date): Espa\u00e7o em disco baixo: ${DISK_USAGE}%\" &gt;&gt; $LOG_FILE\n    echo \"Espa\u00e7o em disco baixo: ${DISK_USAGE}% em $(date)\" | mail -s \"ALERTA: Espa\u00e7o em Disco Baixo\" $ALERT_EMAIL\nfi\n\n# Verificar mem\u00f3ria\nMEMORY_USAGE=$(free | awk 'NR==2{printf \"%.0f\", $3*100/$2}')\nif [ $MEMORY_USAGE -gt 90 ]; then\n    echo \"$(date): Uso de mem\u00f3ria alto: ${MEMORY_USAGE}%\" &gt;&gt; $LOG_FILE\n    echo \"Uso de mem\u00f3ria alto: ${MEMORY_USAGE}% em $(date)\" | mail -s \"ALERTA: Uso de Mem\u00f3ria Alto\" $ALERT_EMAIL\nfi\n</code></pre> <pre><code># Tornar execut\u00e1vel\nsudo chmod +x /usr/local/bin/monitor_django_base.sh\n\n# Agendar no crontab\nsudo crontab -e\n</code></pre> <pre><code># Executar monitoramento a cada 5 minutos\n*/5 * * * * /usr/local/bin/monitor_django_base.sh\n</code></pre>"},{"location":"setup/production-setup/#comandos-uteis","title":"\ud83d\udd27 Comandos \u00dateis","text":"<pre><code># Verificar status dos servi\u00e7os\nsudo systemctl status django-base\nsudo systemctl status postgresql\nsudo systemctl status redis-server\nsudo systemctl status nginx\n\n# Reiniciar servi\u00e7os\nsudo systemctl restart django-base\nsudo systemctl restart postgresql\nsudo systemctl restart redis-server\nsudo systemctl restart nginx\n\n# Ver logs\nsudo journalctl -u django-base -f\nsudo tail -f /var/log/django_base/production.log\nsudo tail -f /var/log/nginx/access.log\nsudo tail -f /var/log/nginx/error.log\n\n# Backup manual\nsudo /usr/local/bin/backup_django_base_prod.sh\n\n# Restaurar backup\nsudo -u postgres psql django_base_prod &lt; /var/backups/django_base_prod/db_20240101_120000.sql\n\n# Verificar certificados SSL\nsudo certbot certificates\n\n# Renovar certificados\nsudo certbot renew --dry-run\nsudo certbot renew\n</code></pre>"},{"location":"setup/production-setup/#checklist-de-producao","title":"\u2705 Checklist de Produ\u00e7\u00e3o","text":"<ul> <li>[ ] Servidor configurado e atualizado</li> <li>[ ] PostgreSQL configurado e otimizado</li> <li>[ ] Redis configurado e otimizado</li> <li>[ ] Aplica\u00e7\u00e3o deployada</li> <li>[ ] Vari\u00e1veis de ambiente configuradas</li> <li>[ ] Migra\u00e7\u00f5es executadas</li> <li>[ ] Superusu\u00e1rio criado</li> <li>[ ] Arquivos est\u00e1ticos coletados</li> <li>[ ] Gunicorn configurado</li> <li>[ ] Systemd service configurado</li> <li>[ ] Nginx configurado e otimizado</li> <li>[ ] SSL configurado</li> <li>[ ] Firewall configurado</li> <li>[ ] Fail2Ban configurado</li> <li>[ ] Backup autom\u00e1tico configurado</li> <li>[ ] Monitoramento configurado</li> <li>[ ] Alertas configurados</li> <li>[ ] Testes executados</li> <li>[ ] Health check funcionando</li> <li>[ ] Logs configurados</li> </ul>"},{"location":"setup/production-setup/#solucao-de-problemas","title":"\ud83c\udd98 Solu\u00e7\u00e3o de Problemas","text":""},{"location":"setup/production-setup/#problema-aplicacao-nao-inicia","title":"Problema: Aplica\u00e7\u00e3o n\u00e3o inicia","text":"<pre><code># Verificar logs\nsudo journalctl -u django-base -f\n\n# Verificar configura\u00e7\u00f5es\nsudo -u django bash -c \"cd /opt/django_base &amp;&amp; source venv/bin/activate &amp;&amp; export DJANGO_SETTINGS_MODULE=project.settings_production &amp;&amp; cd project &amp;&amp; python manage.py check\"\n</code></pre>"},{"location":"setup/production-setup/#problema-erro-de-banco-de-dados","title":"Problema: Erro de banco de dados","text":"<pre><code># Verificar conex\u00e3o\nsudo -u postgres psql -c \"SELECT 1\"\n\n# Verificar logs do PostgreSQL\nsudo tail -f /var/log/postgresql/postgresql-15-main.log\n</code></pre>"},{"location":"setup/production-setup/#problema-erro-de-ssl","title":"Problema: Erro de SSL","text":"<pre><code># Verificar certificados\nsudo certbot certificates\n\n# Testar SSL\nopenssl s_client -connect seudominio.com:443\n</code></pre>"},{"location":"setup/production-setup/#problema-performance-baixa","title":"Problema: Performance baixa","text":"<pre><code># Verificar recursos\nhtop\niotop\nnethogs\n\n# Verificar logs de acesso\nsudo tail -f /var/log/nginx/access.log\n\n# Verificar configura\u00e7\u00f5es do Gunicorn\nsudo nano /opt/django_base/gunicorn.conf.py\n</code></pre> <p>\ud83c\udf89 Parab\u00e9ns! Seu ambiente de produ\u00e7\u00e3o est\u00e1 configurado e pronto para receber usu\u00e1rios!</p>"},{"location":"setup/project-setup/","title":"Configura\u00e7\u00e3o do Projeto","text":"<p>Este guia descreve como configurar e rodar o projeto localmente.</p>"},{"location":"setup/project-setup/#requisitos","title":"Requisitos","text":"<ul> <li>Docker e Docker Compose instalados.</li> <li>Python 3.11 ou superior (se for rodar sem Docker para desenvolvimento local).</li> </ul>"},{"location":"setup/project-setup/#configuracao-com-docker-compose-recomendado","title":"Configura\u00e7\u00e3o com Docker Compose (Recomendado)","text":"<p>A maneira mais f\u00e1cil e recomendada de configurar o projeto \u00e9 usando Docker Compose, com arquivos de configura\u00e7\u00e3o separados para desenvolvimento e produ\u00e7\u00e3o.</p>"},{"location":"setup/project-setup/#1-ambiente-de-desenvolvimento","title":"1. Ambiente de Desenvolvimento","text":"<p>Utilize o <code>Dockerfile.dev</code> e o <code>docker-compose.dev.yml</code> para um ambiente de desenvolvimento com hot-reload.</p> <ol> <li> <p>Construir e Iniciar os Servi\u00e7os de Desenvolvimento:</p> <p>Navegue at\u00e9 a raiz do projeto e execute:</p> <pre><code>docker compose -f docker-compose.dev.yml up --build\n</code></pre> <p>Este comando construir\u00e1 a imagem Docker de desenvolvimento (<code>Dockerfile.dev</code>) e iniciar\u00e1 os servi\u00e7os definidos no <code>docker-compose.dev.yml</code> (servidor Django, banco de dados PostgreSQL, etc.).</p> </li> <li> <p>Executar Migra\u00e7\u00f5es do Banco de Dados:</p> <p>Ap\u00f3s os servi\u00e7os iniciarem, execute as migra\u00e7\u00f5es para configurar o banco de dados:</p> <pre><code>docker compose -f docker-compose.dev.yml exec project_dev python /app/project/manage.py migrate\n</code></pre> </li> <li> <p>Criar um Superusu\u00e1rio (Admin):</p> <p>Para acessar o painel de administra\u00e7\u00e3o do Django, crie um superusu\u00e1rio:</p> <pre><code>docker compose -f docker-compose.dev.yml exec project_dev python /app/project/manage.py createsuperuser\n</code></pre> <p>Siga as instru\u00e7\u00f5es no terminal para criar o usu\u00e1rio.</p> </li> <li> <p>Acessar a Aplica\u00e7\u00e3o:</p> <ul> <li>A API estar\u00e1 dispon\u00edvel em <code>http://localhost:8000/v1/</code>.</li> <li>O painel de administra\u00e7\u00e3o do Django estar\u00e1 em <code>http://localhost:8000/admin/</code>.</li> </ul> </li> </ol>"},{"location":"setup/project-setup/#2-ambiente-de-producao","title":"2. Ambiente de Produ\u00e7\u00e3o","text":"<p>Para simular o ambiente de produ\u00e7\u00e3o localmente ou preparar para o deploy, utilize o <code>Dockerfile</code> principal (otimizado para produ\u00e7\u00e3o) e o <code>docker-compose.prod.yml</code>.</p> <ol> <li> <p>Configurar Vari\u00e1veis de Ambiente de Produ\u00e7\u00e3o:</p> <p>Crie o arquivo <code>dotenv_files/.env.prod</code> e preencha com as vari\u00e1veis de ambiente necess\u00e1rias para produ\u00e7\u00e3o. Um exemplo pode ser encontrado no pr\u00f3prio arquivo comentado.</p> </li> <li> <p>Construir e Iniciar os Servi\u00e7os de Produ\u00e7\u00e3o:</p> <p>Navegue at\u00e9 a raiz do projeto e execute:</p> <pre><code>docker compose -f docker-compose.prod.yml up --build -d\n</code></pre> <p>Este comando construir\u00e1 a imagem Docker de produ\u00e7\u00e3o (<code>Dockerfile</code>) e iniciar\u00e1 os servi\u00e7os em modo detached (<code>-d</code>). Em produ\u00e7\u00e3o, a porta exposta ser\u00e1 a 80.</p> </li> <li> <p>Executar Migra\u00e7\u00f5es do Banco de Dados (Produ\u00e7\u00e3o):</p> <pre><code>docker compose -f docker-compose.prod.yml exec project_prod python /app/project/manage.py migrate\n</code></pre> </li> <li> <p>Criar um Superusu\u00e1rio (Admin - Produ\u00e7\u00e3o):</p> <pre><code>docker compose -f docker-compose.prod.yml exec project_prod python /app/project/manage.py createsuperuser\n</code></pre> </li> <li> <p>Acessar a Aplica\u00e7\u00e3o (Produ\u00e7\u00e3o Local):</p> <ul> <li>A API estar\u00e1 dispon\u00edvel em <code>http://localhost/v1/</code>.</li> <li>O painel de administra\u00e7\u00e3o do Django estar\u00e1 em <code>http://localhost/admin/</code>.</li> </ul> </li> </ol>"},{"location":"setup/project-setup/#configuracao-local-sem-docker","title":"Configura\u00e7\u00e3o Local (sem Docker)","text":"<p>Se voc\u00ea preferir rodar o projeto diretamente em sua m\u00e1quina sem Docker, as instru\u00e7\u00f5es permanecem as mesmas:</p> <ol> <li> <p>Instalar Depend\u00eancias:</p> <p>Crie um ambiente virtual e instale as depend\u00eancias:</p> <pre><code>python -m venv venv\nsource venv/bin/activate\npip install -r project/requirements.txt\n</code></pre> </li> <li> <p>Configurar Banco de Dados:</p> <p>Voc\u00ea precisar\u00e1 ter um banco de dados PostgreSQL configurado e atualizar as configura\u00e7\u00f5es em <code>project/project/settings.py</code></p> </li> </ol>"},{"location":"setup/quick-start-guide/","title":"\ud83d\ude80 Guia de In\u00edcio R\u00e1pido","text":"<p>Este guia te levar\u00e1 do zero ao projeto rodando em menos de 5 minutos!</p>"},{"location":"setup/quick-start-guide/#pre-requisitos","title":"\ud83d\udccb Pr\u00e9-requisitos","text":""},{"location":"setup/quick-start-guide/#obrigatorios","title":"Obrigat\u00f3rios","text":"<ul> <li>Python 3.12+ (Download)</li> <li>Git (Download)</li> </ul>"},{"location":"setup/quick-start-guide/#opcionais-mas-recomendados","title":"Opcionais (mas recomendados)","text":"<ul> <li>Docker &amp; Docker Compose (Download)</li> <li>Make (geralmente j\u00e1 instalado no Linux/Mac)</li> </ul>"},{"location":"setup/quick-start-guide/#setup-em-3-comandos","title":"\u26a1 Setup em 3 Comandos","text":""},{"location":"setup/quick-start-guide/#opcao-1-com-makefile-recomendado","title":"Op\u00e7\u00e3o 1: Com Makefile (Recomendado)","text":"<pre><code># 1. Clone o template\ngit clone https://github.com/luderibeiro/django_base.git meu-projeto\ncd meu-projeto\n\n# 2. Configure tudo automaticamente\nmake setup\n\n# 3. Inicie o servidor\nmake run\n</code></pre>"},{"location":"setup/quick-start-guide/#opcao-2-com-docker","title":"Op\u00e7\u00e3o 2: Com Docker","text":"<pre><code># 1. Clone o template\ngit clone https://github.com/luderibeiro/django_base.git meu-projeto\ncd meu-projeto\n\n# 2. Inicie com Docker\nmake docker-run\n</code></pre>"},{"location":"setup/quick-start-guide/#verificando-se-funcionou","title":"\ud83c\udfaf Verificando se Funcionou","text":"<p>Ap\u00f3s executar os comandos acima, voc\u00ea deve ver:</p> <pre><code>\u2705 Ambiente configurado com sucesso!\n\ud83d\ude80 Servidor iniciado em http://127.0.0.1:8000\n</code></pre> <p>Acesse http://127.0.0.1:8000 no seu navegador e voc\u00ea ver\u00e1 a p\u00e1gina inicial do Django.</p>"},{"location":"setup/quick-start-guide/#criacao-de-superusuario","title":"\ud83d\udd10 Cria\u00e7\u00e3o de Superusu\u00e1rio","text":"<p>O comando <code>make setup</code> solicitar\u00e1 que voc\u00ea crie um superusu\u00e1rio interativamente:</p> <pre><code># Durante o setup, voc\u00ea ser\u00e1 solicitado a criar credenciais seguras\nmake createsuperuser\n</code></pre> <p>\u26a0\ufe0f Importante: Sempre use credenciais seguras em produ\u00e7\u00e3o!</p> <p>Acesse http://127.0.0.1:8000/admin para entrar no painel administrativo.</p>"},{"location":"setup/quick-start-guide/#executando-testes","title":"\ud83e\uddea Executando Testes","text":"<pre><code># Todos os testes\nmake test\n\n# Testes com cobertura\nmake test-coverage\n\n# Testes em modo watch (executa automaticamente quando arquivos mudam)\nmake test-watch\n</code></pre>"},{"location":"setup/quick-start-guide/#comandos-uteis","title":"\ud83d\udee0\ufe0f Comandos \u00dateis","text":"<pre><code>make help              # Lista todos os comandos dispon\u00edveis\nmake status            # Mostra status do projeto\nmake clean             # Limpa arquivos tempor\u00e1rios\nmake lint              # Verifica qualidade do c\u00f3digo\nmake format            # Formata c\u00f3digo automaticamente\nmake docs-serve        # Serve documenta\u00e7\u00e3o localmente\n</code></pre>"},{"location":"setup/quick-start-guide/#usando-docker","title":"\ud83d\udc33 Usando Docker","text":""},{"location":"setup/quick-start-guide/#desenvolvimento","title":"Desenvolvimento","text":"<pre><code>make docker-run        # Inicia containers de desenvolvimento\nmake docker-stop       # Para os containers\n</code></pre>"},{"location":"setup/quick-start-guide/#producao","title":"Produ\u00e7\u00e3o","text":"<pre><code>make docker-prod       # Inicia em modo produ\u00e7\u00e3o\n</code></pre>"},{"location":"setup/quick-start-guide/#personalizacao-inicial","title":"\ud83d\udd27 Personaliza\u00e7\u00e3o Inicial","text":""},{"location":"setup/quick-start-guide/#1-renomeie-o-projeto","title":"1. Renomeie o Projeto","text":"<pre><code># Substitua 'meu-projeto' pelo nome desejado\nfind . -name \"*.py\" -exec sed -i 's/django_base/meu_projeto/g' {} \\;\n</code></pre>"},{"location":"setup/quick-start-guide/#2-configure-variaveis-de-ambiente","title":"2. Configure Vari\u00e1veis de Ambiente","text":"<pre><code># Copie o arquivo de exemplo\ncp dotenv_files/.env-example .env\n\n# Edite com suas configura\u00e7\u00f5es\nnano .env\n</code></pre>"},{"location":"setup/quick-start-guide/#3-configure-o-banco-de-dados","title":"3. Configure o Banco de Dados","text":"<p>Por padr\u00e3o usa SQLite. Para PostgreSQL:</p> <pre><code># Instale o PostgreSQL\n# Ubuntu/Debian: sudo apt install postgresql postgresql-contrib\n# macOS: brew install postgresql\n\n# Configure no .env\nDATABASE_URL=postgresql://user:password@localhost:5432/dbname\n</code></pre>"},{"location":"setup/quick-start-guide/#problemas-comuns","title":"\ud83d\udea8 Problemas Comuns","text":""},{"location":"setup/quick-start-guide/#python-nao-encontrado","title":"Python n\u00e3o encontrado","text":"<pre><code># Verifique a vers\u00e3o\npython3 --version\n\n# Se n\u00e3o tiver Python 3.12+, instale:\n# Ubuntu/Debian: sudo apt install python3.12\n# macOS: brew install python@3.12\n</code></pre>"},{"location":"setup/quick-start-guide/#make-nao-encontrado","title":"Make n\u00e3o encontrado","text":"<pre><code># Ubuntu/Debian\nsudo apt install make\n\n# macOS (com Homebrew)\nbrew install make\n</code></pre>"},{"location":"setup/quick-start-guide/#permissoes-no-docker","title":"Permiss\u00f5es no Docker","text":"<pre><code># Adicione seu usu\u00e1rio ao grupo docker\nsudo usermod -aG docker $USER\n# Fa\u00e7a logout e login novamente\n</code></pre>"},{"location":"setup/quick-start-guide/#proximos-passos","title":"\ud83c\udf89 Pr\u00f3ximos Passos","text":"<p>Agora que seu projeto est\u00e1 rodando:</p> <ol> <li>\ud83d\udcd6 Leia a Documenta\u00e7\u00e3o da Arquitetura</li> <li>\ud83e\uddea Explore os Testes Automatizados</li> <li>\ud83d\udd10 Configure Autentica\u00e7\u00e3o OAuth2</li> <li>\ud83d\ude80 Prepare para Deploy em Produ\u00e7\u00e3o</li> </ol>"},{"location":"setup/quick-start-guide/#dicas-pro","title":"\ud83d\udca1 Dicas Pro","text":"<ul> <li>Use <code>make test-watch</code> durante desenvolvimento</li> <li>Execute <code>make lint</code> antes de commits</li> <li>Use <code>make docs-serve</code> para ver a documenta\u00e7\u00e3o localmente</li> <li>Configure seu IDE para usar o ambiente virtual em <code>venv/</code></li> </ul> <p>\ud83c\udfaf Objetivo alcan\u00e7ado? Seu projeto Django com Arquitetura Limpa est\u00e1 rodando!</p> <p>Se encontrou algum problema, abra uma issue no GitHub.</p>"},{"location":"setup/staging-setup/","title":"Setup de Homologa\u00e7\u00e3o","text":"<p>Este guia detalha como configurar o ambiente de homologa\u00e7\u00e3o (staging) para o Django Base.</p>"},{"location":"setup/staging-setup/#pre-requisitos","title":"\ud83d\udccb Pr\u00e9-requisitos","text":"<ul> <li>Python 3.12+</li> <li>PostgreSQL 13+</li> <li>Redis (opcional, para cache)</li> <li>Nginx (opcional, para proxy reverso)</li> <li>Certificado SSL (para HTTPS)</li> </ul>"},{"location":"setup/staging-setup/#configuracao-rapida-com-makefile","title":"\ud83d\ude80 Configura\u00e7\u00e3o R\u00e1pida com Makefile","text":"<pre><code># Clone o reposit\u00f3rio\ngit clone https://github.com/luderibeiro/django_base.git\ncd django_base\n\n# Configure o ambiente de homologa\u00e7\u00e3o\nmake prod-setup\n</code></pre>"},{"location":"setup/staging-setup/#configuracao-manual","title":"\u2699\ufe0f Configura\u00e7\u00e3o Manual","text":""},{"location":"setup/staging-setup/#1-preparar-o-ambiente","title":"1. Preparar o Ambiente","text":"<pre><code># Criar ambiente virtual\npython3 -m venv venv\nsource venv/bin/activate\n\n# Instalar depend\u00eancias\npip install -r project/requirements.txt\n</code></pre>"},{"location":"setup/staging-setup/#2-configurar-variaveis-de-ambiente","title":"2. Configurar Vari\u00e1veis de Ambiente","text":"<p>Crie um arquivo <code>.env</code> na raiz do projeto:</p> <pre><code># .env\nDEBUG=False\nSECRET_KEY=sua-chave-secreta-super-segura-aqui\nALLOWED_HOSTS=staging.seudominio.com,localhost,127.0.0.1\n\n# Banco de dados\nDB_ENGINE=django.db.backends.postgresql\nPOSTGRES_DB=django_base_staging\nPOSTGRES_USER=django_user\nPOSTGRES_PASSWORD=senha-super-segura\nPOSTGRES_HOST=localhost\nPOSTGRES_PORT=5432\n\n# Redis (opcional)\nREDIS_URL=redis://localhost:6379/1\n\n# Email (opcional)\nEMAIL_HOST=smtp.gmail.com\nEMAIL_PORT=587\nEMAIL_USE_TLS=True\nEMAIL_HOST_USER=seu-email@gmail.com\nEMAIL_HOST_PASSWORD=sua-senha-de-app\n\n# Logging\nLOG_LEVEL=INFO\nLOG_FILE=/var/log/django_base/staging.log\n</code></pre>"},{"location":"setup/staging-setup/#3-configurar-banco-de-dados-postgresql","title":"3. Configurar Banco de Dados PostgreSQL","text":"<pre><code># Conectar ao PostgreSQL\nsudo -u postgres psql\n\n# Criar banco de dados\nCREATE DATABASE django_base_staging;\nCREATE USER django_user WITH PASSWORD 'senha-super-segura';\nGRANT ALL PRIVILEGES ON DATABASE django_base_staging TO django_user;\n\\q\n</code></pre>"},{"location":"setup/staging-setup/#4-configurar-settings-para-homologacao","title":"4. Configurar Settings para Homologa\u00e7\u00e3o","text":"<p>Crie o arquivo <code>project/project/settings_staging.py</code>:</p> <pre><code>import os\nfrom .settings import *\n\n# Configura\u00e7\u00f5es espec\u00edficas para homologa\u00e7\u00e3o\nDEBUG = False\nALLOWED_HOSTS = os.environ.get('ALLOWED_HOSTS', '').split(',')\n\n# Banco de dados PostgreSQL\nDATABASES = {\n    'default': {\n        'ENGINE': os.environ.get('DB_ENGINE', 'django.db.backends.postgresql'),\n        'NAME': os.environ.get('POSTGRES_DB', 'django_base_staging'),\n        'USER': os.environ.get('POSTGRES_USER', 'django_user'),\n        'PASSWORD': os.environ.get('POSTGRES_PASSWORD', ''),\n        'HOST': os.environ.get('POSTGRES_HOST', 'localhost'),\n        'PORT': os.environ.get('POSTGRES_PORT', '5432'),\n    }\n}\n\n# Logging para homologa\u00e7\u00e3o\nLOGGING = {\n    'version': 1,\n    'disable_existing_loggers': False,\n    'formatters': {\n        'verbose': {\n            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',\n            'style': '{',\n        },\n    },\n    'handlers': {\n        'file': {\n            'level': 'INFO',\n            'class': 'logging.FileHandler',\n            'filename': os.environ.get('LOG_FILE', '/var/log/django_base/staging.log'),\n            'formatter': 'verbose',\n        },\n        'console': {\n            'level': 'INFO',\n            'class': 'logging.StreamHandler',\n            'formatter': 'verbose',\n        },\n    },\n    'root': {\n        'handlers': ['file', 'console'],\n        'level': 'INFO',\n    },\n}\n\n# Configura\u00e7\u00f5es de seguran\u00e7a\nSECURE_BROWSER_XSS_FILTER = True\nSECURE_CONTENT_TYPE_NOSNIFF = True\nX_FRAME_OPTIONS = 'DENY'\n\n# Cache com Redis (opcional)\nif os.environ.get('REDIS_URL'):\n    CACHES = {\n        'default': {\n            'BACKEND': 'django_redis.cache.RedisCache',\n            'LOCATION': os.environ.get('REDIS_URL'),\n            'OPTIONS': {\n                'CLIENT_CLASS': 'django_redis.client.DefaultClient',\n            }\n        }\n    }\n\n# Email (opcional)\nif os.environ.get('EMAIL_HOST'):\n    EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\n    EMAIL_HOST = os.environ.get('EMAIL_HOST')\n    EMAIL_PORT = int(os.environ.get('EMAIL_PORT', 587))\n    EMAIL_USE_TLS = os.environ.get('EMAIL_USE_TLS', 'True').lower() == 'true'\n    EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER')\n    EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD')\n</code></pre>"},{"location":"setup/staging-setup/#5-executar-migracoes-e-configuracoes","title":"5. Executar Migra\u00e7\u00f5es e Configura\u00e7\u00f5es","text":"<pre><code># Ativar ambiente virtual\nsource venv/bin/activate\n\n# Configurar vari\u00e1veis de ambiente\nexport DJANGO_SETTINGS_MODULE=project.settings_staging\n\n# Executar migra\u00e7\u00f5es\ncd project\npython manage.py migrate\n\n# Criar superusu\u00e1rio\npython manage.py createsuperuser\n\n# Coletar arquivos est\u00e1ticos\npython manage.py collectstatic --noinput\n</code></pre>"},{"location":"setup/staging-setup/#6-configurar-nginx-opcional","title":"6. Configurar Nginx (Opcional)","text":"<p>Crie o arquivo <code>/etc/nginx/sites-available/django_base_staging</code>:</p> <pre><code>server {\n    listen 80;\n    server_name staging.seudominio.com;\n\n    # Redirecionar para HTTPS\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name staging.seudominio.com;\n\n    # Certificados SSL\n    ssl_certificate /path/to/certificate.crt;\n    ssl_certificate_key /path/to/private.key;\n\n    # Configura\u00e7\u00f5es SSL\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512;\n    ssl_prefer_server_ciphers off;\n\n    # Arquivos est\u00e1ticos\n    location /static/ {\n        alias /path/to/django_base/project/staticfiles/;\n        expires 1y;\n        add_header Cache-Control \"public, immutable\";\n    }\n\n    # Arquivos de m\u00eddia\n    location /media/ {\n        alias /path/to/django_base/project/media/;\n        expires 1y;\n        add_header Cache-Control \"public, immutable\";\n    }\n\n    # Aplica\u00e7\u00e3o Django\n    location / {\n        proxy_pass http://127.0.0.1:8000;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n</code></pre> <p>Ativar o site:</p> <pre><code>sudo ln -s /etc/nginx/sites-available/django_base_staging /etc/nginx/sites-enabled/\nsudo nginx -t\nsudo systemctl reload nginx\n</code></pre>"},{"location":"setup/staging-setup/#7-configurar-systemd-service","title":"7. Configurar Systemd Service","text":"<p>Crie o arquivo <code>/etc/systemd/system/django-base-staging.service</code>:</p> <pre><code>[Unit]\nDescription=Django Base Staging\nAfter=network.target\n\n[Service]\nType=simple\nUser=www-data\nGroup=www-data\nWorkingDirectory=/path/to/django_base\nEnvironment=DJANGO_SETTINGS_MODULE=project.settings_staging\nExecStart=/path/to/django_base/venv/bin/gunicorn project.wsgi:application --bind 127.0.0.1:8000\nExecReload=/bin/kill -s HUP $MAINPID\nRestart=always\n\n[Install]\nWantedBy=multi-user.target\n</code></pre> <p>Ativar o servi\u00e7o:</p> <pre><code>sudo systemctl daemon-reload\nsudo systemctl enable django-base-staging\nsudo systemctl start django-base-staging\n</code></pre>"},{"location":"setup/staging-setup/#configuracao-com-docker","title":"\ud83d\udc33 Configura\u00e7\u00e3o com Docker","text":""},{"location":"setup/staging-setup/#1-docker-compose-para-homologacao","title":"1. Docker Compose para Homologa\u00e7\u00e3o","text":"<p>Crie o arquivo <code>docker-compose.staging.yml</code>:</p> <pre><code>version: '3.8'\n\nservices:\n  db:\n    image: postgres:15\n    environment:\n      POSTGRES_DB: django_base_staging\n      POSTGRES_USER: django_user\n      POSTGRES_PASSWORD: senha-super-segura\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n    ports:\n      - \"5432:5432\"\n\n  redis:\n    image: redis:7-alpine\n    ports:\n      - \"6379:6379\"\n\n  web:\n    build: .\n    command: gunicorn project.wsgi:application --bind 0.0.0.0:8000\n    environment:\n      - DJANGO_SETTINGS_MODULE=project.settings_staging\n      - DEBUG=False\n      - SECRET_KEY=sua-chave-secreta-super-segura\n      - ALLOWED_HOSTS=staging.seudominio.com\n      - POSTGRES_DB=django_base_staging\n      - POSTGRES_USER=django_user\n      - POSTGRES_PASSWORD=senha-super-segura\n      - POSTGRES_HOST=db\n      - REDIS_URL=redis://redis:6379/1\n    ports:\n      - \"8000:8000\"\n    depends_on:\n      - db\n      - redis\n    volumes:\n      - static_volume:/app/staticfiles\n      - media_volume:/app/media\n\n  nginx:\n    image: nginx:alpine\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n    volumes:\n      - ./nginx/staging.conf:/etc/nginx/conf.d/default.conf\n      - static_volume:/app/staticfiles\n      - media_volume:/app/media\n      - ./ssl:/etc/nginx/ssl\n    depends_on:\n      - web\n\nvolumes:\n  postgres_data:\n  static_volume:\n  media_volume:\n</code></pre>"},{"location":"setup/staging-setup/#2-executar-com-docker","title":"2. Executar com Docker","text":"<pre><code># Construir e executar\ndocker-compose -f docker-compose.staging.yml up --build -d\n\n# Executar migra\u00e7\u00f5es\ndocker-compose -f docker-compose.staging.yml exec web python manage.py migrate\n\n# Criar superusu\u00e1rio\ndocker-compose -f docker-compose.staging.yml exec web python manage.py createsuperuser\n\n# Coletar arquivos est\u00e1ticos\ndocker-compose -f docker-compose.staging.yml exec web python manage.py collectstatic --noinput\n</code></pre>"},{"location":"setup/staging-setup/#testes-em-homologacao","title":"\ud83e\uddea Testes em Homologa\u00e7\u00e3o","text":"<pre><code># Executar testes\nmake test\n\n# Verificar status\nmake status\n\n# Verificar logs\ntail -f /var/log/django_base/staging.log\n</code></pre>"},{"location":"setup/staging-setup/#comandos-uteis","title":"\ud83d\udd27 Comandos \u00dateis","text":"<pre><code># Verificar status do servi\u00e7o\nsudo systemctl status django-base-staging\n\n# Reiniciar servi\u00e7o\nsudo systemctl restart django-base-staging\n\n# Ver logs do servi\u00e7o\nsudo journalctl -u django-base-staging -f\n\n# Backup do banco de dados\npg_dump -h localhost -U django_user django_base_staging &gt; backup_$(date +%Y%m%d_%H%M%S).sql\n\n# Restaurar backup\npsql -h localhost -U django_user django_base_staging &lt; backup_20240101_120000.sql\n</code></pre>"},{"location":"setup/staging-setup/#monitoramento","title":"\ud83d\udea8 Monitoramento","text":""},{"location":"setup/staging-setup/#1-health-check","title":"1. Health Check","text":"<p>Crie um endpoint de health check em <code>project/core/views/health.py</code>:</p> <pre><code>from django.http import JsonResponse\nfrom django.db import connection\nfrom django.core.cache import cache\n\ndef health_check(request):\n    \"\"\"Endpoint para verificar a sa\u00fade da aplica\u00e7\u00e3o\"\"\"\n    try:\n        # Verificar banco de dados\n        with connection.cursor() as cursor:\n            cursor.execute(\"SELECT 1\")\n\n        # Verificar cache\n        cache.set('health_check', 'ok', 10)\n        cache.get('health_check')\n\n        return JsonResponse({\n            'status': 'healthy',\n            'database': 'ok',\n            'cache': 'ok'\n        })\n    except Exception as e:\n        return JsonResponse({\n            'status': 'unhealthy',\n            'error': str(e)\n        }, status=500)\n</code></pre>"},{"location":"setup/staging-setup/#2-logs-de-monitoramento","title":"2. Logs de Monitoramento","text":"<pre><code># Monitorar logs em tempo real\ntail -f /var/log/django_base/staging.log\n\n# Filtrar erros\ngrep \"ERROR\" /var/log/django_base/staging.log\n\n# Estat\u00edsticas de acesso\nawk '{print $1}' /var/log/nginx/access.log | sort | uniq -c | sort -nr\n</code></pre>"},{"location":"setup/staging-setup/#seguranca","title":"\ud83d\udd12 Seguran\u00e7a","text":""},{"location":"setup/staging-setup/#1-firewall","title":"1. Firewall","text":"<pre><code># Configurar UFW\nsudo ufw allow 22/tcp\nsudo ufw allow 80/tcp\nsudo ufw allow 443/tcp\nsudo ufw enable\n</code></pre>"},{"location":"setup/staging-setup/#2-backup-automatico","title":"2. Backup Autom\u00e1tico","text":"<p>Crie um script de backup em <code>/usr/local/bin/backup_django_base.sh</code>:</p> <pre><code>#!/bin/bash\nBACKUP_DIR=\"/var/backups/django_base\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\n# Criar diret\u00f3rio de backup\nmkdir -p $BACKUP_DIR\n\n# Backup do banco de dados\npg_dump -h localhost -U django_user django_base_staging &gt; $BACKUP_DIR/db_$DATE.sql\n\n# Backup dos arquivos de m\u00eddia\ntar -czf $BACKUP_DIR/media_$DATE.tar.gz /path/to/django_base/project/media/\n\n# Manter apenas os \u00faltimos 7 backups\nfind $BACKUP_DIR -name \"*.sql\" -mtime +7 -delete\nfind $BACKUP_DIR -name \"*.tar.gz\" -mtime +7 -delete\n</code></pre> <p>Agendar no crontab:</p> <pre><code># Executar backup diariamente \u00e0s 2:00\n0 2 * * * /usr/local/bin/backup_django_base.sh\n</code></pre>"},{"location":"setup/staging-setup/#checklist-de-homologacao","title":"\u2705 Checklist de Homologa\u00e7\u00e3o","text":"<ul> <li>[ ] Ambiente virtual configurado</li> <li>[ ] Depend\u00eancias instaladas</li> <li>[ ] Banco de dados PostgreSQL configurado</li> <li>[ ] Vari\u00e1veis de ambiente configuradas</li> <li>[ ] Migra\u00e7\u00f5es executadas</li> <li>[ ] Superusu\u00e1rio criado</li> <li>[ ] Arquivos est\u00e1ticos coletados</li> <li>[ ] Nginx configurado (opcional)</li> <li>[ ] SSL configurado (opcional)</li> <li>[ ] Systemd service configurado</li> <li>[ ] Logs configurados</li> <li>[ ] Backup autom\u00e1tico configurado</li> <li>[ ] Monitoramento configurado</li> <li>[ ] Testes executados</li> <li>[ ] Health check funcionando</li> </ul>"},{"location":"setup/staging-setup/#solucao-de-problemas","title":"\ud83c\udd98 Solu\u00e7\u00e3o de Problemas","text":""},{"location":"setup/staging-setup/#problema-erro-de-conexao-com-banco-de-dados","title":"Problema: Erro de conex\u00e3o com banco de dados","text":"<pre><code># Verificar se o PostgreSQL est\u00e1 rodando\nsudo systemctl status postgresql\n\n# Verificar logs do PostgreSQL\nsudo tail -f /var/log/postgresql/postgresql-15-main.log\n</code></pre>"},{"location":"setup/staging-setup/#problema-erro-de-permissao","title":"Problema: Erro de permiss\u00e3o","text":"<pre><code># Verificar permiss\u00f5es dos arquivos\nls -la /path/to/django_base/\n\n# Corrigir permiss\u00f5es\nsudo chown -R www-data:www-data /path/to/django_base/\nsudo chmod -R 755 /path/to/django_base/\n</code></pre>"},{"location":"setup/staging-setup/#problema-erro-de-ssl","title":"Problema: Erro de SSL","text":"<pre><code># Verificar certificados\nopenssl x509 -in /path/to/certificate.crt -text -noout\n\n# Testar SSL\nopenssl s_client -connect staging.seudominio.com:443\n</code></pre> <p>\ud83c\udf89 Parab\u00e9ns! Seu ambiente de homologa\u00e7\u00e3o est\u00e1 configurado e pronto para uso!</p>"}]}