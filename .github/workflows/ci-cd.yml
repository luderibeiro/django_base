name: 🚀 CI/CD Pipeline

on:
    push:
        branches: [main, develop]
    pull_request:
        branches: [main]

permissions:
    contents: read
    pages: write
    id-token: write

jobs:
    test:
        name: 🧪 Tests & Quality
        runs-on: ubuntu-latest

        services:
            postgres:
                image: postgres:13
                env:
                    POSTGRES_PASSWORD: postgres
                    POSTGRES_DB: test_db
                options: >-
                    --health-cmd pg_isready
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 5
                ports:
                    - 5432:5432

            redis:
                image: redis:6
                options: >-
                    --health-cmd "redis-cli ping"
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 5
                ports:
                    - 6379:6379

        steps:
            - name: 📥 Checkout code
              uses: actions/checkout@v4

            - name: 🐍 Set up Python
              uses: actions/setup-python@v4
              with:
                  python-version: "3.12"
                  cache: "pip"

            - name: 📦 Install dependencies
              run: |
                  python -m pip install --upgrade pip
                  pip install -r project/requirements.txt
                  pip install coverage pytest-cov flake8 black pip-audit

            - name: 🎨 Code formatting check
              run: |
                  cd project
                  black --check . --exclude=migrations

            - name: 🔍 Lint with flake8
              run: |
                  cd project
                  flake8 . --exclude=migrations,venv,__pycache__ --max-line-length=88

            - name: 🔒 Security audit
              run: |
                  cd project
                  pip-audit

            - name: 🧪 Run tests with coverage
              env:
                  DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
                  REDIS_URL: redis://localhost:6379/0
                  SECRET_KEY: ${{ secrets.SECRET_KEY_FOR_CI }}
                  DEBUG: False
              run: |
                  cd project
                  export PYTHONPATH=$PWD
                  pytest --cov=. --cov-report=xml --cov-report=html --cov-report=term

            - name: 📊 Upload coverage to Codecov
              uses: codecov/codecov-action@v3
              with:
                  file: ./project/coverage.xml
                  flags: unittests
                  name: codecov-umbrella

    docker:
        name: 🐳 Docker Build
        runs-on: ubuntu-latest
        needs: test

        steps:
            - name: 📥 Checkout code
              uses: actions/checkout@v4

            - name: 🐳 Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: 🔨 Build Docker image
              run: |
                  docker build -t django-base:latest .

            - name: 🧪 Test Docker image
              env:
                  DJANGO_SECRET_KEY: test-secret-key-for-ci
                  DJANGO_DEBUG: True
                  DJANGO_ALLOWED_HOSTS: localhost,127.0.0.1
              run: |
                  docker run --rm -w /app/project -e DJANGO_SECRET_KEY=$DJANGO_SECRET_KEY -e DJANGO_DEBUG=$DJANGO_DEBUG -e DJANGO_ALLOWED_HOSTS=$DJANGO_ALLOWED_HOSTS django-base:latest python manage.py check --settings=project.settings_test


    security:
        name: 🔒 Security Scan
        runs-on: ubuntu-latest
        needs: test

        steps:
            - name: 📥 Checkout code
              uses: actions/checkout@v4

            - name: 🔍 Run Trivy vulnerability scanner
              uses: aquasecurity/trivy-action@master
              with:
                  scan-type: "fs"
                  scan-ref: "."
                  format: "table"
                  ignore-unfixed: true

    release:
        name: 🏷️ Create Release
        runs-on: ubuntu-latest
        needs: [test, docker]
        if: github.ref == 'refs/heads/main' && contains(github.event.head_commit.message, '[release]')

        steps:
            - name: 📥 Checkout code
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: 🏷️ Generate tag
              id: tag
              run: |
                  VERSION=$(date +%Y.%m.%d)-$(git rev-parse --short HEAD)
                  echo "version=$VERSION" >> $GITHUB_OUTPUT

            - name: 📦 Create Release
              uses: actions/create-release@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  tag_name: v${{ steps.tag.outputs.version }}
                  release_name: Release v${{ steps.tag.outputs.version }}
                  body: |
                      ## 🚀 Django Base Release v${{ steps.tag.outputs.version }}

                      ### ✨ Principais Mudanças
                      - Melhorias na arquitetura limpa
                      - Atualizações de segurança
                      - Documentação aprimorada

                      ### 🔧 Como Usar
                      ```bash
                      git clone https://github.com/luderibeiro/django_base.git
                      cd django_base
                      make setup
                      ```

                      ### 📚 Documentação
                      Acesse: https://luderibeiro.github.io/django_base/
                  draft: false
                  prerelease: false
